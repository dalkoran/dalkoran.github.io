<?xml version="1.0" encoding="utf-8"?><rss xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><ttl>60</ttl><title>Nigel Spencer's Blog</title><link>http://blog.spencen.com</link><lastBuildDate>Sat, 26 Apr 2014 00:11:28 GMT</lastBuildDate><pubDate>Sat, 26 Apr 2014 00:11:28 GMT</pubDate><language>en</language><copyright /><itunes:subtitle> </itunes:subtitle><itunes:author /><itunes:summary /><description /><itunes:owner><itunes:name /><itunes:email>support@spencen.com</itunes:email></itunes:owner><itunes:explicit>no</itunes:explicit><itunes:category text="Arts" /><item><title>Portable sound using the Soundwave SW50</title><link>http://blog.spencen.com/2012/07/10/portable-sound-using-the-soundwave-sw50.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;So tonight I got my hands on a new fun gadget - it’s a portble bluetooth speaker – the &lt;a href="http://www.mobilefun.co.uk/search/?searchterm=SW50" target="_blank"&gt;Soundwave SW50&lt;/a&gt;. &lt;/p&gt;  &lt;p&gt;The unit itself is very small – about 7cm triangular base and a little less than that in height. Its got a smooth stylish finish, an on-off switch, USB charger input, single button and an LED.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mobilefun.co.uk/search/?searchterm=SW50" target="_blank"&gt;&lt;img title="33956" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: left; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="33956" align="left" src="http://blog.spencen.com/images/83489-72989/33956_3.jpg" width="240" height="240"&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I took the unit out of the box, switched it on and had it paired to my phone and playing music in less than 2 minutes. I love the fact that the unit came already charged and that the pairing was automatic (no 4 digit pin entry). I also connected the unit to my laptop and wife’s iPod. The only slight annoyance was that in order to pair/connect it with a new device I first had to disconnect any existing device. &lt;/p&gt;  &lt;p&gt;Of course the entire point of having a unit like this is because speakers on most mobile devices (including my laptop) are terrible. Usually I resort to headphones – but there are occasions where that simple isn’t feasible. For instance, sharing a video on a laptop/phone with the kids, or if I’m doing some serious coding at home but don’t want the hassle of tangled headphone wires as I move around. I used to have a dedicated set of speakers hooked up in my study, but since I’m now living in a cramped apartment a portable speaker unit, paired with a mobile device is really very practical. In fact my Samsung Focus (WP7.5), Zune subscription and the SW50 make a great combination.&lt;/p&gt;  &lt;p&gt;The sound quality of the SW50 really surprised me – in a good way. When I saw the size of the device I was worried that the quality and volume would both be underwhelming. Thankfully that wasn’t the case, the little unit really does deliver in both these areas. The only criticism I have is that the sound is very… well… unidirectional. Compared to a good pair of headphones or a set of 5.1 surround speakers – but that’s not really a fair comparison since neither of those can be had for around $30 . (It did make me wonder though whether there is a market for a pair of similar devices each playing a single channel).&lt;a href="http://www.mobilefun.co.uk/cat/Jawbone-Speakers.htm" target="_blank"&gt;&lt;img title="27017" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: right; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="27017" align="right" src="http://blog.spencen.com/images/83489-72989/27017_3.jpg" width="216" height="160"&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;The unit’s single button can be used for answering or ignoring incoming calls on the connected bluetooth device. To be honest this isn’t a feature that I can really see using – but it may appeal to some.&lt;/p&gt;  &lt;p&gt;I guess for those that are more serious about their portable sound experience, forking out some extra cash on something like a &lt;a href="http://www.mobilefun.co.uk/cat/Jawbone-Speakers.htm" target="_blank"&gt;Jawbone Jambox&lt;/a&gt; would be the preferred option. Me though – I’m really happy with the SW50. &lt;/p&gt;  &lt;p&gt;Thanks very much for &lt;a href="http://www.mobilefun.co.uk"&gt;www.mobilefun.co.uk&lt;/a&gt; for&amp;nbsp; sending me this unit to review – you gals rock!&lt;/p&gt;</description><comments>http://blog.spencen.com/2012/07/10/portable-sound-using-the-soundwave-sw50.aspx#Comments</comments><guid isPermaLink="false">85f28e7f-6bad-404d-bb34-9db75ff405a3</guid><pubDate>Wed, 11 Jul 2012 04:07:00 GMT</pubDate></item><item><title>I miss having a local beach of my own</title><link>http://blog.spencen.com/2011/09/12/i-miss-having-a-local-beach-of-my-own.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;When I lived in Australia this used to be one of my local beaches…&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/DSC09252%20Stitch%20Wide_4.jpg"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DSC09252 Stitch Wide" border="0" alt="DSC09252 Stitch Wide" src="http://blog.spencen.com/images/83489-72989/DSC09252%20Stitch%20Wide_thumb_1.jpg" width="668" height="178" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;This was another…&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/DSC01812.jpg"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DSC01812" border="0" alt="DSC01812" src="http://blog.spencen.com/images/83489-72989/DSC01812_thumb.jpg" width="422" height="183" /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;and another…&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/DSC07844.jpg"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DSC07844" border="0" alt="DSC07844" src="http://blog.spencen.com/images/83489-72989/DSC07844_thumb.jpg" width="423" height="178" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;This one wasn’t local, but it still had the desired population count…&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/DSC07596-601%20Stitch_2.jpg"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DSC07596-601 Stitch" border="0" alt="DSC07596-601 Stitch" src="http://blog.spencen.com/images/83489-72989/DSC07596-601%20Stitch_thumb.jpg" width="667" height="150" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Now my local beach looks like this &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-confusedsmile" alt="Confused smile" src="http://blog.spencen.com/images/83489-72989/wlEmoticon-confusedsmile_2.png" /&gt;…&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/i-DmBsGFS-XL_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="i-DmBsGFS-XL" border="0" alt="i-DmBsGFS-XL" src="http://blog.spencen.com/images/83489-72989/i-DmBsGFS-XL_thumb.jpg" width="668" height="168" /&gt;&lt;/a&gt;&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2011/09/12/i-miss-having-a-local-beach-of-my-own.aspx#Comments</comments><guid isPermaLink="false">7cd6a8ea-5644-41e8-88e1-1686d80448aa</guid><pubDate>Tue, 13 Sep 2011 01:13:43 GMT</pubDate></item><item><title>WP7 Backgrounds</title><link>http://blog.spencen.com/2011/06/14/wp7-backgrounds.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I’ve taken to swapping my Windows Phone 7 background to match the season, or to remind me of a recent vacation. Here’s some of the backgrounds that I’ve used to date, each cropped from a photo that I’ve taken over the last 15 months. One of these photos was even taken with the phone itself!&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:66721397-FF69-4ca6-AEC4-17E6B3208830:1f380638-1b92-4024-b4a7-8eeb74c827e7" class="wlWriterEditableSmartContent"&gt;&lt;table border=0 cellspacing=0 cellpadding=0 style='outline:none;border-style:none;margin:0px;padding:0px;width:400px;border-collapse:collapse;' &gt;                     &lt;tr&gt;                        &lt;td colspan=2 style='outline:none;border-style:none;margin:0px;padding:5px 0px 5px 5px;width:157px;vertical-align:bottom;' &gt;                            &lt;a href="https://iili0a.bay.livefilestore.com/y1mjHmbBH97vAfezEWUa-azr2trh7-O_Gmh_APO5OJHp7TqPSxcplmsEER81RdGrXOt_E4sTug-05u1Gl069x-0_FeBU2W4kD14LcrjFccEgzzacz99roZZyFRWZHFcH51A8ccZpWFsy0L3AdFlTREawg/Horseshoe%20Falls.jpg?psid=1" target="_blank" border="0" style="outline:none;border-style:none;margin:0px;padding:0px;"&gt;                                &lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" alt="View album" title="View album" width="157" height="157" src="http://blog.spencen.com/images/83489-72989/8458907594CB549C0.png" /&gt;&lt;/a&gt;                        &lt;/td&gt;                        &lt;td colspan=3 style='vertical-align:middle;margin:0px;padding:5px 5px 5px 0px;outline:none;border-style:none;width:223px' &gt;                            &lt;div style="margin-left:10px;top:-3%;" &gt;                                &lt;div style='width:223px;overflow:visible;'&gt;&lt;a style="text-decoration:none;" href="https://cid-685d1a7aacddb89c.skydrive.live.com/redir.aspx?page=browse&amp;amp;resid=685D1A7AACDDB89C!611&amp;amp;type=5&amp;amp;authkey=sfrhdYLGyYs%24&amp;amp;Bsrc=Photomail&amp;amp;Bpub=SDX.Photos" target="_blank"&gt;&lt;span  style="line-height:1.26em;padding:0px;width:223px;font-size:26pt;font-family:'Segoe UI', helvetica, arial, sans-serif;"  defaultText="Enter album name here"&gt;Phone Backgrounds&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;                                &lt;div style="padding:10px 0px 0px 0px;margin:0px;"&gt;                                   &lt;table border=0 cellspacing=0 cellpadding=0 style="margin:0px;padding:0px;outline:none;border-style:none;border-collapse:collapse;width:auto;"&gt;                                        &lt;tr&gt;                                            &lt;td style="vertical-align:top;outline:none;border-style:none;margin:0px;padding:10px 15px 6px 0px;"&gt;&lt;a href="https://cid-685d1a7aacddb89c.skydrive.live.com/redir.aspx?page=play&amp;amp;resid=685D1A7AACDDB89C!611&amp;amp;type=5&amp;amp;authkey=sfrhdYLGyYs%24&amp;amp;Bsrc=Photomail&amp;amp;Bpub=SDX.Photos" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;VIEW SLIDE SHOW&lt;/a&gt;&lt;/td&gt;                                            &lt;td style="vertical-align:top;outline:none;border-style:none;margin:0px;padding:10px 0px 6px 0px;"&gt;&lt;a href="https://cid-685d1a7aacddb89c.skydrive.live.com/redir.aspx?page=downloadphotos&amp;amp;resid=685D1A7AACDDB89C!611&amp;amp;type=5&amp;amp;Bsrc=Photomail&amp;amp;Bpub=SDX.Photos&amp;amp;authkey=sfrhdYLGyYs%24" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;DOWNLOAD ALL&lt;/a&gt;&lt;/td&gt;                                        &lt;/tr&gt;                                                                           &lt;/table&gt;                                                                                                     &lt;/div&gt;                                                            &lt;/div&gt;                        &lt;/td&gt;                     &lt;/tr&gt;                    &lt;tr&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 5px;margin:0px;width:76px;height:76px;' &gt;&lt;a href="https://iili0a.bay.livefilestore.com/y1m2iTnftFFC9bFhY81h5gdVhwocpcEdq1xpQvubPbWjSftQMsnkxIi4t_0ozFa0W73Fa6Lwcddm_uSj9t6bDh--ZxhyVUVz74NvA_YrrwLjr2R0zDa3UtXzVmUCHMEdD0y3nvR0wq4nhvt96q_3p6tkQ/Lantern%20in%20Park.jpg?psid=1" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;&lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" width="76" alt="View album" title="View album" height="76" src="http://blog.spencen.com/images/83489-72989/-137348458728FC2226.png" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 0px;margin:0px;width:76px;height:76px;' &gt;&lt;a href="https://iili0a.bay.livefilestore.com/y1m6OELzmHKz40kDThPVSM8oPdYV8GVoTxCM2QYJzJ7R9SDwqA7odueyg-vjxR4fMw14JwdC9gWhUt9wM42edhyHmYMdblNhYmKVwVlpTNREhYKrHGAm5diS_ntH92cOm06TSRuJViQtdbv9w3bzyF2aA/Washington%20Statue.jpg?psid=1" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;&lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" width="76" alt="View album" title="View album" height="76" src="http://blog.spencen.com/images/83489-72989/-106194590441F7F26B.png" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 0px;margin:0px;width:76px;height:76px;' &gt;&lt;a href="https://iili0a.bay.livefilestore.com/y1mb1lruz35eQrsNxMyvmBm41RGC9JXeAkumIjXsNusMryt8fyqPHlcQ-0Krvy_4MwlySUbzeaRqcKtj24Fk1z7wIQ-x5Bb_YHWQzQ1xIGKHS--WM02ew0mEnQSuk13TQwufjJ3wLmol1gGAs87wsqABA/Manhattan%20Bridge.jpg?psid=1" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;&lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" width="76" alt="View album" title="View album" height="76" src="http://blog.spencen.com/images/83489-72989/20262242972D066FF8.png" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 0px;margin:0px;width:76px;height:76px;' &gt;&lt;a href="https://iili0a.bay.livefilestore.com/y1mMgDUYTlh2OtyGSuaxV1_VARLVM-_1eejkuuWs9l5D9P0oEmXmrmHWCoHAjr8NHsqH5fwU9w3y3K0h9f1gBmYfdl05yaOSs1ebfpPeDLwxFKiSHM3_pWqbeYmheRMq_POi-uFg86WFNswleDKK3m6Zg/Capitol.jpg?psid=1" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;&lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" width="76" alt="View album" title="View album" height="76" src="http://blog.spencen.com/images/83489-72989/142024206708E11569.png" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 0px;margin:0px;width:76px;height:76px;' &gt;&lt;a href="https://iili0a.bay.livefilestore.com/y1mtHTw4wzuC1zFsYnN2t7qhsAgz-V4-U71MYRyJWdK4RPG33A9CXcfLbCpcSbjG6nxQHZmM973B2hiWCumVR7pzaeX5X0R0pBpF38xqOkqTIpI5OXJfRLKaJAQZe59QVVl1H5Lzp0BzIp1tktDRUPDHw/City%20Hall.jpg?psid=1" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;&lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" width="76" alt="View album" title="View album" height="76" src="http://blog.spencen.com/images/83489-72989/-205796270973EF92F5.png" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 5px;margin:0px;width:76px;height:76px;' &gt;&lt;a href="https://iili0a.bay.livefilestore.com/y1mGstoUzR9w8ekmjjJt1idB1mPzIsZ50QRD4YDG-muiGWqaO_4jPzApLXCWmBnm5y5ifDS0eq2H2noHZkGr4cbPIk5OQT6u966jYSo6sH54Euq_20q1dw_V8g5aW72XMI0WgYPM9dzZ2MRXk7MD48uqw/Lantern%20in%20Snow.jpg?psid=1" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;&lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" width="76" alt="View album" title="View album" height="76" src="http://blog.spencen.com/images/83489-72989/-18153614310CEB633B.png" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 0px;margin:0px;width:76px;height:76px;' &gt;&lt;a href="https://iili0a.bay.livefilestore.com/y1mXUmuFr8wnA-yZcssx9-mrXbX93pjD0YUyGna4K4C1MOiVM6YI6sAUED5mj9KcyUecXXxLXeak9tD5FMwLtX7M4C540T1Aboh3wRD3G4Vr9IhTTq9pPHftfwrUNFpRfM2IUnnQs9sQrjQ9wtZ_fMOfw/Rockerfeller.jpg?psid=1" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;&lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" width="76" alt="View album" title="View album" height="76" src="http://blog.spencen.com/images/83489-72989/20450340893AD8B5F3.png" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 0px;margin:0px;width:76px;height:76px;' &gt;&lt;a href="https://iili0a.bay.livefilestore.com/y1mpsvXzR8RYfRKer7ZPSZguO3RyOjoYmVb9dowL9pxxDQhjzpWEqlCLnNck1oHWyRp8jXg7XJljrJJC1TRpkB04_6GdaOg45R9mTyiFPoUD4t8uVOLoX37I8SKNqQ2sR58zQWsq3fBsb0poykqBJW5JQ/Snow%20on%20Bench.jpg?psid=1" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;&lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" width="76" alt="View album" title="View album" height="76" src="http://blog.spencen.com/images/83489-72989/127146880153D48638.png" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 0px;margin:0px;width:76px;height:76px;' &gt;&lt;a href="https://iili0a.bay.livefilestore.com/y1ml8nToQE286aOX7UqqfDYbChKbgBTjfKHdumZJDtGYvgbK7b7Ng5XZ_AtYvv9sLvX_Jf7t0t7mY-o_UlqfPw44RQC2pGN4NBrjP8c3_S6y1E03vl789UFc9VcbP9edAehwT4X-IgmA_rjCwoy57tBXA/Grass%20and%20Falls.jpg?psid=1" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;&lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" width="76" alt="View album" title="View album" height="76" src="http://blog.spencen.com/images/83489-72989/11820133286CD0567D.png" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 0px;margin:0px;width:76px;height:76px;' &gt;&lt;a href="https://iili0a.bay.livefilestore.com/y1mycDV4aiWt58rxzzJaAyaiszywLCamrnIZXgasP4bj-e7qpSrnyaHJ4q5qyTS40DC-C2xYPNxtPQVgNQctxoJ5Ctw18kDtvY03E3WXRpeEjdy5bgVKmTmT13jOfM5o9Ywd93BZMZati65taHEaptAGw/Bird.jpg?psid=1" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;&lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" width="76" alt="View album" title="View album" height="76" src="http://blog.spencen.com/images/83489-72989/12998226641ABDA936.png" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 5px;margin:0px;width:76px;height:76px;' &gt;&lt;a href="https://iili0a.bay.livefilestore.com/y1mXUmuFr8wnA_xLQgp74_MknndgWlKu5tBXexhxgHpIs06uSPrBMGr0im2wt851FSlnKeA4mDY4WLkQQ3fisK9oBUtWmG8Q_wlPKw_wW1nPB80IxO75j520tZlj6mxmR_IfpgT2x5SFILysFVYjgCO8A/Statue%20of%20Liberty.jpg?psid=1" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;&lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" width="76" alt="View album" title="View album" height="76" src="http://blog.spencen.com/images/83489-72989/-208280726233B9797B.png" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 0px;margin:0px;width:76px;height:76px;' &gt;&lt;a href="https://iili0a.bay.livefilestore.com/y1mO6vGpFSriRjY-M35cBfh3LI7Qo3Yq73VUDRMK1gpJMvuGbwLQEAMtfenkpyDD4qwRJaNBhUaA_tdJWlPQ3z68LlrqqjYynZ9H27XspQQb6oAXDFq8QP9vVlxWVci8-hjcGpo_RDOkQBxU6aVD4Vshg/Niagara%20Falls.jpg?psid=1" border="0" target="_blank" style="font-family:'Segoe UI', helvetica, arial, sans-serif;font-size:8pt;outline:none;border-style:none;text-decoration: none;padding:0px;margin:0px;"&gt;&lt;img style="outline:none;border-style:none;padding:0px;margin:0px;border:0px;background:none;background-image:none;vertical-align:bottom;" border="0" width="76" alt="View album" title="View album" height="76" src="http://blog.spencen.com/images/83489-72989/-3627116661A6CC33.png" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 0px;margin:0px;width:76px;height:76px;' &gt;&amp;nbsp;&lt;/td&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 0px;margin:0px;width:76px;height:76px;' &gt;&amp;nbsp;&lt;/td&gt;&lt;td style='vertical-align:bottom;outline:none;border-style:none;padding:0px 5px 5px 0px;margin:0px;width:76px;height:76px;' &gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</description><category>Windows Phone</category><category>General</category><comments>http://blog.spencen.com/2011/06/14/wp7-backgrounds.aspx#Comments</comments><guid isPermaLink="false">621de1ce-c2b5-49c8-bb67-96a5da068704</guid><pubDate>Wed, 15 Jun 2011 03:35:20 GMT</pubDate></item><item><title>Windows Phone &amp;lsquo;Reserved Space&amp;rsquo;</title><link>http://blog.spencen.com/2011/04/05/windows-phone-lsquoreserved-spacersquo.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;My Windows Phone is showing that almost half its paltry capacity of 8 GB is consumed by “reserved space and content from other computers”.&lt;/p&gt;  &lt;p&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="Windows Phone - Reserved Space" border="0" alt="Windows Phone - Reserved Space" src="http://blog.spencen.com/images/83489-72989/Windows%20Phone%20-%20Reserved%20Space_3.png" width="601" height="64" /&gt;&lt;/p&gt;  &lt;p&gt;I’ve gone into the Zune desktop software –&amp;gt; Settings/Phone/Reserved Space and set the amount reserved to zero.&lt;/p&gt;  &lt;p&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="Windows Phone - Reserved Space of 0" border="0" alt="Windows Phone - Reserved Space of 0" src="http://blog.spencen.com/images/83489-72989/Windows%20Phone%20-%20Reserved%20Space%20of%200_3.png" width="402" height="184" /&gt;&lt;/p&gt;  &lt;p&gt;So if the 3.36 GB isn’t “reserved” then it must be “content from other computers”. Hmm…. well I’ve never paired the phone with any other computer other than my &lt;a href="http://blog.spencen.com/2010/04/06/new-laptop-ndash-sony-z-series.aspx"&gt;awesome laptop&lt;/a&gt;, so what’s going on? &lt;a href="http://zuneinsider.com/archive/2009/01/31/demystifying-quot-reserved-space-and-content-from-other-computers-if-any-quot.aspx"&gt;This article&lt;/a&gt; strives to explain what could be going on. You might have to read that twice – I know I did.&lt;/p&gt;  &lt;p&gt;I tried the “Erase all content” button. The phone and Zune desktop software both showed zero music, video, pictures and podcasts. This had the following effect:&lt;/p&gt;  &lt;p&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="Windows Phone - Reserved Space with no Media" border="0" alt="Windows Phone - Reserved Space with no Media" src="http://blog.spencen.com/images/83489-72989/Windows%20Phone%20-%20Reserved%20Space%20with%20no%20Media_3.png" width="589" height="51" /&gt;&lt;/p&gt;  &lt;p&gt;I also found a few other links that asked the obvious question – how do I free up this capacity? Plenty of people questioning – but I didn’t find an answer that worked for me.&lt;/p&gt;  &lt;p&gt;&lt;a title="http://answers.microsoft.com/en-us/winphone/forum/wp7-sync/how-to-shrink-reserved-space-or-content-from-other/5d81707a-ee5a-e011-8dfc-68b599b31bf5" href="http://answers.microsoft.com/en-us/winphone/forum/wp7-sync/how-to-shrink-reserved-space-or-content-from-other/5d81707a-ee5a-e011-8dfc-68b599b31bf5"&gt;http://answers.microsoft.com/en-us/winphone/forum/wp7-sync/how-to-shrink-reserved-space-or-content-from-other/5d81707a-ee5a-e011-8dfc-68b599b31bf5&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a title="http://answers.microsoft.com/en-us/zune/forum/music-pc/reserved-space-and-content-from-other-computers/11ba50dc-d8b8-40f7-b0c3-2bd3a4af836c" href="http://answers.microsoft.com/en-us/zune/forum/music-pc/reserved-space-and-content-from-other-computers/11ba50dc-d8b8-40f7-b0c3-2bd3a4af836c"&gt;http://answers.microsoft.com/en-us/zune/forum/music-pc/reserved-space-and-content-from-other-computers/11ba50dc-d8b8-40f7-b0c3-2bd3a4af836c&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a title="http://support.microsoft.com/kb/953593" href="http://support.microsoft.com/kb/953593"&gt;http://support.microsoft.com/kb/953593&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a title="http://forum.xda-developers.com/archive/index.php/t-904321.html" href="http://forum.xda-developers.com/archive/index.php/t-904321.html"&gt;http://forum.xda-developers.com/archive/index.php/t-904321.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;The last link offers some hope. It suggests that the number may actually be &lt;strong&gt;nothing whatsoever&lt;/strong&gt; to do with “content from other computers” or “reserved space”. Its actually space used by the installed applications and games. Of course this now seems perfectly obvious. Not only is there the cost of installing the applications – but also the data that each keeps locally – for instance the mail boxes, map cache, saved games etc. What’s strange though is how much this allocated capacity seems to fluctuate. I tried uninstalling some apps, deleting the mapping history and removing one of my outlook mail boxes. That reduced the number a fraction – down to 2.6 GB.&lt;/p&gt;  &lt;p&gt;It would be great to be able to get more insight into what has that space allocated. Aside from resetting the phone (removing all apps) I’m not too sure where to go from here. Suggestions anyone? [Oh – and I’ve already tried installing a 32 GB memory card – that didn’t end well either].&lt;/p&gt;</description><category>Windows Phone</category><category>General</category><comments>http://blog.spencen.com/2011/04/05/windows-phone-lsquoreserved-spacersquo.aspx#Comments</comments><guid isPermaLink="false">83bef1fc-dead-455b-aff8-029e10524a99</guid><pubDate>Wed, 06 Apr 2011 02:02:51 GMT</pubDate></item><item><title>Smugmug API</title><link>http://blog.spencen.com/2011/03/20/smugmug-api.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;a href="http://www.smugmug.com/"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Smugmug Logo Small" border="0" alt="Smugmug Logo Small" align="right" src="http://blog.spencen.com/images/83489-72989/Smugmug%20Logo%20Small_1.png" width="127" height="37"&gt;&lt;/a&gt;My photo sharing site of choice is &lt;a href="http://www.smugmug.com"&gt;Smugmug&lt;/a&gt;. I can upload and view images at their original size, they offer effectively unlimited storage, support video streaming, protected sharing facilities and the website doesn’t suck. It comes with a price tag but I’m fine with that.&lt;/p&gt; &lt;p&gt;Over the last six months I’ve been playing with the Smugmug API. To date its been a somewhat painful experience. Roughly three months ago they introduced an additional security measure that meant most of the API calls required an additional parameter – which wasn’t documented on the &lt;a href="http://wiki.smugmug.net/display/API/API+1.2.2"&gt;API wiki&lt;/a&gt; (the _su cookie).&lt;/p&gt; &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/RestSharp%20Logo.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 10px 0px; padding-left: 0px; padding-right: 0px; display: inline; float: left; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="RestSharp Logo" border="0" alt="RestSharp Logo" align="left" src="http://blog.spencen.com/images/83489-72989/RestSharp%20Logo_thumb.png" width="240" height="75"&gt;&lt;/a&gt;There are a number of helper wrappers already written for the API (though some are out of date) – but I figured it would be a good learning experience to put together something small for my own requirements. I decided on using the REST flavour of the API and initially implemented it with WebClient. However, after following up on a tip I got from attending the &lt;a href="http://nypug.groups.live.com/"&gt;New York Windows Phone User Group&lt;/a&gt; I switched to &lt;a href="http://restsharp.org/"&gt;RestSharp&lt;/a&gt; (using VS NuGet package installer) which made the code much more concise.&lt;/p&gt; &lt;p&gt;My most recent attempt was to add a feature to the application I’m writing that would allow me to view statistics for my Smugmug galleries. The website offers access to these statistics but in a pretty limited fashion. Having found an API (&lt;a href="http://wiki.smugmug.net/display/API/show+1.2.2?method=smugmug.albums.getStats"&gt;method.albums.getStats&lt;/a&gt;) I figured I could create a stats summary that was exactly was I was after. After several frustrating hours of tweaking the API call and getting nothing but zero hit counters back I resorted to Google. Sure enough – it seems that the API method &lt;a href="http://www.dgrin.com/showthread.php?t=169830"&gt;doesn’t work&lt;/a&gt;, and in fact has been broken for months. Would be nice to have that kind of information on the API Wiki page, no?&lt;/p&gt;</description><category>Development</category><category>.NET</category><comments>http://blog.spencen.com/2011/03/20/smugmug-api.aspx#Comments</comments><guid isPermaLink="false">cc804c5b-26ac-4f93-bc7d-fd3646f0fef6</guid><pubDate>Mon, 21 Mar 2011 01:19:55 GMT</pubDate></item><item><title>Silverlight Firestarter 2010</title><link>http://blog.spencen.com/2010/12/06/silverlight-firestarter-2010.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Silverlight%20Firestarter%202010%20Banner_2.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Silverlight Firestarter 2010 Banner" border="0" alt="Silverlight Firestarter 2010 Banner" src="http://blog.spencen.com/images/83489-72989/Silverlight%20Firestarter%202010%20Banner_thumb.png" width="640" height="83" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Spawned from a &lt;a href="http://team.silverlight.net/announcement/pdc-and-silverlight/"&gt;communication at the recent PDC&lt;/a&gt; that was then somehow twisted and blown well out of proportion by the blogosphere, Microsoft recently held a Silverlight Firestarter event on campus in Redmond (and streamed live). The “main event” was the keynote which was primarily dedicated to talking about the future of Silverlight, and specifically show casing Silverlight 5.&lt;/p&gt;  &lt;h3&gt;What was announced&lt;/h3&gt;  &lt;p&gt;The current feature set of Silverlight 5 is impressive – see &lt;a href="http://weblogs.asp.net/scottgu/archive/2010/12/02/announcing-silverlight-5.aspx"&gt;Scott Gu’s blog post&lt;/a&gt; for a comprehensive overview, the &lt;a href="http://www.microsoft.com/silverlight/future/"&gt;official futures page&lt;/a&gt;, or better yet go watch the keynote &lt;a href="http://www.silverlight.net/news/events/firestarter/"&gt;here&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Here’s what I’m looking forward to the most:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Implicit DataTemplates. How do Silverlight developers survive without this!? &lt;/li&gt;    &lt;li&gt;AncestorType support for RelativeSource binding. &lt;/li&gt;    &lt;li&gt;Data binding debugging. This looks awesome and could be a real time saver. Simply place a breakpoint on the binding declared in the XAML. When the debugger stops it gives you full access to the Target and binding results or error. This surely has to make it into WPF in an upcoming Visual Studio service pack, or at the very least vNext. &lt;/li&gt;    &lt;li&gt;For shear, jaw dropping visual effect the 3D medical modelling and globe demos were spectacular. Though it was a very quick portion of the demo the 3D globe – with separate land and cloud layers looked great. I hope this is the future for Bing maps now that they’ve scrapped the 3D plug-in version. &lt;/li&gt;    &lt;li&gt;BI with &lt;a href="http://team.silverlight.net/announcement/project-crescent/"&gt;Project Crescent&lt;/a&gt;. So this offering was shown at the recent PASS 2010 Summit and its seriously cool. &lt;/li&gt; &lt;/ul&gt;  &lt;h3&gt;Timing&lt;/h3&gt;  &lt;p&gt;The problem of course is that the release date for Silverlight 5 isn’t until late 2011 – effectively a year away. Its understandable that Microsoft hadn’t originally planned on showing off Silverlight 5 until they were closer to the release – probably at the time the first beta (scheduled for Spring 2011). It seems they felt that their hand was forced by the recent “Silverlight is dead” debacle. What I saw demoed was certainly impressive but it really makes me crave those features now – and makes Silverlight 4 seem more incomplete as a result. It isn’t helped that Silverlight for Windows Phone is currently not even at Silverlight 4 level. So for now I get to develop on Silverlight 3.5 and 4.0 whilst eagerly awaiting the promise that is Silverlight 5. &lt;/p&gt;  &lt;p&gt;Of course any serious development I do is in WPF – ‘cause lets face it – browser dependent apps are just toys right?&lt;/p&gt;  &lt;h3&gt;Intro Sessions for Silverlight&lt;/h3&gt;  &lt;p&gt;The rest of the Firestarter event was devoted to standard presentation sessions. It started with a Silverlight Binding 101 session given by Jesse Liberty. This should have been dull, but Jesse was very entertaining. If you’re very new to the Silverlight scene I strongly recommend his session as an introduction. John Papa also did a very good introduction to MVVM session.&lt;/p&gt;  &lt;p&gt;Each session gradually increased in terms of depth of coverage. The last session by Jamie Rodriguez was a fast and furious dive into potential performance issues when developing for Windows Phone 7. It covered many pragmatic tips and tricks on monitoring and resolving these issues. Despite having seen much of this content previously presented by Jamie on Channel 9 I still found it to be a great session.&lt;/p&gt;  &lt;h3&gt;The Venue&lt;/h3&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Microsoft%20Campus%20Sign_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px" title="Microsoft Campus Sign" border="0" alt="Microsoft Campus Sign" align="right" src="http://blog.spencen.com/images/83489-72989/Microsoft%20Campus%20Sign_thumb.jpg" width="244" height="184" /&gt;&lt;/a&gt;This was my first trip to Seattle and unfortunately I was on a very tight schedule. I arrived very early Thursday morning and left the same night (with 6 hours of flight time either side). I caught the local bus from my hotel in Bellevue to the campus and the area looked very suburban, yet very beautiful too (certainly compared to the concrete jungle that is Manhattan). I also had a detour through downtown Seattle on the way back to the airport in a taxi I was sharing. I was impressed with the city, though I’m told the real test as to whether you could live in Seattle is being able to live through your first winter there.&lt;/p&gt;  &lt;p&gt;The event was held in Building 33 at the Conference Center. The room used to host the keynote and the developer sessions was a lecture theatre layout. This was awesome ‘cause it meant everyone could have their laptops set up the entire day, plugged in to power, recharging phones etc. I think about one third of the attendees at the keynote were Microsoft employees from teams other than the Silverlight team.&lt;/p&gt;  &lt;h3&gt;Is Silverlight Resuscitated?&lt;/h3&gt;  &lt;p&gt;So will this Firestarter event satisfy the seemingly fickle Silverlight development community? Will they be prepared to wait more that 12 months between versions (shock, gasp)! I heard someone in the audience complain that there wasn’t enough Windows Phone content – which was kind of amusing. Too much focus on Windows Phone would have probably been exactly the wrong message to send to the community.&lt;/p&gt;  &lt;p&gt;So where does this leave WPF? No mention in the PDC keynote, no separate Firestarter event – is WPF dead!? Bring on WPF Firestarter 2011 &lt;img style="border-bottom-style: none; border-right-style: none; border-top-style: none; border-left-style: none" class="wlEmoticon wlEmoticon-smilewithtongueout" alt="Smile with tongue out" src="http://blog.spencen.com/images/83489-72989/wlEmoticon-smilewithtongueout_2.png" /&gt;&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>Lab49</category><comments>http://blog.spencen.com/2010/12/06/silverlight-firestarter-2010.aspx#Comments</comments><guid isPermaLink="false">ac7b0d59-929d-412d-b868-c1aadba7f883</guid><pubDate>Mon, 06 Dec 2010 05:05:04 GMT</pubDate></item><item><title>Windows Phone 7 Launch</title><link>http://blog.spencen.com/2010/11/09/windows-phone-7-launch.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Today I finally purchase a Windows Phone 7 device. I choose the Samsung Focus on an AT&amp;amp;T plan. &lt;/p&gt;  &lt;p&gt;&lt;strong&gt;The Purchase&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;First – I took the day off work. That may sound a little extreme – and certainly wasn’t my original intention. The day off work was actually due to a culmination of &lt;em&gt;things&lt;/em&gt;*.&lt;/p&gt;  &lt;p&gt;I got to the store just a fraction after early opening time at 8am. I saw a line of people queued up at the counter and walked inside ready to join the end of the queue. Instead I was pounced on by about three sales staff. [The line of people turned out to be there to grab the free Katy Perry tickets as part of the launch event promotions.]&lt;/p&gt;  &lt;p&gt;I was in the store for about 20 minutes and during that time I was the only customer purchasing a Windows Phone (or any phone for that matter). It wasn’t a small store in some out of the way town either – this was a fairly large store on Madison Ave, midtown Manhattan. There were no free Xbox 360s either, just some Katy Perry tickets which apparently anyone could grab – no purchase required. AT&amp;amp;T were selling the phone on its ludicrously priced plan – around $80 per month for 450 minutes and 2Gb data.&lt;/p&gt;  &lt;p&gt;I asked the salesman to install a 32Gb micro SD card to boost the memory from 8Gb to 40Gb. He was helpful enough to insert the card for me, but not knowledgeable enough to know that this requires a phone reset.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;The Hardware&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;The Samsung Focus is quite a nice piece of hardware. It’s very light and thin – which I like, and the 4 inch screen means that its quite a big device – in my opinion its too big. The finish is better than I was expecting given that its a predominantly plastic body. It isn’t as sexy (or effeminate) as an iPhone 4 – but its better looking that a lot of the other smartphone devices out there.&lt;/p&gt;  &lt;p&gt;The super AMOLED screen lives up to the hype – it is very beautiful – especially the blacks which blend perfectly into the black frame.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Windows%20Phone%20Samsung%20Focus%20registered%20in%20Zune.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows Phone Samsung Focus registered in Zune" border="0" alt="Windows Phone Samsung Focus registered in Zune" align="right" src="http://blog.spencen.com/images/83489-72989/Windows%20Phone%20Samsung%20Focus%20registered%20in%20Zune_thumb.png" width="253" height="310" /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;What’s working&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Exchange, Windows Live and POP accounts syncing and merging. The Calendar merging is great. I’m very fortunate in that I’m not really a calendar power user so I only have one calendar in exchange and one in Live that I really use a lot – the merging works well. Email setup was very easy – as easy as the Blackberry in fact. I’m still coming to terms with not having a unified Inbox – I’ll have to wait and see how that works out.&lt;/p&gt;  &lt;p&gt;Games – not really my highest priority but the AT&amp;amp;T bundled Ilomilo was a real hit with the kids. I downloaded the Harvest demo and the graphics are certainly quite impressive.&lt;/p&gt;  &lt;p&gt;Picked up some basic free apps (mostly from Microsoft) and even purchased a NYC subway application ($0.99) that looks promising (but haven’t really tried it out yet).&lt;/p&gt;  &lt;p&gt;Bing map application works great on Wi-Fi but was too slow on 3G. That’s no different to the experience I’ve had with Google maps though on other phones – and says more about the network than the platform/app.&lt;/p&gt;  &lt;p&gt;Once I got everything synced with my PC the Zune software worked nicely. I’ve been looking forward to streaming media on the go – in addition to just having my podcasts etc. synced wirelessly.&lt;/p&gt;  &lt;p&gt;Marketplace client is much improved on the Windows Mobile 6.5 version. Browsing is now actually quite a pleasant experience. The only thing that I’d like to see is some way to launch an application from the store. It’s annoying that you can download and install a small app almost immediately – but in order to run it you have to exit out of the Marketplace back to the start screen and find the newly installed application in a long list. [Maybe I’ve missed something here?]&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;What’s not working&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;How do I view or upload to Smugmug? I’ve got 10Gb+ worth of photos sitting in Smugmug galleries. I linked my Live ID to Smugmug a few months back but haven’t been able to figure out how this achieves anything. I was hoping that it just meant the Live web-site and Messenger were just behind the times, but it doesn’t seem that Windows Phone makes any use of this association either. I’d love to know how this is supposed to work – I’m being optimistic and just hoping that I’ve missed some simple setting somewhere. I need access to my photos - please!&lt;/p&gt;  &lt;p&gt;There were heaps of little things that didn’t work. Facebook integration gave me an “Oops” message with a “try again later”. At least three of the hyperlinks took me to a “Sorry can’t find that page” – these were Microsoft and AT&amp;amp;T links. Some things didn’t work how I expected because I spent the first hour or so playing with the phone in a coffee shop prior to connecting it to my computer. So when I signed into Zune using my Live ID (with Zune subscription) I couldn’t play any non-purchased music. I understand that the device has to be linked to my account but why can’t that be done from the phone itself?&lt;/p&gt;  &lt;p&gt;The on-screen keyboard is horrible. Don’t get me wrong – I’ve never really used a finger based on-screen keyboard before, so I’m not suggesting its any worse than the competition. I’m forever hitting the wrong letter and the auto-correct only seems to be available in some scenarios – certainly not for users names and passwords which I did a lot of in the initial setup. I also couldn’t figure out how to position the cursor within a word – it would always either highlight the entire word or move just before or after. Makes me wish for a stylus – I could be much quicker and more accurate (and I find its also a lot more comfortable). Anyway – guess I got to move with the times {sigh}…&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Development&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;At first I just connected my phone, fired up Visual Studio changed the deployment target to &lt;em&gt;Windows Phone 7 Device &lt;/em&gt;and pressed F5. This generated a deployment error – something about developer unlock required. The embedded URL (which I had to manually retype into the browser) wasn’t much help…&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Windows%20Phone%20App%20Hub%20Page%20Not%20Found.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows Phone App Hub Page Not Found" border="0" alt="Windows Phone App Hub Page Not Found" src="http://blog.spencen.com/images/83489-72989/Windows%20Phone%20App%20Hub%20Page%20Not%20Found_thumb.png" width="683" height="111" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Doing a Bing search on the app hub didn’t get me anywhere either. I quickly resorted to googling for the answer and came across this blog post…&lt;/p&gt;  &lt;p&gt;&lt;a title="http://www.istartedsomething.com/20100611/windows-phone-7-developer-phone-unlock-detailed/" href="http://www.istartedsomething.com/20100611/windows-phone-7-developer-phone-unlock-detailed/"&gt;http://www.istartedsomething.com/20100611/windows-phone-7-developer-phone-unlock-detailed/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Windows%20Phone%20Developer%20Device%20Registration.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows Phone Developer Device Registration" border="0" alt="Windows Phone Developer Device Registration" src="http://blog.spencen.com/images/83489-72989/Windows%20Phone%20Developer%20Device%20Registration_thumb.png" width="496" height="421" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Once that was done, I hit F5 again and hey presto &lt;em&gt;Word Puzzle&lt;/em&gt; is deployed to my phone. Nice!&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;First Impressions&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Based on what I saw of the “launch” I’m not sure how well the devices are selling, nor how effective the marketing has been. I keep reading posts about low supply due to high demand which I find hard to fathom. My main priority was to get a device that I could easily write applications for, that had a decent media player and could keep me connected via e-mail and popular social networks. From that perspective I think the phone’s going to suffice. It also means I can get rid of my company Blackberry which is a semi-functional (it does e-mail OK but that’s about it) and truly un-inspiring device. &lt;/p&gt;  &lt;hr /&gt;  &lt;p&gt;* Those &lt;em&gt;things&lt;/em&gt; that led to me taking a day off included:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Finding out my company adheres to a barbaric but seemingly fairly common policy of not allowing staff to rollover annual leave from one year to the next (As the Windows Phone 7 adverts would say – &lt;em&gt;Really?&lt;/em&gt;).&lt;/li&gt;    &lt;li&gt;Having worked so many hours in the last few months that my hourly wage is roughly on par with what I used to earn delivering pizzas when I was 18 (OK – slight exaggeration). The main cause of working all these hours of course is that the work has just been so awesome. Having just pumped out a kick-ass version 1 release the product owner decided we should each get a day off this iteration to ‘recharge’.&lt;/li&gt;    &lt;li&gt;A bunch of odd-jobs that I’ve been putting aside finally needed some attention. Tedious stuff like buying new work clothes, getting a hair cut, landlord duties.&lt;/li&gt; &lt;/ul&gt;</description><category>Windows Phone</category><category>General</category><comments>http://blog.spencen.com/2010/11/09/windows-phone-7-launch.aspx#Comments</comments><guid isPermaLink="false">09e75b7d-342a-48c2-aaba-c1936b8a0149</guid><pubDate>Tue, 09 Nov 2010 06:24:08 GMT</pubDate></item><item><title>Windows Phone 7 Trivia</title><link>http://blog.spencen.com/2010/10/22/windows-phone-7-trivia.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;OK – so yesterday I had a bit of a rant. Today I figure I’ll make up for it by sharing a few quick pieces of Windows Phone 7 trivia that I’ve learned over the last couple of days.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Limited number of developer apps deployed to a device&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;As a developer you can only have up to 10 of your own apps (deployed via Visual Studio) on your device. Of course you can uninstall some to make room to install others – but no more than 10 at a time. Probably not an issue for most people but a little quirky nonetheless.[I haven’t been able to confirm this myself].&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;No video out capabilities&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;The OS comes with a pretty neat version of PowerPoint. It lets you playback your PowerPoint slide deck and whilst you can’t create decks from scratch there is limited edit capability for last minute changes. So how cool is this – you sync your slide deck with your phone (say via SkyDrive) walk into your next meeting. Rather than having to lug a laptop around with you its simply a matter of taking out your phone and plugging it into the projector. Or at least it would be… if any of the hardware devices supported video out in this fashion. This really makes me wonder how useful having PowerPoint on the phone is without this feature? [Sure there is PowerPoint streaming etc. but what’s wrong with just plugging the phone into a projector/TV – e.g. via mini HDMI].&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Buying a phone&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: left; border-top: 0px; border-right: 0px; padding-top: 0px" title="Telstra HTC Mozart" border="0" alt="Telstra HTC Mozart" align="left" src="http://blog.spencen.com/images/83489-72989/Telstra%20HTC%20Mozart_1.png" width="131" height="282" /&gt;Of all the retail package/plans I’ve seen to this point Australia’s Telstra seems to have the sweetest deal. They are doing the HTC Mozart for $0 up front on a $49 per month plan that includes generous call/sms caps plus 500Mb of data. So all up that’s AU$1176 for two years of Windows Phone goodness. (The Aussie dollar is currently a fraction under the US dollar). Telstra have plenty of flaws (there billing website is the worst of any I’ve had to use) but there network is 4G in all major Australian cities and is by far the best network in that country.&lt;/p&gt;  &lt;p&gt;&lt;a title="http://www.telstra.com.au/mobile/phones/windows7/index.html?ti=TR:TR:Oct10:htcmozart:TCOMindex:325x200" href="http://www.telstra.com.au/mobile/phones/windows7/index.html?ti=TR:TR:Oct10:htcmozart:TCOMindex:325x200"&gt;http://www.telstra.com.au/mobile/phones/windows7/index.html?ti=TR:TR:Oct10:htcmozart:TCOMindex:325x200&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;There is currently no official word on US pricing other than both AT&amp;amp;T and T-Mobile want to slug you $199 up front. Given the current US phone plan prices and the ridiculous cost of the iPhone I don’t expect to be getting anywhere near such a good deal as with Telstra.&lt;/p&gt;  &lt;p&gt;&lt;a title="http://htc.t-mobile.com/hd7/" href="http://htc.t-mobile.com/hd7/"&gt;http://htc.t-mobile.com/hd7/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a title="http://www.att.com/shop/wireless/devices/windowsphone.jsp#fbid=8IXHCXcT8z7" href="http://www.att.com/shop/wireless/devices/windowsphone.jsp#fbid=8IXHCXcT8z7"&gt;http://www.att.com/shop/wireless/devices/windowsphone.jsp#fbid=8IXHCXcT8z7&lt;/a&gt;&lt;/p&gt;</description><category>Windows Phone</category><category>General</category><comments>http://blog.spencen.com/2010/10/22/windows-phone-7-trivia.aspx#Comments</comments><guid isPermaLink="false">bdd15a17-a20c-4b12-a302-4cdabf311fc4</guid><pubDate>Sat, 23 Oct 2010 03:24:48 GMT</pubDate></item><item><title>Charles Petzold at the NYC .NET Developers Group</title><link>http://blog.spencen.com/2010/10/21/charles-petzold-at-the-nyc-net-developers-group.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Tonight I went along to the New York City .NET User Group to watch Charles Petzold presenting on Windows Phone 7. It was fun to see Petzold in person and though its obvious he’s more an author than a public speaker he still did a great job. He was very well prepared for the talk and did his best to accommodate the somewhat rowdy crowd. The talk was an introduction to the Windows Phone 7 development experience with a focus on the application lifecycle – specifically tombstoning. This seemed to be at the right level for the crowed as far as I could tell – it seemed the majority of people there knew very little about the new platform.&lt;/p&gt;  &lt;p&gt;I’d never been to a NYC .NET Developers Group meeting before. There was a pretty good turnout, well over a hundred people. For me though the event was certainly tarnished by the general lack of organization and some inane questions/observations from the audience.&lt;/p&gt;  &lt;p&gt;Firstly the pizzas. Charles did a very polished job of starting his talk with a reflection on how mobile devices have become ubiquitous. He then manoeuvred this into an introduction of Windows Phone 7. He had his talk prepared on a set of notes which he would keep glancing at, but I began not to notice that as I was drawn into the talk. At about 10 minutes in just as he has found his stride and captured the audience the pizzas arrived. Some people didn’t even wait for Charles to stop speaking, they just got up and went to the back of the room to help themselves. Eventually one of the organizers walked up the front and cut Charles off mid-sentence – suggesting now would be a good time for a break. I think his response was something like “ah… err… yeah ok”.&lt;/p&gt;  &lt;p&gt;Then there were the questions from the audience. A few people asked questions during the talk. In my mind it wasn’t really appropriate given the size of the audience and the style of presentation – more of a keynote. However, Charles hadn’t asked people to leave questions to the end and I understand that people are probably used to asking questions during a user group presentation. What was really annoying though were some of the questions themselves. Interrupting someone to ask them whether xyz is supported when it should have been clear he was just about to get to that. At the end of the session one guy from the audience went on a completely misinformed rave about the price of phones (including the prices in Pakistan!) , another was asking what video formats were supported, etc. These questions couldn’t be answered by Charles and the organizers (or Microsoft) hadn’t thought to have someone up front with him to answer them. Charles managed to stay very well composed throughout.&lt;/p&gt;  &lt;p&gt;One more amusing crowd moment was during the impromptu pizza break. Charles was patiently waiting for us all so a few attendees quite understandably took the opportunity to get a book signed, introduce themselves or ask some questions about the phone or his upcoming book. Charles was actually using his Windows Phone 7 device to run the PowerPoint presentation for his talk. He had the device setup at the front on a stand with a video camera so it could be projected onto the screens. So he’s standing there talking to a few people with the phone next to him on the stand at the current PowerPoint slide. One guy walks up and asks if he can play with the phone. “What now? Err.. . no.”. I’m sure the guy was just eager to get his hands on a real device but imagine someone asking you if they can play with your laptop half way through giving a well scripted talk/demo to a packed room of people? Seriously? Oh well… I got a chuckle out of it.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>Windows Phone</category><comments>http://blog.spencen.com/2010/10/21/charles-petzold-at-the-nyc-net-developers-group.aspx#Comments</comments><guid isPermaLink="false">fe15492b-3ec2-41e9-b933-3a50c1cebce0</guid><pubDate>Fri, 22 Oct 2010 02:52:56 GMT</pubDate></item><item><title>Free Windows Phone!</title><link>http://blog.spencen.com/2010/10/01/free-windows-phone.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;There has to be some benefits to living in the US right? Some incentive. I mean the economy is crumbling, &lt;a href="http://www.youtube.com/watch?v=TzV9K90-fx4"&gt;tornados&lt;/a&gt; and &lt;a href="http://online.wsj.com/article/SB10001424052748704029304575526293977082862.html"&gt;tropical storms&lt;/a&gt; seem to be a weekly occurrence – where is the “up” side?&lt;/p&gt;  &lt;p&gt;Well, of course it means you’re eligible for all those competitions that apply to US residents only. Like a &lt;a href="http://www.hanselman.com/blog/WINAFREEPhoneWithLikeNOEffortAndAttendTheWindowsPhone7DeveloperLaunch.aspx?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+ScottHanselman+%28Scott+Hanselman+-+ComputerZen.com%29"&gt;Windows Phone 7 giveaway&lt;/a&gt; courtesy of Scott Hanselman.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.msdnevents.com/wp7devlaunch/"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="wp7_signature_banner_lg" border="0" alt="wp7_signature_banner_lg" src="http://blog.spencen.com/images/83489-72989/wp7_signature_banner_lg_3.jpg" width="352" height="42" /&gt;&lt;/a&gt;&lt;/p&gt;</description><category>Windows Phone</category><category>General</category><comments>http://blog.spencen.com/2010/10/01/free-windows-phone.aspx#Comments</comments><guid isPermaLink="false">38a16064-87bc-4922-9d14-df75003de215</guid><pubDate>Sat, 02 Oct 2010 02:03:23 GMT</pubDate></item><item><title>Word Puzzle to Sliverlight Phone&amp;ndash;Part 3</title><link>http://blog.spencen.com/2010/09/04/word-puzzle-to-sliverlight-phonendashpart-3.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Last night I dusted off &lt;a href="http://blog.spencen.com/2010/04/26/word-puzzle-to-silverlight-phone-ndash-part-2.aspx"&gt;Word Puzzle&lt;/a&gt; and decided to try out tombstoning in Window Phone 7 – just to see how much of a pain this is really going to be. The first hurdle I had was to convert the existing solution from the Windows Phone CTP to the Beta release. This turned out to be quite a bit harder than I had expected. On the upside I got a pretty good idea of some of the changes that were made – ditching the resource files, using the manifest to nominate the launch window, assembly consolidation etc.&lt;/p&gt;  &lt;p&gt;Once I had eventually gotten it to work with the Beta I decided to create a Settings page so that I could:    &lt;br /&gt;1) test the navigation and     &lt;br /&gt;2) have a simplified state object to persist to the application cache whilst de-activating.&lt;/p&gt;  &lt;p&gt;The settings page looked like this:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/WordPuzzle_Stage3_Settings_2.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="WordPuzzle_Stage3_Settings" border="0" alt="WordPuzzle_Stage3_Settings" src="http://blog.spencen.com/images/83489-72989/WordPuzzle_Stage3_Settings_thumb.png" width="235" height="239" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;It was bound to some of the properties on my pre-existing LetterBoardSetup class, e.g. AllowBackwards, AllowDiagonal, Width, Height.&lt;/p&gt;  &lt;p&gt;I added the following code to my App.xaml.cs file and everything worked just fine.&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;private&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Application_Activated(&lt;span style="color: #0000ff"&gt;object&lt;/span&gt; sender, ActivatedEventArgs e)&lt;br /&gt;{&lt;br /&gt;    var myState = PhoneApplicationService.Current.State;&lt;br /&gt;    settings = myState[&lt;span style="color: #006080"&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;] &lt;span style="color: #0000ff"&gt;as&lt;/span&gt; LetterBoardSetup;&lt;br /&gt;}&lt;br /&gt;&lt;span style="color: #0000ff"&gt;private&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Application_Deactivated(&lt;span style="color: #0000ff"&gt;object&lt;/span&gt; sender, DeactivatedEventArgs e)&lt;br /&gt;{&lt;br /&gt;    var myState = PhoneApplicationService.Current.State;&lt;br /&gt;    myState[&lt;span style="color: #006080"&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;] = settings;&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;When the application de-activates the state is saved, then restored correctly on re-activation. I decided to move on and save off the actual game state. The easiest (laziest) way to save the game state seemed to be to just save off the entire object graph (after all we are talking about a &lt;em&gt;very&lt;/em&gt; trivial game here). Several of my classes had private setters for public properties. No problem I figured – I’ll just use DataContract from System.Runtime.Serialization namespace/assembly. This does all sorts of wonderful things – like allowing private fields to be serialized, creating instances without invoking any constructors and the like. At least I thought that’s how it worked – and on the full .NET framework I would have been right. Through trial and error I determined that the &lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.serialization.datacontractserializer(v=VS.95).aspx#1"&gt;Silverlight version&lt;/a&gt; doesn’t have these capabilities – classes are required to have public setters and getters for properties (yuerk!).&lt;/p&gt;

&lt;p&gt;So – in the mindset of just “getting it done” I went through and opened up my object model – changing private setters to public, making getters do “on-demand” construction for things like collections etc. to make it more serialization friendly.&lt;/p&gt;

&lt;p&gt;Now I have a version of WordPuzzle that runs in the emulator and survives tombstoning with absolutely no data loss. Should I ever want to I also now have a version that could easily allow games to be saved. In fact all that’s really left to do is find a couple of images for the application bar buttons – oh – and actually make the game play itself something slightly more err… exciting.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>Windows Phone</category><comments>http://blog.spencen.com/2010/09/04/word-puzzle-to-sliverlight-phonendashpart-3.aspx#Comments</comments><guid isPermaLink="false">072b95ce-c46f-476b-8a12-e4f578cea895</guid><pubDate>Sun, 05 Sep 2010 02:56:31 GMT</pubDate></item><item><title>Should I buy an iPhone?</title><link>http://blog.spencen.com/2010/06/23/should-i-buy-an-iphone.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I don’t own an iPhone – never have. In fact I’ve never purchased &lt;em&gt;any&lt;/em&gt; Apple product. I get the distinct impression that they are simple not designed for me. They’re for normal people. Even when I think I should buy one of their products just to see what I’m missing out on I can’t bring myself to do it. It would be too embarrassing. I may as well go and but a T-shirt with “Apple Fanboy” written in large letters (though elegant and with just the right amount of whitespace). I even get embarrassed for other people when I see them using Apple products. I feel like I should take them aside and explain to them politely how they’ve been deluded into buying an overpriced, under-performing an ultimately unsatisfying product.&lt;/p&gt;  &lt;p&gt;When I was living down-under Apple products were popular and I occasionally got to work with a developer who was a die-hard Apple fan. It was amusing, the rest of us would snigger at their misguided judgement and their uncanny ability to compare everything with the wonderful nirvana of the Apple Universe.&lt;/p&gt;  &lt;p&gt;Now I live in New York. The Big Apple. I work for a tech company that embraces Apple products. Not just the hippy UX crew either. Even the management, strong willed , hard-core professionals, have Mac books and iPhones littered on their desk next to their Apple branded widescreens. I could be wrong but I believe the standard company issued laptop is a Mac book of some description (probably the big screen one with the ridiculous overheating issue?).&lt;/p&gt;  &lt;p&gt;I’m currently working with a UX designer who comes to meetings with his iPad. Do I scream at him, telling him his ridiculously oversized iPhone is a 10 year old Slate device that lacks the fidelity that a stylus offered? No. Do I laugh when he starts describing how our new app is going to require a PopOver control – much more that just a PopUp? No. When he rounds every sharp angle and removes the right click? No.&lt;/p&gt;  &lt;p&gt;Why not? Because maybe, just maybe the time has come for me to face the music. It’s me. It just must be me.&lt;/p&gt;  &lt;p&gt;So what now… where to from here? So its finally come to this… should I just go and buy an iPhone 4?&lt;/p&gt;  &lt;p&gt;I’d have some reasonable excuses:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;My current US “cell” phone is a Blackberry – highly functional but about as exciting and attractive as a brick &lt;/li&gt;    &lt;li&gt;The iPhone 4 is &lt;a href="http://store.apple.com/us/browse/home/shop_iphone/family/iphone"&gt;only $199 dollars&lt;/a&gt; – the last two phones I purchased cost around $700 each -&amp;#160; so they’re cheap! &lt;/li&gt;    &lt;li&gt;There are lots fun accessories (including an &lt;a href="http://www.mobilefun.co.uk/cat/iPhone-4-Cases.htm "&gt;iPhone 4 case&lt;/a&gt; to protect) that I can buy with the money I saved. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Of course there are also some arguments against:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;New York seems to have the &lt;a href="http://consumerist.com/2009/12/att-customer-service-new-york-city-is-not-ready-for-the-iphone.html"&gt;worst phone coverage&lt;/a&gt; of any major city I’ve been to in recent times (OK I don’t get around much and yes I understand tall buildings and ultra high density population doesn’t help). I’ve tried AT&amp;amp;T and T-Mobile networks and both have frequent drop-outs/interference. I believe they are just introducing 4G networks but currently browsing and live video streaming on the existing 3G network is terrible. I believe the iPhones are fixed to AT&amp;amp;T? &lt;/li&gt;    &lt;li&gt;I can’t write programs for my new iPhone unless I buy an Apple computer. Worse still, I can’t just buy the computer and waste the OS to install Windows 7, I actually have to run OSX. [I’m guessing a bit here]. Now things are getting expensive – and I just don’t think I’m ready for such a big step into this hostile world. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;So should I buy an iPhone 4? Comments welcome – maybe even a free phone accessory giveaway for the most amusing comment?&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;hr /&gt;  &lt;p&gt;&lt;font size="1"&gt;Just for the record, here’s the fine print:&lt;/font&gt;&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;&lt;font size="1"&gt;I’ve used many Apple products – some by choice, some mandated. &lt;/font&gt;&lt;/li&gt;    &lt;li&gt;&lt;font size="1"&gt;I haven’t enjoyed any of these experiences. &lt;/font&gt;&lt;/li&gt;    &lt;li&gt;&lt;font size="1"&gt;I realised this is largely based on my own prejudice that I’ve accumulated over the years from those experiences.&lt;/font&gt; &lt;/li&gt;    &lt;li&gt;&lt;font size="1"&gt;I recognize that the vast majority of Apple product owners consider the experience satisfying as voted by their continued purchases.&lt;/font&gt; &lt;/li&gt; &lt;/ol&gt;</description><category>General</category><comments>http://blog.spencen.com/2010/06/23/should-i-buy-an-iphone.aspx#Comments</comments><guid isPermaLink="false">3b10a790-5050-4fb4-b54a-aa8f3d7b4c9f</guid><pubDate>Thu, 24 Jun 2010 03:33:54 GMT</pubDate></item><item><title>Random thoughts for this week</title><link>http://blog.spencen.com/2010/05/09/random-thoughts-for-this-week.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/DSC00478%20View%20from%20Empire%20State_2.jpg"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; margin: 0px 0px 0px 10px; display: inline; border-top: 0px; border-right: 0px" title="View uptown from 86th floor of Empire State Building" border="0" alt="View uptown from 86th floor of Empire State Building" align="right" src="http://blog.spencen.com/images/83489-72989/DSC00478%20View%20from%20Empire%20State_thumb.jpg" width="244" height="73" /&gt;&lt;/a&gt;I may have found a viable option for &lt;a href="https://www.fotoflot.com"&gt;printing panoramic photos&lt;/a&gt; that links in nicely with my &lt;a href="http://www.smugmug.com/"&gt;SmugMug&lt;/a&gt; account.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.geekbrief.tv/"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" title="Geekbrief_tv" border="0" alt="Geekbrief_tv" align="right" src="http://blog.spencen.com/images/83489-72989/Geekbrief_tv_1.png" width="172" height="62" /&gt;&lt;/a&gt; The internet TV options in Windows Media Center works much better in the States that it ever did for me back in Oz. I quite like &lt;a href="http://www.geekbrief.tv/"&gt;geekbrief&lt;/a&gt; as just one of the many tech gadget shows.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" title="HDR-CX550V" border="0" alt="HDR-CX550V" align="right" src="http://blog.spencen.com/images/83489-72989/HDR-CX550V_3.png" width="197" height="125" /&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" title="DCR-PC100E" border="0" alt="DCR-PC100E" align="left" src="http://blog.spencen.com/images/83489-72989/DCR-PC100E_3.png" width="200" height="150" /&gt;I finally got around to replacing my trusty video camera – a Sony DCR-PC100E purchased back in 1999. It was one of the early Mini DV cameras, packed full of manual options in what was then an incredibly compact body. In fact the camera I’m replacing it with (&lt;a href="http://www.sonystyle.com/webapp/wcs/stores/servlet/ProductDisplay?catalogId=10551&amp;amp;storeId=10151&amp;amp;langId=-1&amp;amp;productId=8198552921666073231"&gt;HDR-CX550V&lt;/a&gt;) is about the same weight and size and has pretty much the same feature set (viewfinder, manual focus, night shot). Of course everything is now HD and records to memory rather than tape which makes all the difference. I guess the main sign of progress though is that the new camera cost me 1/4 of what I paid for the old one.&lt;/p&gt;  &lt;p&gt;Having now had the chance to see an play with one first hand, I’m more convinced than ever that the iPad is an awkward form factor that just doesn’t compete well with the existing alternatives. I almost laughed out loud when I saw a guy trying to play a game on one in a busy subway. Kudos to him for being such a die-hard fan!&lt;/p&gt;  &lt;p&gt;Rob Relyea sparked an &lt;a href="http://blogs.windowsclient.net/rob_relyea/archive/2010/05/06/did-you-debate-using-silverlight-or-wpf-for-a-project.aspx#319960"&gt;interesting discussions on Sliverlight vs WPF&lt;/a&gt; which was fairly relevant to some talks we’ve been having at work recently. I was so impressed by the first commenter’s response – &lt;a href="http://codedreams.blogspot.com/"&gt;Mike Strobel&lt;/a&gt; - that I subscribed to his blog where he also had a very &lt;a href="http://codedreams.blogspot.com/2010/04/windows-phone-7-ux-part-1-usability.html"&gt;interesting take on the Windows Phone 7 UI&lt;/a&gt;. I have to admit I share many of Mike’s misgivings about the new UI.&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2010/05/09/random-thoughts-for-this-week.aspx#Comments</comments><guid isPermaLink="false">d5b90445-b4ed-4cb0-9256-c8dc067b6dd0</guid><pubDate>Mon, 10 May 2010 04:59:11 GMT</pubDate></item><item><title>Preventing a bound TextBox from resetting the caret position</title><link>http://blog.spencen.com/2010/05/05/preventing-a-bound-textbox-from-resetting-the-caret-position.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Someone posed a question on our internal mailing list today at work that reminded me of a problem I’d tackled previously whilst working as a &lt;em&gt;&lt;a href="http://blog.spencen.com/2010/01/28/wrapping-up-a-contract.aspx"&gt;developer of fortune&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;  &lt;p&gt;Here’s the challenge. A TextBox is bound to a data value that is being constantly updated. In my scenario the TextBox was bound to a data feed coming from a serial port connected weigh bridge. Even though the value is being automatically updated the operator has the ability to override the value with their own – at which point it would normally cease being updated by the data service.&lt;/p&gt;  &lt;p&gt;Sounds fairly straight-forward. The main problem is that every time the TextBox value is updated via data-binding the selection text and position of the caret is reset. This is particularly annoying if the operator positions the caret about to make their change and a fraction of a second before they press a key the caret moves to the left edge.&lt;/p&gt;  &lt;p&gt;I can’t remember exactly how we solved this problem in my earlier engagement (Raaj if you’re listening you could jog my memory) but here was my quick re-attempt.&lt;/p&gt;  &lt;p&gt;First I’ll set the scene with a mock environment.&lt;/p&gt;  &lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;partial&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; MainWindow : Window
{
    &lt;span class="kwrd"&gt;private&lt;/span&gt; ViewModel viewModel;
    &lt;span class="kwrd"&gt;private&lt;/span&gt; DispatcherTimer timer;

    &lt;span class="kwrd"&gt;public&lt;/span&gt; MainWindow()
    {
        InitializeComponent();

        &lt;span class="kwrd"&gt;this&lt;/span&gt;.viewModel = &lt;span class="kwrd"&gt;new&lt;/span&gt; ViewModel();
        &lt;span class="kwrd"&gt;this&lt;/span&gt;.DataContext = viewModel;

        &lt;span class="kwrd"&gt;this&lt;/span&gt;.timer = &lt;span class="kwrd"&gt;new&lt;/span&gt; DispatcherTimer(&lt;br /&gt;            &lt;span class="kwrd"&gt;new&lt;/span&gt; TimeSpan(0, 0, 1), &lt;br /&gt;            DispatcherPriority.Background, &lt;br /&gt;            UpdateValue, &lt;br /&gt;            &lt;span class="kwrd"&gt;this&lt;/span&gt;.Dispatcher);
    }

    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; UpdateValue(&lt;span class="kwrd"&gt;object&lt;/span&gt; sender, EventArgs e)
    {
        &lt;span class="kwrd"&gt;this&lt;/span&gt;.viewModel.Value += 0.01;
    }
}&lt;/pre&gt;
&lt;style type="text/css"&gt;






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: verdana, consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;This sets up a simple form whose DataContext refers to a ViewModel with a Value property. The Value property is updated every second by a thread safe timer.&lt;/p&gt;

&lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Window&lt;/span&gt; &lt;span class="attr"&gt;x:Class&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;TextBoxOverlay.MainWindow&amp;quot;&lt;/span&gt;
        &lt;span class="attr"&gt;xmlns&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;&lt;/span&gt;
        &lt;span class="attr"&gt;xmlns:x&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;&lt;/span&gt;
        &lt;span class="attr"&gt;Title&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;MainWindow&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Height&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;350&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Width&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;525&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;StackPanel&lt;/span&gt; &lt;span class="attr"&gt;Width&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;150&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;TextBox&lt;/span&gt; 
                &lt;span class="attr"&gt;Text&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Value,StringFormat=0.00,UpdateSourceTrigger=PropertyChanged}&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;StackPanel&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Window&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;The XAML simple binds a TextBox to the Value property. Running this sample and the problem can be immediately realised. Attempting to edit the value in the TextBox using the keyboard is extremely frustrating. The caret won’t go where you want it to.&lt;/p&gt;

&lt;p&gt;So – the next step is to create a TextBlock that overlays the TextBox and instead bind this to the Value property. We set the IsHitTestVisible property on this TextBlock to False so that the user can still interact with the TextBox underneath. Then – and this is where things get a little sneaky – we make the TextBox’s text transparent. This allows us the strange freedom to interact with the TextBox’s content by selecting it and moving the caret – and because we can see the same text in the overlaid TextBlock things appear as normal.&lt;/p&gt;

&lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Window&lt;/span&gt; &lt;span class="attr"&gt;x:Class&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;TextBoxOverlay.MainWindow&amp;quot;&lt;/span&gt;
        &lt;span class="attr"&gt;xmlns&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;&lt;/span&gt;
        &lt;span class="attr"&gt;xmlns:x&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;&lt;/span&gt;
        &lt;span class="attr"&gt;Title&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;MainWindow&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Height&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;350&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Width&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;525&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;StackPanel&lt;/span&gt; &lt;span class="attr"&gt;Width&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;150&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;TextBox&lt;/span&gt; 
                    &lt;span class="attr"&gt;Text&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding ModifiedValue,StringFormat=0.00,&lt;br /&gt;                                   UpdateSourceTrigger=PropertyChanged}&amp;quot;&lt;/span&gt;
                    &lt;span class="attr"&gt;PreviewTextInput&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;TextBoxPreviewTextInput&amp;quot;&lt;/span&gt;
                    &lt;span class="attr"&gt;Foreground&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Transparent&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;TextBlock&lt;/span&gt; 
                    &lt;span class="attr"&gt;IsHitTestVisible&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;False&amp;quot;&lt;/span&gt;
                    &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;5,0&amp;quot;&lt;/span&gt;
                    &lt;span class="attr"&gt;Text&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Value,StringFormat=0.00}&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;StackPanel&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Window&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;You can see from the XAML that the TextBox is bound to a new field on our ViewModel called ModifiedValue. We also hook up to the PreviewTextInput event. We could have used an attached behaviour here rather than resorting to code-behind – but I wanted to keep things simple. So the code behind on the form has:&lt;/p&gt;

&lt;pre class="csharpcode"&gt;        &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; TextBoxPreviewTextInput(&lt;span class="kwrd"&gt;object&lt;/span&gt; sender, TextCompositionEventArgs e)
        {
            var textBox = sender &lt;span class="kwrd"&gt;as&lt;/span&gt; TextBox;
            var selectionStart = textBox.SelectionStart;
            var selectionLength = textBox.SelectionLength;
            var caretIndex = textBox.CaretIndex;

            &lt;span class="kwrd"&gt;this&lt;/span&gt;.viewModel.ModifiedValue = &lt;span class="kwrd"&gt;this&lt;/span&gt;.viewModel.Value;
            
            textBox.CaretIndex = caretIndex; &lt;br /&gt;            textBox.SelectionStart = selectionStart;
            textBox.SelectionLength = selectionLength;
        }&lt;/pre&gt;

&lt;p&gt;Here we save and restore the TextBox’s SelectionStart, SelectionLength and CaretIndex whilst updating the ModifiedValue that is about to be changed to equal the Value that the user can actually see (remember the ModifiedValue is transparent).&lt;/p&gt;

&lt;p&gt;The very last trick is within the ModifiedValue’s setter where we update the Value property. This ensures that whatever changes the operator makes to the TextBox are visible in the overlaid TextBlock. Of course the whole point of doing all of this is that the caret position and selection remains completely unchanged whilst the value appears to update.&lt;/p&gt;

&lt;pre class="csharpcode"&gt;        &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;double&lt;/span&gt;? ModifiedValue
        {
            get
            {
                &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;this&lt;/span&gt;.modifiedValue;
            }
            set
            {
                &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;this&lt;/span&gt;.modifiedValue != &lt;span class="kwrd"&gt;value&lt;/span&gt;)
                {
                    &lt;span class="kwrd"&gt;this&lt;/span&gt;.modifiedValue = &lt;span class="kwrd"&gt;value&lt;/span&gt;;
                    NotifyPropertyChanged(&lt;span class="str"&gt;&amp;quot;ModifiedValue&amp;quot;&lt;/span&gt;);
                    &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;this&lt;/span&gt;.ModifiedValue.HasValue)
                        Value = ModifiedValue.Value;
                }
            }
        }&lt;/pre&gt;

&lt;p&gt;Source code &lt;a href="http://www.spencen.com/Downloads/TextBoxOverlay.zip"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So aside from the tacky code-behind to keep the code here to a minimum, I’m wondering if there isn’t a neater solution? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color="#ff0000"&gt;UPDATE: Using an attached behaviour&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It was pointed out to me by a colleague that there is a simpler, more versatile solution. Simple encapsulate the text change with selection restore within an attached property. Then we can use multiple bindings to achieve the effect.&lt;/p&gt;

&lt;pre class="csharpcode"&gt;        &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; GetNonIntrusiveText(DependencyObject obj)
        {
            &lt;span class="kwrd"&gt;return&lt;/span&gt; (&lt;span class="kwrd"&gt;string&lt;/span&gt;)obj.GetValue(NonIntrusiveTextProperty);
        }

        &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; SetNonIntrusiveText(DependencyObject obj, &lt;span class="kwrd"&gt;string&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;)
        {
            obj.SetValue(NonIntrusiveTextProperty, &lt;span class="kwrd"&gt;value&lt;/span&gt;);
        }

        &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;readonly&lt;/span&gt; DependencyProperty NonIntrusiveTextProperty =
            DependencyProperty.RegisterAttached(&lt;br /&gt;                &lt;span class="str"&gt;&amp;quot;NonIntrusiveText&amp;quot;&lt;/span&gt;, &lt;br /&gt;                &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(&lt;span class="kwrd"&gt;string&lt;/span&gt;), &lt;br /&gt;                &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(TextBoxExtensions), 
                &lt;span class="kwrd"&gt;new&lt;/span&gt; FrameworkPropertyMetadata(&lt;br /&gt;                    &lt;span class="kwrd"&gt;null&lt;/span&gt;, &lt;br /&gt;                    FrameworkPropertyMetadataOptions.BindsTwoWayByDefault, &lt;br /&gt;                    NonIntrusiveTextChanged));

        &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; NonIntrusiveTextChanged(&lt;br /&gt;             &lt;span class="kwrd"&gt;object&lt;/span&gt; sender, &lt;br /&gt;             DependencyPropertyChangedEventArgs e)
        {
            var textBox = sender &lt;span class="kwrd"&gt;as&lt;/span&gt; TextBox;

            &lt;span class="kwrd"&gt;if&lt;/span&gt; (textBox == &lt;span class="kwrd"&gt;null&lt;/span&gt;) &lt;span class="kwrd"&gt;return&lt;/span&gt;;

            var caretIndex = textBox.CaretIndex;
            var selectionStart = textBox.SelectionStart;
            var selectionLength = textBox.SelectionLength;

            textBox.Text = (&lt;span class="kwrd"&gt;string&lt;/span&gt;) e.NewValue;

            textBox.CaretIndex = caretIndex;
            textBox.SelectionStart = selectionStart;
            textBox.SelectionLength = selectionLength;
        }&lt;/pre&gt;

&lt;p&gt;Now the XAML no longer requires the tricky TextBlock overlay, we simple have a TextBox with two bindings.&lt;/p&gt;

&lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;TextBox&lt;/span&gt; 
    &lt;span class="attr"&gt;Text&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Value,StringFormat=0.00,&lt;br /&gt;                         UpdateSourceTrigger=PropertyChanged,&lt;br /&gt;                         Mode=OneWayToSource}&amp;quot;&lt;/span&gt;
    &lt;span class="attr"&gt;local:TextBoxExtensions&lt;/span&gt;.&lt;span class="attr"&gt;NonIntrusiveText&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Value,StringFormat=0.00,&lt;br /&gt;                                                                          UpdateSourceTrigger=PropertyChanged,&lt;br /&gt;                                                                          Mode=TwoWay}&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
 &lt;/pre&gt;</description><category>Development</category><category>.NET</category><category>Lab49</category><category>WPF</category><comments>http://blog.spencen.com/2010/05/05/preventing-a-bound-textbox-from-resetting-the-caret-position.aspx#Comments</comments><guid isPermaLink="false">49404db1-dd70-4049-8c50-08057f3ec2a2</guid><pubDate>Fri, 07 May 2010 11:54:57 GMT</pubDate></item><item><title>Conditional Formatting of a TextBox</title><link>http://blog.spencen.com/2010/04/29/conditional-formatting-of-a-textbox.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;img style="border-bottom: 0px; border-left: 0px; margin: 0px 0px 0px 20px; display: inline; border-top: 0px; border-right: 0px" title="FormatAndPaste" border="0" alt="FormatAndPaste" align="right" src="http://blog.spencen.com/images/83489-72989/FormatAndPaste_3.png" width="263" height="197" /&gt; &lt;/p&gt;  &lt;p&gt;I recently came across a scenario where I needed to bind a TextBox to a domain property but also have the value formatted for display. To make things more interesting the format was to be dynamic and the value needed to be editable.&lt;/p&gt;  &lt;p&gt;The initial investigation led me to consider a ValueConverter. Ideally the TextBox.Text property could be bound and the Converter could be used to format to/from the required on-screen value. For a dynamic format it would be nice to bind the ConverterParameter to a property that exposed the format. Of course that doesn’t work because &lt;a href="http://social.msdn.microsoft.com/Forums/en-US/wpf/thread/88a22766-5e6f-4a16-98a6-1ab39877dd09"&gt;ConverterParameter doesn’t support data binding&lt;/a&gt;. I found a &lt;a href="http://marlongrech.wordpress.com/2008/08/03/my-wish-came-true-i-can-now-use-databinding-in-a-converterparameter/"&gt;hack that gets around this&lt;/a&gt; – but it isn't pretty. There are also some examples of using a &lt;a href="http://social.msdn.microsoft.com/Forums/en-US/wpf/thread/d6a95f05-4338-44a4-a834-bbfe71e893ac/"&gt;MultiValueConverter&lt;/a&gt; and passing both the value to format and the format string itself as separate individual bindings. This approach has some difficulties too when converting both ways and its just feels like an abuse of the ValueConverter.&lt;/p&gt;  &lt;p&gt;This lead me to think about the problem a little more… maybe a different approach is required? Thinking back to the WinForms days and I realised that I had solved this problem before, several times in fact. My approach to this problem for WinForms had been:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Subclass TextBox and add a Value property of type object that allows data binding to data types other than just string. Common types that could be used with a TextBox include int, decimal, double, bool, DateTime and enums. &lt;/li&gt;    &lt;li&gt;The inherited TextBox also has a Format property. On GotFocus the Value property is formatted and used to populate the Text property. On LostFocus the reverse happens, the Text property is parsed back into the Value property. Of course this requires the data type to be known so a DataType property is required as well. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;The benefits that this has:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;TextBox works for data types other than string. &lt;/li&gt;    &lt;li&gt;The value is formatted as required for display but upon data entry (GotFocus) the formatting is removed. This actually makes it easier to enter/modify the value because you don’t need to parse currency symbols, percentage signs and the like. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;So the approach sounds good and its worked well for me in WinForms but its… well… not very WPF’ish. Upon starting any major development the first requirement in WinForms was to subclass all the controls – because they were just so lacking if functionality and even more importantly didn’t expose a common set of interfaces. However, I very rarely subclass controls in WPF – instead we can use attached behaviors to extend the control. &lt;/p&gt;  &lt;p&gt;The attached behaviors required are:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;     &lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;object&lt;/span&gt; TypedValue&lt;/pre&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;Type&lt;/span&gt; DataType &lt;/pre&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;string&lt;/span&gt; StringFormat&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In XAML instead of binding to the TextBox.Text property we bind to the TypedValue attached property. The StringFormat can also be bound. The DataType can be inferred by the TypedValue – but for nullable types its best to be set explicitly. With a sample class as follows:&lt;/p&gt;

&lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; ModelItem
{
    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; Value { get; set; }
    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Format { get; set; }
}&lt;/pre&gt;
&lt;style type="text/css"&gt;




















.csharpcode, .csharpcode pre
{
	font-size: big;
	color: black;
	font-family: verdana, "Consolas", "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;The XAML is then:&lt;/p&gt;

&lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DataGrid&lt;/span&gt; &lt;span class="attr"&gt;ItemsSource&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Items}&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;AutoGenerateColumns&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;False&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DataGrid.Columns&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DataGridTextColumn&lt;/span&gt; &lt;span class="attr"&gt;Header&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Any Type TextBox&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DataGridTextColumn.ElementStyle&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Style&lt;/span&gt; &lt;span class="attr"&gt;TargetType&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{x:Type TextBlock}&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Setter&lt;/span&gt; &lt;span class="attr"&gt;Property&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;local:TextBoxExtensions.StringFormat&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Value&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Format}&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Setter&lt;/span&gt; &lt;span class="attr"&gt;Property&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;local:TextBoxExtensions.TypedValue&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Value&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Value}&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Style&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DataGridTextColumn.ElementStyle&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DataGridTextColumn.EditingElementStyle&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Style&lt;/span&gt; &lt;span class="attr"&gt;TargetType&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{x:Type TextBox}&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Setter&lt;/span&gt; &lt;span class="attr"&gt;Property&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;local:TextBoxExtensions.StringFormat&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Value&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Format}&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Setter&lt;/span&gt; &lt;span class="attr"&gt;Property&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;local:TextBoxExtensions.TypedValue&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Value&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Value}&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Style&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DataGridTextColumn.EditingElementStyle&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DataGridTextColumn&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DataGridTextColumn&lt;/span&gt; &lt;span class="attr"&gt;Header&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Format&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Binding&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Format}&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;IsReadOnly&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;True&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DataGridTextColumn&lt;/span&gt; &lt;span class="attr"&gt;Header&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Value&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Binding&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Value}&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;IsReadOnly&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;True&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DataGrid.Columns&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DataGrid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Which generates a DataGrid bound to a collection of ModelItems. Each ModelItem allows a different data type and format to be applied – great for a “user-defined fields” scenario.&lt;/p&gt;

&lt;p&gt;Populating the ModelItems collection as follows in our main ViewModel:&lt;/p&gt;

&lt;pre class="csharpcode"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; Model
    {
        &lt;span class="kwrd"&gt;public&lt;/span&gt; Model()
        {
            Primary = &lt;span class="kwrd"&gt;new&lt;/span&gt; ModelItem() { Format = &lt;span class="str"&gt;&amp;quot;{0:#,##0.0}&amp;quot;&lt;/span&gt;, Value = 12345678.765 };
            Items = &lt;span class="kwrd"&gt;new&lt;/span&gt; ObservableCollection&amp;lt;ModelItem&amp;gt;();
            Items.Add(&lt;span class="kwrd"&gt;new&lt;/span&gt; ModelItem() { Format = &lt;span class="str"&gt;&amp;quot;{0:C2}&amp;quot;&lt;/span&gt;, Value = 123.42 });
            Items.Add(&lt;span class="kwrd"&gt;new&lt;/span&gt; ModelItem() { Format = &lt;span class="str"&gt;&amp;quot;{0&lt;img src="http://blog.spencen.com/emoticons/tongue.png" border="0" /&gt;2}&amp;quot;&lt;/span&gt;, Value= 0.125 });
            Items.Add(&lt;span class="kwrd"&gt;new&lt;/span&gt; ModelItem() { Format = &lt;span class="str"&gt;&amp;quot;{0}&amp;quot;&lt;/span&gt;, Value = &lt;span class="str"&gt;&amp;quot;Fred&amp;quot;&lt;/span&gt; });
            Items.Add(&lt;span class="kwrd"&gt;new&lt;/span&gt; ModelItem() { Format = &lt;span class="kwrd"&gt;null&lt;/span&gt;, Value = &lt;span class="kwrd"&gt;true&lt;/span&gt; });
            Items.Add(&lt;span class="kwrd"&gt;new&lt;/span&gt; ModelItem() { Format = &lt;span class="str"&gt;&amp;quot;Uncle {0}&amp;quot;&lt;/span&gt;, Value = &lt;span class="str"&gt;&amp;quot;George&amp;quot;&lt;/span&gt; });
            Items.Add(&lt;span class="kwrd"&gt;new&lt;/span&gt; ModelItem() { Format = &lt;span class="kwrd"&gt;null&lt;/span&gt;, Value = Colors.Black });
            Items.Add(&lt;span class="kwrd"&gt;new&lt;/span&gt; ModelItem() { Format = &lt;span class="kwrd"&gt;null&lt;/span&gt;, Value = System.DayOfWeek.Monday });
            Items.Add(&lt;span class="kwrd"&gt;new&lt;/span&gt; ModelItem() { Format = &lt;span class="str"&gt;&amp;quot;{0:0;minus 0;zip}&amp;quot;&lt;/span&gt;, Value = -123.4 });
        }

        &lt;span class="kwrd"&gt;public&lt;/span&gt; ModelItem Primary { get; set; }

        &lt;span class="kwrd"&gt;public&lt;/span&gt; ObservableCollection&amp;lt;ModelItem&amp;gt; Items { get; &lt;span class="kwrd"&gt;private&lt;/span&gt; set; }
    }&lt;/pre&gt;

&lt;p&gt;Generates the following grid, which allows for editing of the strongly typed values.&lt;/p&gt;

&lt;p&gt;&lt;img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="FormatAndPaste" border="0" alt="FormatAndPaste" src="http://blog.spencen.com/images/83489-72989/FormatAndPaste_1.png" width="263" height="197" /&gt;&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2010/04/29/conditional-formatting-of-a-textbox.aspx#Comments</comments><guid isPermaLink="false">daf38d7a-87a5-4f2e-91b2-de18075e68f2</guid><pubDate>Thu, 29 Apr 2010 04:52:11 GMT</pubDate></item><item><title>Word Puzzle to Silverlight Phone &amp;ndash; Part 2</title><link>http://blog.spencen.com/2010/04/26/word-puzzle-to-silverlight-phone-ndash-part-2.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Finally got interaction and feedback happening on the &lt;a href="http://blog.spencen.com/2010/04/08/porting-wpf-word-puzzle-to-windows-phone-silverlight-ndash-part-1.aspx"&gt;Silverlight port of Word Puzzle&lt;/a&gt;. This was so much more difficult than I had imagined – feels like learning WPF from scratch. I am beginning to believe that it would be easier to approach Silverlight with no WPF knowledge whatsoever.&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;I had to cater for not having DataTriggers – and then not being able to get behaviours/triggers/states to work like I wanted. In the end I used a ValueConverter to hack the &lt;em&gt;selection&lt;/em&gt; and &lt;em&gt;solved&lt;/em&gt; colours – yuk!&lt;/li&gt;    &lt;li&gt;Had some weird issues with the MouseMove event – had to use CaptureMouse to get position readings outside the original UI element – wasn’t a requirement for WPF.&lt;/li&gt;    &lt;li&gt;Spent ages working through really minor bugs that just aren’t reported properly in Silverlight. Things as simple as referencing a resource that doesn’t exist (due to misspelling) generates a super generic error message.&lt;/li&gt;    &lt;li&gt;Had to create a proper custom layout panel for the words to position and rotate the highlight boxes. This was actually an improvement on the original version.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Anyhow – now have a playable version on the emulator. Slow progress, but progress nonetheless.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/WordPuzzle_Stage2_4.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="WordPuzzle_Stage2" border="0" alt="WordPuzzle_Stage2" src="http://blog.spencen.com/images/83489-72989/WordPuzzle_Stage2_thumb_1.png" width="198" height="386" /&gt;&lt;/a&gt;&amp;#160; &lt;a href="http://blog.spencen.com/images/83489-72989/WordPuzzle_Stage2_EndGame_2.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="WordPuzzle_Stage2_EndGame" border="0" alt="WordPuzzle_Stage2_EndGame" src="http://blog.spencen.com/images/83489-72989/WordPuzzle_Stage2_EndGame_thumb.png" width="198" height="386" /&gt;&lt;/a&gt;&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>Windows Phone</category><comments>http://blog.spencen.com/2010/04/26/word-puzzle-to-silverlight-phone-ndash-part-2.aspx#Comments</comments><guid isPermaLink="false">4172f2e7-81a8-4887-840a-315939661878</guid><pubDate>Mon, 26 Apr 2010 04:37:07 GMT</pubDate></item><item><title>Desk Genie</title><link>http://blog.spencen.com/2010/04/19/desk-genie.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I’ve recently had the opportunity to reduce my material possessions to no more than can be carried in eight suitcases. This was quite a liberating experience. Particularly when you take into account that those eight suitcases were for my entire family – only two contained my stuff.&lt;/p&gt;  &lt;p&gt;One of the fun parts of going through this experience is that we get to buy some essentials. Once all the boring stuff (like furniture) is out of the way I got to concentrate on replacing a few tech items. The idea being to create an area at home from which I can work remotely whilst remaining highly productive. First on the list was a &lt;a href="http://blog.spencen.com/2010/04/06/new-laptop-ndash-sony-z-series.aspx"&gt;more powerful, yet highly portable laptop&lt;/a&gt;, and a keyboard and &lt;a href="http://www.jr.com/acer-computer/pe/ACE_H243HBMID/"&gt;cheap wide screen monitor&lt;/a&gt; to go with it.&lt;/p&gt;  &lt;p&gt;This gave me the essentials but there were two minor flaws in the setup.&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;The laptop only had three USB ports (not uncommon for laptops). Obviously this isn’t going to be enough even at this early stage – keyboard, mouse, phone, external hard drive. (Luckily the printer is on the network).&lt;/li&gt;    &lt;li&gt;My aging &lt;a href="http://www.dpreview.com/reviews/sonydscv1/"&gt;Sony Cybershot DSC-V1&lt;/a&gt; uses the standard sized (old) memory stick format which doesn’t fit in the card reader on the Z-Series laptop. This means yet another device to connect via USB.&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Enter the Desk Genie the perfect &lt;a href="http://www.mobilefun.co.uk/cat/HTC-Touch-Diamond2.htm"&gt;accessory for my HTC Touch Diamond2&lt;/a&gt;. This little gadget is designed to meet three simple objectives.&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Act as a multi-format card reader&lt;/li&gt;    &lt;li&gt;Act as a USB hub and power charger&lt;/li&gt;    &lt;li&gt;Provide a platform on which to mount portable devices so they are easily visible when sat at a desk.&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;&lt;em&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Desk%20Genie%20Unboxed_2.jpg"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Desk Genie Unboxed" border="0" alt="Desk Genie Unboxed" src="http://blog.spencen.com/images/83489-72989/Desk%20Genie%20Unboxed_thumb.jpg" width="329" height="240" /&gt;&lt;/a&gt;&amp;#160; &lt;a href="http://blog.spencen.com/images/83489-72989/Desk%20Genie%20what%20you%20get_2.jpg"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Desk Genie what you get" border="0" alt="Desk Genie what you get" src="http://blog.spencen.com/images/83489-72989/Desk%20Genie%20what%20you%20get_thumb.jpg" width="240" height="240" /&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;&lt;em&gt;What’s in the box? &lt;/em&gt;&lt;em&gt;Comes with plenty of charger connections – the only two of interest for me were the mini and micro-USB.&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;I’ve had this item for almost a week now, and I’ve tried it out both at work and at home. Here’s my thoughts.&lt;/p&gt;  &lt;h3&gt;Pros&lt;a href="http://blog.spencen.com/images/83489-72989/DSC01319.jpg"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" title="DSC01319" border="0" alt="DSC01319" align="right" src="http://blog.spencen.com/images/83489-72989/DSC01319_thumb.jpg" width="214" height="95" /&gt;&lt;/a&gt;&lt;/h3&gt;  &lt;ul&gt;   &lt;li&gt;It works well as phone holder. The “sticky” surface does exactly what it says – hold the phone firmly in place without having pesky catches, clips, Velcro etc. The viewing angle worked well for the desk and chair heights that I use both at home and work.&lt;/li&gt;    &lt;li&gt;Charger worked fine for charging my HTC Touch Diamond, though had trouble with the Blackberry (see below).&lt;/li&gt;    &lt;li&gt;As a USB hub it works flawlessly (as you’d hope). I’ve had my 1.5 Tb external drives connected through this and copied large volumes of data without any issues.&lt;/li&gt;    &lt;li&gt;Has a very muted blue “glow” indicator to let you know its connected.&lt;/li&gt; &lt;/ul&gt;  &lt;h3&gt;Cons&lt;a href="http://blog.spencen.com/images/83489-72989/DSC01321.jpg"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" title="DSC01321" border="0" alt="DSC01321" align="right" src="http://blog.spencen.com/images/83489-72989/DSC01321_thumb.jpg" width="212" height="240" /&gt;&lt;/a&gt;&lt;/h3&gt;  &lt;ul&gt;   &lt;li&gt;An extra USB outlet would have been nice.&lt;/li&gt;    &lt;li&gt;The memory stick reader isn’t a perfect fit. I had to insert the memory stick on a slight angle – was a bit of a knack getting the hang of it but once you worked it out wasn’t a big deal. I’ve had the same problem with other multi-card readers (like the one in my Zalman HD160 HTPC case).&lt;/li&gt;    &lt;li&gt;When connecting my Blackberry via the power charger (with the included micro-USB adapter) it didn’t work. Not sure what the problem was – maybe not enough “juice”? Connected via one of the USB ports and everything was fine – connectivity and charging.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/DSC01319.jpg"&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160; &lt;/p&gt;  &lt;h3&gt;Conclusion&lt;/h3&gt;  &lt;p&gt;My favourite configuration for this device was to provide both charging and connectivity for my phone by using one of the USB ports rather than using the charging cable. Whilst this does mean I lose one of the two USB ports I like having the device connected for ActiveSync and for copying across podcasts.&lt;/p&gt;  &lt;p&gt;The number one feature of this gadget for me though is that it holds the phone at a perfect viewing angle whilst connected. I would have loved one of these at my previous work desk where I would continuously have to pick the phone up to look at whether I’d missed a phone call, email or text whilst away from my desk. If that’s what you really care about then&lt;/p&gt;  &lt;p&gt;I’m pretty happy with this gadget – it does what it says and for me it happened to come along at a time when I needed the USB and memory card features. Now all I have to do is figure out whether I keep it on the desk at home, or the one at work?&lt;/p&gt;  &lt;p&gt;&lt;em&gt;Thanks to Natalie from &lt;/em&gt;&lt;a href="http://mobilefun.co.uk"&gt;&lt;em&gt;mobilefun.co.uk&lt;/em&gt;&lt;/a&gt;&lt;em&gt; who was kind enough to send me a Desk Genie to review.&lt;/em&gt;&lt;/p&gt;</description><category>Windows Phone</category><category>General</category><comments>http://blog.spencen.com/2010/04/19/desk-genie.aspx#Comments</comments><guid isPermaLink="false">aa855205-7ba6-4e72-a2f8-3c2093b57984</guid><pubDate>Mon, 19 Apr 2010 03:19:50 GMT</pubDate></item><item><title>Porting WPF Word Puzzle to Windows Phone Silverlight &amp;ndash; Part 1</title><link>http://blog.spencen.com/2010/04/08/porting-wpf-word-puzzle-to-windows-phone-silverlight-ndash-part-1.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;To date I’ve avoided doing any serious development in Silverlight. Every time I’ve tried to tackle it I get so frustrated with all the missing pieces. Besides which I’ve never had a good reason to do any Silverlight work – I’ve never been a fan of applications that run in a browser.&lt;/p&gt;  &lt;p&gt;With the release of the Windows Phone Series development tools however, I now have a good reason. So I figured I’d pick a relative simple, small scale WPF application that actually makes some sense to run on a mobile device. Rather than starting it from scratch I just wanted to port it from WPF – so I chose the &lt;a href="http://blog.spencen.com/2009/03/12/word-puzzle-v02.aspx"&gt;Word Puzzle program&lt;/a&gt; that I wrote a couple of years back. I figured it was a good choice because it met the criteria above, plus I’d already stripped it back a little to make sure it could run as an XBAP application.&lt;/p&gt;  &lt;p&gt;Inspired by &lt;a href="http://devlicio.us/blogs/rob_eisenberg/archive/2010/04/06/porting-nhprof-from-wpf-to-silverlight-day-7.aspx?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+Devlicious+%28Devlicio.us%29"&gt;Rob’s posts on porting NProf to Silverlight&lt;/a&gt; I thought it may be of some interest to list off the issues that I come up against as I go through the process of porting. This first list represents me starting a new Windows Phone project and copying over classes and XAML files to get &lt;em&gt;something&lt;/em&gt; to compile and look recognizable. The following represents about 2 hours work:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/WordPuzzle_Stage1_4.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="WordPuzzle_Stage1" border="0" alt="WordPuzzle_Stage1" src="http://blog.spencen.com/images/83489-72989/WordPuzzle_Stage1_thumb_1.png" width="246" height="480" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;However, along the way I came across this list of issues:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;No Viewbox&lt;/li&gt;    &lt;li&gt;No MouseDown or MouseUp&lt;/li&gt;    &lt;li&gt;No UniformGrid&lt;/li&gt;    &lt;li&gt;No Image.StretchDirection&lt;/li&gt;    &lt;li&gt;x:Type is not supported&lt;/li&gt;    &lt;li&gt;No Style.Triggers&lt;/li&gt;    &lt;li&gt;No DockPanel&lt;/li&gt;    &lt;li&gt;No RoutedCommand&lt;/li&gt;    &lt;li&gt;No KeyGesture&lt;/li&gt;    &lt;li&gt;No DataType on DataTemplate?&lt;/li&gt;    &lt;li&gt;No ValueConversion&lt;/li&gt;    &lt;li&gt;No DefiningGeometry on Shape&lt;/li&gt;    &lt;li&gt;No BooleanToVisibilityConverter&lt;/li&gt;    &lt;li&gt;No DynamicResource&lt;/li&gt;    &lt;li&gt;No WrapPanel&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;I haven’t verified the above list yet – save that they gave me compilation errors. I easily found a replacement UniformGrid, but there are a few items on the list that may pose more of a problem.&lt;/p&gt;  &lt;p&gt;The next step is to get some level of interaction working.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>Windows Phone</category><category>WPF</category><comments>http://blog.spencen.com/2010/04/08/porting-wpf-word-puzzle-to-windows-phone-silverlight-ndash-part-1.aspx#Comments</comments><guid isPermaLink="false">b856a911-d72f-44cd-b72e-9a3dd36d6268</guid><pubDate>Thu, 08 Apr 2010 02:15:05 GMT</pubDate></item><item><title>My views on Windows Phone 7 Series</title><link>http://blog.spencen.com/2010/04/08/my-views-on-windows-phone-7-series.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I have mixed feelings about Windows Phone 7 Series. Whilst the new user interface is refreshingly different I’m not overly optimistic about its effectiveness. As more information about the new OS was made available I began to get a better idea of the target audience.&lt;/p&gt;  &lt;p&gt;&lt;img border="0" src="http://cache.windowsphone7series.com/images/logo.jpg" width="153" height="80" /&gt;&lt;/p&gt;  &lt;p&gt;My current feeling is that Windows Phone 7 Series will become a solid offering for the mass consumer market. It will throw off the shackles of the &lt;em&gt;Windows Mobile&lt;/em&gt; legacy and become a more stable, more consistent and vastly more appealing operating system for mobile devices. The only people that are likely to be disappointed by the new OS are the few die-hards that are currently running Windows Mobile 6.5 and below. The kind of people that wouldn’t be satisfied with an iPad when there are much more powerful and efficient &lt;a href="http://blog.spencen.com/2010/04/06/new-laptop-ndash-sony-z-series.aspx"&gt;means at hand&lt;/a&gt;. Those with such outlandish views that they believe touch interfaces (capacitive or otherwise) offer some amusement but just don’t cut it for serious tasks. People that believe copy/paste and multi-tasking are key operating system features. Alas I am once such person.&lt;/p&gt;  &lt;p&gt;I think Windows Phone 7 Series has the potential to be very successful and I certainly hope that it is. For me a lot about having a phone is having a mobile device for which I can write applications. The ability to &lt;em&gt;finally&lt;/em&gt; use Silverlight is something that I’m really excited about. So while the operating system itself is not something that I’m all that enthusiastic about the developer experience so far looks great.&lt;/p&gt;</description><category>Development</category><category>Windows Phone</category><category>General</category><comments>http://blog.spencen.com/2010/04/08/my-views-on-windows-phone-7-series.aspx#Comments</comments><guid isPermaLink="false">95742ed8-d6f0-4310-9bea-85985fe77813</guid><pubDate>Thu, 08 Apr 2010 00:55:43 GMT</pubDate></item><item><title>New Laptop &amp;ndash; Sony Z Series</title><link>http://blog.spencen.com/2010/04/06/new-laptop-ndash-sony-z-series.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;The last two months have been pretty hectic for me… new job, new residence, new country/continent/hemisphere.&lt;/p&gt;  &lt;p&gt;When we moved I packed all my desktop computers (dev box, HTPC, Home Server and son’s PC) into storage. This means for the last two months I’ve been using my &lt;a href="http://blog.spencen.com/2007/11/28/a-new-toy.aspx"&gt;Fujitsu tablet PC&lt;/a&gt; for all my computing requirements, occasionally also resorting to my HP mini notebook.&lt;/p&gt;  &lt;p&gt;The plan was to purchase a desktop PC when we got settled in – something powerful enough to by a good dev box and occasional gaming. However – two things quickly became apparent to me. Firstly – purchasing computer hardware in the US is not as convenient as I first imagined.&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Online delivery times for most sites (including Dell and Sony) were measured in weeks – I want next day delivery!&lt;/li&gt;    &lt;li&gt;It’s nowhere near as cheap as I had hoped – especially when you always need to add taxes &lt;/li&gt;    &lt;li&gt;Laptops are cheaper to buy than desktops once you include screens, keyboards, wireless etc. Of course this point is debatable based on your requirements.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;My requirements were:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;I5 or I7 processor &lt;/li&gt;    &lt;li&gt;Minimum 4Gb RAM &lt;/li&gt;    &lt;li&gt;Dedicated mid-range graphics card&lt;/li&gt;    &lt;li&gt;Dual monitor – with at least one 1920 x 1080 display&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Nice to have: &lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;120+ Gb SSD drive &lt;/li&gt;    &lt;li&gt;Wireless N&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;The desktops I priced that matched these requirements were priced around $1200. Too expensive! I deliberated for two weeks, trying to find cheaper alternatives – including building a machine from components (which is how I normally buy desktop PCs) and then finally gave up. Figuring I was going to have to spend that kind of money I decided to look at higher end laptops that offered equivalent power. Eventually I settled on the new &lt;a href="http://www.sonystyle.com/webapp/wcs/stores/servlet/CategoryDisplay?catalogId=10551&amp;amp;storeId=10151&amp;amp;langId=-1&amp;amp;categoryId=8198552921644570897&amp;amp;parentCategoryId=16154"&gt;Sony Z Series&lt;/a&gt; together with a cheap 24 inch screen.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/VPCZ112GXS_2_2.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="VPCZ112GXS_2" border="0" alt="VPCZ112GXS_2" src="http://blog.spencen.com/images/83489-72989/VPCZ112GXS_2_thumb.png" width="365" height="254" /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Pros&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Light – seriously light – much lighter than my Tablet PC – 3 lbs / 1.3kg&lt;/li&gt;    &lt;li&gt;I5 processor &lt;/li&gt;    &lt;li&gt;Dual graphics – dedicated when you need it then drops back automatically to use integrated for lower power use &lt;/li&gt;    &lt;li&gt;Wireless N / Bluetooth &lt;/li&gt;    &lt;li&gt;Reasonable battery life – 5 hours &lt;/li&gt;    &lt;li&gt;SSD drive is awesome &lt;/li&gt;    &lt;li&gt;Comes with a really nice set of active noise cancelling bud-style headphones &lt;/li&gt;    &lt;li&gt;Keyboard looks gimmicky – but actually works really well, has a really solid feel, possibly the best laptop keyboard I’ve used. This was really quite a surprise.&lt;/li&gt;    &lt;li&gt;Ambient light detector used to automatically set screen brightness (and optionally backlights keyboard) – works really well in our dimly lit apartment or when working near a window during the day. &lt;/li&gt;    &lt;li&gt;HDMI connection to 1920 x 1080 monitor – including sound (though the monitor I bought has ridiculously terrible speakers).&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Cons&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Doesn’t read original memory sticks – it has a MagicGate slot – presumable only takes the Duo format? &lt;/li&gt;    &lt;li&gt;Its expensive when you can get a lot of &lt;em&gt;reasonable&lt;/em&gt; laptops for around half the price.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/VPCZ112GXS_1_2.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="VPCZ112GXS_1" border="0" alt="VPCZ112GXS_1" src="http://blog.spencen.com/images/83489-72989/VPCZ112GXS_1_thumb.png" width="383" height="243" /&gt;&lt;/a&gt;&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2010/04/06/new-laptop-ndash-sony-z-series.aspx#Comments</comments><guid isPermaLink="false">513ba997-204a-4862-8334-3fcbfb7c0944</guid><pubDate>Tue, 06 Apr 2010 03:08:45 GMT</pubDate></item><item><title>Wrapping up a contract</title><link>http://blog.spencen.com/2010/01/28/wrapping-up-a-contract.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;This is my last week at my current employer. I’ve been spending most of my time updating the Wiki, doing some last minute branding changes, commenting code and general housekeeping.&lt;/p&gt;  &lt;p&gt;The project I’ve been working on for the last 18 months was called “Automation of Movements” – nicknamed to AoM. I came across the little gem that &lt;a href="http://david.gardiner.net.au/"&gt;Dave&lt;/a&gt; posted to the project Wiki very early in the development cycle.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/The%20AoM%20Team_2.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; margin: 0px 15px 0px 0px; display: inline; border-top: 0px; border-right: 0px" title="The AoM Team" border="0" alt="The AoM Team" align="left" src="http://blog.spencen.com/images/83489-72989/The%20AoM%20Team_thumb.png" width="179" height="91" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;em&gt;Ten years ago, a crack IT-commando unit was sent to prison by a static code analyser for a bug they didn't create. These men promptly escaped from a Triple-DES security stockade to the Adelaide underground. Today, still wanted by the government/higher education and private sectors, they survive as developers of fortune. If you have a software problem, if no one else can help, and if you can find them, maybe you can hire... The AoM-Team.&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;Gold Dave, pure gold.&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2010/01/28/wrapping-up-a-contract.aspx#Comments</comments><guid isPermaLink="false">954b200d-c740-4a91-acf9-a809de1539ae</guid><pubDate>Thu, 28 Jan 2010 11:56:04 GMT</pubDate></item><item><title>New Opportunities</title><link>http://blog.spencen.com/2010/01/18/new-opportunities.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I’ve lived and worked in Adelaide for my entire professional career. I’m lucky enough never to have been without interesting work to do. In fact I look back on some of the positions that I’ve had and I feel very lucky. There is no doubt within my mind that the Adelaide job market has been very kind to me over the years.&lt;/p&gt;  &lt;p&gt;However, I feel that maybe the time has finally come that I need to look further afield to make the next progression in my career path. &lt;/p&gt;  &lt;p&gt;With my current contract coming to the end its been time to think about what may lie ahead. This contract lasted 18 months and all the feedback we’ve had (dev team, business stakeholders and end users) has indicated that the project was a resounding success. I can vouch for the fact that this unanimous approval is more unusual than common and hence makes the feedback even more rewarding.&lt;/p&gt;  &lt;p&gt;Something else that I can take away from this project is that I thoroughly enjoy working with a team of high calibre developers. It would be true to say that I have learnt a lot from them over the course of this project. When the team was originally formed I had some concerns about how effectively we could work together given that the team structure was so “top heavy”. We had four guys that would normally have held lead developer/architect positions and only two “juniors”. It turned out that my fears were unfounded and we managed to work very well together – each of us seemingly effortlessly taking charge of one component of the project and managing the resource pool of juniors among us. There were plenty of constructive discussions too. Almost every architectural decision was challenged, which led not just to a more robust product but also enabled a great deal of knowledge sharing. &lt;/p&gt;  &lt;p&gt;So was it a perfectly executed project? Of course not. In hind-sight we still made plenty of mistakes and a number of compromises – but then again that’s probably a very healthy sign. With only 4 months to roll out version 1 of the product we couldn’t afford the luxury of too much prototyping, nor could we procrastinate on decisions that had to be made. Make an informed choice – move on.&lt;/p&gt;  &lt;p&gt;Given the outcome of my current role its clear to me that I need to be looking for the next new challenge that’s going to progress my development. So I need to consider what that role should include right?&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Surround myself with great developers &lt;/li&gt;    &lt;li&gt;Look for an inspiring leadership team&lt;/li&gt;    &lt;li&gt;Work for a software company – everyone’s mileage (kilometreage?) will vary on this one, but my experience is that a software company treats their developers well – they are the “talent”, in most other businesses they are sometimes considered just an overhead. &lt;/li&gt;    &lt;li&gt;The work is challenging – almost left this one off because its just so obvious – why would anyone want to work on something that is easy – what would keep you coming to work? &lt;/li&gt;    &lt;li&gt;It pays well. Sounds evil right? Well sorry but I’m a realist – if I had unlimited funds I’d write free software for a living because that’s what I love doing. Unfortunately my funds are most definitely limited. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Hmm… reading this back its probably the most philosophical blog post I’ve written to date. Not sure if its simply me getting older, or it has something to do with me writing this 11 km above sea level whilst travelling to another continent. And no it’s not a holiday – its a job interview.&lt;/p&gt;</description><category>Development</category><category>General</category><comments>http://blog.spencen.com/2010/01/18/new-opportunities.aspx#Comments</comments><guid isPermaLink="false">b2f24e6a-3e46-4403-bfb8-991650c2f5d0</guid><pubDate>Mon, 18 Jan 2010 01:35:10 GMT</pubDate></item><item><title>Lego Mindstorms NXT 2.0</title><link>http://blog.spencen.com/2010/01/14/lego-mindstorms-nxt-20.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;P&gt;Unlike &lt;A href="http://blogs.msdn.com/acoat/archive/2010/01/13/lego-mindstorms-nxt2-0-trophybot.aspx"&gt;Andrew Coates&lt;/A&gt; I have a legitimate reason for buying a &lt;A href="http://mindstorms.lego.com/eng/default.aspx"&gt;Lego Mindstorms NXT 2.0&lt;/A&gt; Robotics kit. I have a young son who’s very keen on Lego and has been building his own robots out of cardboard and Sellotape for the last three months.&lt;/P&gt;
&lt;P&gt;I must admit that I had expected to be building and programming the first few robots myself whilst my son got the hang of it all. However, that was not the case. &lt;/P&gt;
&lt;P&gt;Here’s the robot that is currently built with our kit.&lt;/P&gt;
&lt;P&gt;&lt;A href="$MindstormsCrawlerwithFan11.png"&gt;&lt;/A&gt;&lt;IMG src="http://images.quickblogcast.com/83489-72989/Mindstorms Crawler with Fan_thumb.png?a=65"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Not very impressive I hear you say? Well take the following into consideration:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;It was built in just over 1 hour with no instructions – including the programming &lt;/LI&gt;
&lt;LI&gt;It can crawl quite effectively – moving forward and backward with no wheels &lt;/LI&gt;
&lt;LI&gt;It is programmed to stop when it nears a wall (using Ultrasonic sensor) &lt;/LI&gt;
&lt;LI&gt;It has two touch sensors that operate the linked fan as programmed with two speed settings &lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;I wasn’t involved at all&lt;/STRONG&gt; &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;It is a real testament to the Mindstorms kit that a child who has yet to learn multiplication at school (several years under the kits “official” minimum age) could put all this together himself. The bundled software for programming the robot really is that easy to use. &lt;/P&gt;
&lt;P&gt;My only involvement was to write a simple Window Mobile application that could be used to control the robot. This is done via an exposed Direct Command API supported by the NXT 2.0 block’s Bluetooth interface.&lt;/P&gt;
&lt;P&gt;This kit is already a winner in our house. There’s even a good blog for it &lt;A href="http://thenxtstep.blogspot.com/"&gt;here&lt;/A&gt;.&lt;/P&gt;</description><category>Development</category><category>General</category><comments>http://blog.spencen.com/2010/01/14/lego-mindstorms-nxt-20.aspx#Comments</comments><guid isPermaLink="false">8facb288-dca9-4613-93e5-8fa346c998f0</guid><pubDate>Thu, 14 Jan 2010 13:39:00 GMT</pubDate></item><item><title>A New Aussie Flavoured Podcast</title><link>http://blog.spencen.com/2009/12/22/a-new-aussie-flavoured-podcast.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;img style="margin: 0px 0px 0px 10px; display: inline" align="right" src="http://www.noisetosignal.com.au/franklyspeaking/wp-content/assets/logo_speaker_300.jpg" width="240" height="240" /&gt;I’ve just started listened to the new &lt;em&gt;&lt;a href="http://noisetosignal.com.au/franklyspeaking/"&gt;Frankly Speaking&lt;/a&gt;&lt;/em&gt; podcast created by Australian Microsoft DPEs &lt;a href="http://blogs.msdn.com/acoat"&gt;Andrew Coates&lt;/a&gt; and &lt;a href="http://delicategeniusblog.com/"&gt;Michael Kordahi&lt;/a&gt;. The guys are new to podcasting – and in the early episodes it shows – the sound levels are all over the place. What is great about the podcast however, is that it has a really Aussie flavour – for instance did you know:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Australia currently has around 115 MVPs&lt;/li&gt;    &lt;li&gt;Azure will be officially launched in Australia in March&lt;/li&gt;    &lt;li&gt;Shane Morris (UX guy) has career aspirations&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;What’s great about the podcast&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;The Aussie bent – Australian guests, what’s happening in Microsoft Australia etc.&lt;/li&gt;    &lt;li&gt;Laid back, conversational style – I class it an “easy listening” podcast as compared to something like &lt;em&gt;&lt;a href="http://www.se-radio.net/"&gt;Software Engineering Radio&lt;/a&gt;.&lt;/em&gt;&lt;/li&gt;    &lt;li&gt;The funny Australian accents – hey its a change from &lt;a href="http://david.gardiner.net.au/2009/08/podcasts-i-listening-too.html"&gt;most other podcasts I listen to&lt;/a&gt;.&lt;/li&gt;    &lt;li&gt;The album art – damn why can’t I come up with that stuff? Wonder if &lt;a href="http://blogs.msdn.com/shanemo/"&gt;ShaneMo&lt;/a&gt; had a hand in that?&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;What can be improved&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Sounds levels – seriously guys – within a single show the sound levels are all over the place. Even within a single conversation the levels vary widely – presumably as people move their heads instead of talking into the mic. The second show was so quiet I couldn’t hear it over the bus even with the volume turned to full!     &lt;br /&gt;Only fair to say though that each shows sound quality seems to be an improvement on the last, so the guys are learning fast.&lt;/li&gt;    &lt;li&gt;Missing property metadata, they’ve got Track number, Year and Artists but I’d also like to see:     &lt;br /&gt;Genre: Podcast (not “Other”)      &lt;br /&gt;Album: Frankly Speaking&lt;/li&gt; &lt;/ul&gt;</description><category>General</category><comments>http://blog.spencen.com/2009/12/22/a-new-aussie-flavoured-podcast.aspx#Comments</comments><guid isPermaLink="false">4bc2863b-1dc0-4aa4-8239-7e0c12e22b60</guid><pubDate>Tue, 22 Dec 2009 12:40:31 GMT</pubDate></item><item><title>Developing for Windows Mobile &amp;ndash; XAML for Win Forms</title><link>http://blog.spencen.com/2009/11/06/developing-for-windows-mobile-ndash-xaml-for-win-forms.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Many years ago (2004/5?) I was given the task of writing a XAML engine for System.Windows.Forms. It was a great experience and to do the job properly (I hope) it took quite some time. It had support for most of what’s available in WPF’s XAML – namespaces, markup extensions, attached properites (IExtenderProviders in WinForms speak), type converters, late bound binding, styles, triggers etc. plus a bunch of stuff that isn’t - #include, using parameterized constructors, simplified referencing etc.&lt;/p&gt;  &lt;p&gt;In my Windows Mobile UI Framework the idea of having the capability of defining screens in XAML was kind of an afterthought. I had truly forgotten how painful it is to define UI’s programmatically. I’ve also never been a fan of form designers – I think they are slow, in-accurate and generate hard to maintain code/XAML. To this day I do 90% of my XAML using an XML editor (VS or Kaxaml).&lt;/p&gt;  &lt;p&gt;So as per my &lt;a href="http://blog.spencen.com/2009/10/27/developing-for-windows-mobile-ndash-mobile-xaml.aspx"&gt;last post&lt;/a&gt; I whipped up a very simplified XAML parser/renderer to use with my Mobile UI Framework. However, the latest control that I added to the framework was &lt;strong&gt;FormHost&lt;/strong&gt; which allows a System.Windows.Forms control to be hosted within a &lt;strong&gt;DrawingElement&lt;/strong&gt; (my UI base class). Of course when I say “hosted” the FormHost is really just acting as a placeholder so that the hosted control can be positioned during the render pass.&lt;/p&gt;  &lt;p&gt;Here’s the code I had to add for FormHost:&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;using &lt;/span&gt;System;
&lt;span style="color: blue"&gt;using &lt;/span&gt;System.Drawing;
&lt;span style="color: blue"&gt;using &lt;/span&gt;System.Windows.Forms;

&lt;span style="color: blue"&gt;using &lt;/span&gt;Spencen.Mobile.UI.Primitives;

&lt;span style="color: blue"&gt;namespace &lt;/span&gt;Spencen.Mobile.UI.Controls
{
    &lt;span style="color: blue"&gt;public class &lt;/span&gt;&lt;span style="color: #2b91af"&gt;FormHost &lt;/span&gt;: &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #2b91af"&gt;DrawingContainer
    &lt;/span&gt;{
        &lt;span style="color: blue"&gt;private &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Control &lt;/span&gt;_hostControl;

        &lt;span style="color: blue"&gt;public &lt;/span&gt;FormHost( &lt;span style="color: #2b91af"&gt;IDrawingHost &lt;/span&gt;host ) : &lt;span style="color: blue"&gt;base&lt;/span&gt;( host )
        {
            _hostControl = host &lt;span style="color: blue"&gt;as &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Control&lt;/span&gt;;
            &lt;span style="color: blue"&gt;if &lt;/span&gt;( _hostControl == &lt;span style="color: blue"&gt;null &lt;/span&gt;)
                &lt;span style="color: blue"&gt;throw new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;ArgumentException&lt;/span&gt;(&lt;br /&gt;                   &lt;span style="color: #a31515"&gt;&amp;quot;FormHost must have an IDrawingHost that is a Windows.Forms.Control.&amp;quot;&lt;/span&gt;, &lt;span style="color: #a31515"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;);

            &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: green"&gt;// By default we have no background or border
            &lt;/span&gt;Background = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;SolidBrush&lt;/span&gt;( &lt;span style="color: #2b91af"&gt;Color&lt;/span&gt;.Transparent );
            Stroke = &lt;span style="color: blue"&gt;null&lt;/span&gt;;
        }

        &lt;span style="color: blue"&gt;public &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Control &lt;/span&gt;HostedControl { &lt;span style="color: blue"&gt;get&lt;/span&gt;; &lt;span style="color: blue"&gt;set&lt;/span&gt;; }

        &lt;span style="color: blue"&gt;public override bool &lt;/span&gt;SupportsRotation { &lt;span style="color: blue"&gt;get &lt;/span&gt;{ &lt;span style="color: blue"&gt;return false&lt;/span&gt;; } }

        &lt;span style="color: blue"&gt;protected override void &lt;/span&gt;OnRender( &lt;span style="color: #2b91af"&gt;GraphicsContext &lt;/span&gt;context )
        {
            &lt;span style="color: blue"&gt;base&lt;/span&gt;.OnRender( context );

            &lt;span style="color: blue"&gt;var &lt;/span&gt;transformedBounds = TransformedBounds( context );

            &lt;span style="color: blue"&gt;if &lt;/span&gt;( !_hostControl.Controls.Contains( HostedControl ) )
                _hostControl.Controls.Add( HostedControl );
            
            &lt;span style="color: blue"&gt;var &lt;/span&gt;newLocation = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( transformedBounds.Left, transformedBounds.Top );
            &lt;span style="color: blue"&gt;if &lt;/span&gt;( newLocation != HostedControl.Location )
                HostedControl.Location = newLocation;
            &lt;span style="color: blue"&gt;var &lt;/span&gt;newSize = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Size&lt;/span&gt;( transformedBounds.Width + 1, transformedBounds.Height + 1);
            &lt;span style="color: blue"&gt;if &lt;/span&gt;( newSize != HostedControl.Size )
                HostedControl.Size = newSize;
        }
    }
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;So pretty simple – but what was extra nice was the fact that it meant I could immediately declare my hosted System.Windows.Forms controls using XAML without any changes to the XAML parser/renderer at all.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color: #a31515"&gt;xml &lt;/span&gt;&lt;span style="color: red"&gt;version&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;1.0&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;encoding&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;utf-8&lt;/span&gt;&amp;quot; &lt;/font&gt;&lt;/font&gt;&lt;span style="color: blue"&gt;&lt;font size="1" face="Verdana"&gt;?&amp;gt;
&amp;lt;&lt;/font&gt;&lt;/span&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #a31515"&gt;View
  &lt;/span&gt;&lt;span style="color: red"&gt;xmlns&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;http://mobileui.codeplex.com/v1&lt;/span&gt;&amp;quot;
  &lt;span style="color: red"&gt;xmlns:x&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;&lt;a href="http://mobileui.codeplex.com/xaml&amp;quot;"&gt;http://mobileui.codeplex.com/xaml&lt;/span&gt;&amp;quot;
&lt;/a&gt;  &lt;span style="color: red"&gt;xmlns:WinForms&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;System.Windows.Forms,System.Windows.Forms&lt;/span&gt;&amp;quot;
  &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Unbound&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;  
  &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;DrawingPanel &lt;/span&gt;&lt;span style="color: red"&gt;x:Name&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;container&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Unbound&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Background&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;{null}&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;

    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextElement &lt;/span&gt;&lt;span style="color: red"&gt;Text&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Text&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;150,60&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;AutoSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;True&lt;/span&gt;&amp;quot;/&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt; &lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;RectangleElement &lt;/span&gt;&lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;50,80&lt;/span&gt;&amp;quot;/&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;EllipseElement &lt;/span&gt;&lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;40,70&lt;/span&gt;&amp;quot;/&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;RegularPolygonElement &lt;/span&gt;&lt;span style="color: red"&gt;NumberOfSides&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;6&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;80,80&lt;/span&gt;&amp;quot;/&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;RegularPolygonElement &lt;/span&gt;&lt;span style="color: red"&gt;NumberOfSides&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;3&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;90,70&lt;/span&gt;&amp;quot;/&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;br /&gt;    &lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;RegularPolygonElement &lt;/span&gt;&lt;span style="color: red"&gt;NumberOfSides&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;8&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;80,80&lt;/span&gt;&amp;quot;/&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Star &lt;/span&gt;&lt;span style="color: red"&gt;NumberOfPoints&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;5&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;80,80&lt;/span&gt;&amp;quot;/&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;
    &amp;lt;!-- &lt;/span&gt;&lt;span style="color: green"&gt;Just to spice things up - here's some WinForms controls - just don't expect them to rotate! &lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;--&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;FormHost &lt;/span&gt;&lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;240,40&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;FormHost.HostedControl&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;WinForms:TextBox &lt;/span&gt;&lt;span style="color: red"&gt;Text&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Hello WinForms&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Multiline&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;True&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;BackColor&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;240,255,240&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;/&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;FormHost.HostedControl&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;FormHost&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;FormHost &lt;/span&gt;&lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;240,80&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;FormHost.HostedControl&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;WinForms&lt;img src="http://blog.spencen.com/emoticons/tongue.png" border="0" /&gt;anel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;WinForms&lt;img src="http://blog.spencen.com/emoticons/tongue.png" border="0" /&gt;anel.Controls&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;WinForms:RadioButton &lt;/span&gt;&lt;span style="color: red"&gt;Checked&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;True&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Text&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Is WinForms?&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;BackColor&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;255,255,223&lt;/span&gt;&amp;quot; &lt;br /&gt;                                               &lt;span style="color: red"&gt;Dock&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Top&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Height&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;20&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;/&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;WinForms:RadioButton &lt;/span&gt;&lt;span style="color: red"&gt;Checked&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;True&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Text&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Is MobileUI?&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;BackColor&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;255,255,223&lt;/span&gt;&amp;quot; &lt;br /&gt;                                               &lt;span style="color: red"&gt;Dock&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Fill&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;/&amp;gt;
          &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;WinForms&lt;img src="http://blog.spencen.com/emoticons/tongue.png" border="0" /&gt;anel.Controls&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;WinForms&lt;img src="http://blog.spencen.com/emoticons/tongue.png" border="0" /&gt;anel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;FormHost.HostedControl&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;FormHost&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;

  &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;DrawingPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
  
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;View&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;&lt;img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="MobileUI_Screenshot 5" border="0" alt="MobileUI_Screenshot 5" src="http://blog.spencen.com/images/83489-72989/MobileUI_Screenshot%205_1.png" width="240" height="400" /&gt;&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>Windows Phone</category><comments>http://blog.spencen.com/2009/11/06/developing-for-windows-mobile-ndash-xaml-for-win-forms.aspx#Comments</comments><guid isPermaLink="false">2452195b-d550-41ff-8dd3-ba0fc37a6ca3</guid><pubDate>Fri, 06 Nov 2009 14:51:27 GMT</pubDate></item><item><title>Windows Mobile 6.5 Update for HTC Touch Diamond 2 (SE Asia)</title><link>http://blog.spencen.com/2009/11/06/windows-mobile-65-update-for-htc-touch-diamond-2-se-asia.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Tonight I downloaded and installed the official &lt;a href="http://www.htc.com/sea/SupportViewNews.aspx?dl_id=737&amp;amp;news_id=319"&gt;Windows Mobile 6.5 ROM (SE Asia)&lt;/a&gt; on my &lt;a href="http://blog.spencen.com/2009/06/24/htc-touch-diamond2.aspx"&gt;HTC Touch Diamond 2&lt;/a&gt;. I’d previously used &lt;a href="http://myphone.microsoft.com"&gt;Microsoft My Phone&lt;/a&gt; software to back up all my personal data (excluding SD card) to the cloud. The re-install process worked flawlessly putting ringtones, contacts, &lt;strike&gt;favourites&lt;/strike&gt;, text message history etc. back just the way they were prior to flashing the ROM – very nice.&lt;/p&gt;  &lt;p&gt;However, I’d like to see My Phone do more, specifically:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Backup/restore mail settings (most importantly POP) &lt;/li&gt;    &lt;li&gt;Backup/restore bookmarks for Opera Browser (default on HTC device) – even if converted to IE8 favourites &lt;/li&gt;    &lt;li&gt;Merge duplicate contacts – the option is there on the website – but it seems to just check for exact duplicates. I want it to merge details for entries that have the same name, e.g. contact listing with IM details, another with phone, yet another with email – merged into a single contact. &lt;/li&gt;    &lt;li&gt;Less obnoxious advertisements on the website. &lt;/li&gt; &lt;/ul&gt;</description><category>Windows Phone</category><comments>http://blog.spencen.com/2009/11/06/windows-mobile-65-update-for-htc-touch-diamond-2-se-asia.aspx#Comments</comments><guid isPermaLink="false">242bf249-6e6e-4c22-a95e-cbc4274c52c2</guid><pubDate>Fri, 06 Nov 2009 14:05:39 GMT</pubDate></item><item><title>Developing for Windows Mobile &amp;ndash; Mobile XAML?</title><link>http://blog.spencen.com/2009/10/27/developing-for-windows-mobile-ndash-mobile-xaml.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I’ve now included a “first cut” XAML parser (ultra simplistic) within v0.2 of my &lt;a href="http://mobileui.codeplex.com/"&gt;Mobile UI Framework&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Allows me to convert:&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color: #a31515"&gt;xml &lt;/span&gt;&lt;span style="color: red"&gt;version&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;1.0&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;encoding&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;utf-8&lt;/span&gt;&amp;quot; &lt;/font&gt;&lt;/font&gt;&lt;span style="color: blue"&gt;&lt;font size="1" face="Verdana"&gt;?&amp;gt;
&amp;lt;&lt;/font&gt;&lt;/span&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #a31515"&gt;DrawingPanel 
  &lt;/span&gt;&lt;span style="color: red"&gt;xmlns&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;http://mobileui.codeplex.com/v1&lt;/span&gt;&amp;quot; 
  &lt;span style="color: red"&gt;xmlns:sysDrawing&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;System.Drawing&lt;/span&gt;&amp;quot;
  &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Unbound&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;

  &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;GradientRectangleElement &lt;/span&gt;&lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Unbound&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;StartColor&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;240,240,240&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;EndColor&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;20&lt;span style="color: blue"&gt;0,80,0&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;/&amp;gt;

  &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextElement &lt;/span&gt;&lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;400,500&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Foreground&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;200,200,200&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Text&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Demo&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Angle&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;315&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;AutoSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;True&lt;/span&gt;&amp;quot; &lt;br /&gt;                      &lt;span style="color: red"&gt;HorizontalAlignment&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Center&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;VerticalAlignment&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Center&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;/&amp;gt;
  
  &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;DrawingPanel &lt;/span&gt;&lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Unbound&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Background&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;{null}&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;DrawingPanel.LayoutEngine&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;StackLayout &lt;/span&gt;&lt;span style="color: red"&gt;Margin&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;8,4&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Padding&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;4&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;/&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;DrawingPanel.LayoutEngine&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;

    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ButtonBar &lt;/span&gt;&lt;span style="color: red"&gt;Text&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Animations&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;SecondaryText&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Animate properties of graph primitives&lt;/span&gt;&amp;quot; &lt;br /&gt;                     &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;UnboundAxis, 80&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Background&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;{null}&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;/&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ButtonBar &lt;/span&gt;&lt;span style="color: red"&gt;Text&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Trasitions&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;SecondaryText&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Optimized bitmap animations&lt;/span&gt;&amp;quot; &lt;br /&gt;                     &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;UnboundAxis, 80&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Background&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;{null}&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;/&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ButtonBar &lt;/span&gt;&lt;span style="color: red"&gt;Text&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Primitives&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;SecondaryText&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Polygon, Ellipse, Image, Text&lt;/span&gt;&amp;quot; &lt;br /&gt;                     &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;UnboundAxis, 80&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Background&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;{null}&lt;/span&gt;&amp;quot; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;/&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ButtonBar &lt;/span&gt;&lt;span style="color: red"&gt;Text&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Behaviours&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;SecondaryText&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Drag with slide&lt;/span&gt;&amp;quot; &lt;br /&gt;                     &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;UnboundAxis, 80&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Background&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;{null}&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Command&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;{Binding DragDemoCommand}&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;/&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ButtonBar &lt;/span&gt;&lt;span style="color: red"&gt;Text&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Layout&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;SecondaryText&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;Stack, Wrap and Radial&lt;/span&gt;&amp;quot; &lt;br /&gt;                      &lt;span style="color: red"&gt;DesiredSize&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;UnboundAxis, 80&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Background&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;{null}&lt;/span&gt;&amp;quot; &lt;span style="color: red"&gt;Command&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;&amp;quot;&lt;span style="color: blue"&gt;{Binding LayoutDemoCommand}&lt;/span&gt;&amp;quot;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;/&amp;gt;

  &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;DrawingPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;

&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;DrawingPanel&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Into:&lt;/p&gt;
&lt;img src="http://i3.codeplex.com/Project/Download/FileDownload.aspx?ProjectName=mobileui&amp;amp;DownloadId=89373" /&gt; 

&lt;p&gt;I was getting really sick of doing it the “old fashioned way” &lt;img src="http://blog.spencen.com/emoticons/smile.png" border="0" /&gt;&lt;/p&gt;

&lt;p&gt;So far I support simple value type converters (float, bool), pen and brush converters, size and padding converters, resource naming (x:Name), complex properties (DrawingPanel.LayoutEngine) and loading types from other CLR namespaces via XML namespace (xmlns:sysDrawing).&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>Windows Phone</category><comments>http://blog.spencen.com/2009/10/27/developing-for-windows-mobile-ndash-mobile-xaml.aspx#Comments</comments><guid isPermaLink="false">713ce12d-b84d-433d-81dc-bcb4152608b5</guid><pubDate>Mon, 26 Oct 2009 15:39:59 GMT</pubDate></item><item><title>Microsoft&amp;rsquo;s Pressure Sensitive Keyboard</title><link>http://blog.spencen.com/2009/10/22/microsoftrsquos-pressure-sensitive-keyboard.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I want one of these!&lt;/p&gt;  &lt;p&gt;&lt;a title="http://channel9.msdn.com/posts/LauraFoy/Pressure-Sensitive-Keyboards/" href="http://channel9.msdn.com/posts/LauraFoy/Pressure-Sensitive-Keyboards/"&gt;http://channel9.msdn.com/posts/LauraFoy/Pressure-Sensitive-Keyboards/&lt;/a&gt;&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2009/10/22/microsoftrsquos-pressure-sensitive-keyboard.aspx#Comments</comments><guid isPermaLink="false">40db044b-ff1c-4978-a183-7df4d4dc0e68</guid><pubDate>Thu, 22 Oct 2009 11:52:39 GMT</pubDate></item><item><title>Developing for Windows Mobile &amp;ndash; Guru Meditation</title><link>http://blog.spencen.com/2009/10/09/developing-for-windows-mobile-ndash-guru-meditation.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;P&gt;I’ve been working away for a few nights now trying to put together a simple framework for building user interfaces on a Windows Mobile device. It’s only taken a few nights to build something that I’m pretty happy with… and I was thinking of maybe even posting some source code.&lt;/P&gt;
&lt;P&gt;It was at this moment of course that I had a visit from my Inner Guru. You know the one… that little voice in your head that sniggers impolitely whenever you struggle to convert a loop into a LINQ expression. Or when you’re hacking out some prototype code and you need to new up an instance. You know that really its going to need an IOC container, you look around, no-ones watching… in goes the explicit “new Foo()”. Immediately your Inner Guru can be heard muttering to themselves, “tut… tut.. will he &lt;EM&gt;never&lt;/EM&gt; learn…”.&lt;/P&gt;
&lt;P&gt;Anyhow, my Inner Guru popped in for a visit just the other day and we had a quick chat about the work I’d been doing on my mobile framework. The conversation went something like this:&lt;/P&gt;
&lt;BLOCKQUOTE&gt;
&lt;P&gt;&lt;STRONG&gt;Me&lt;/STRONG&gt;: Hey – check out this framework I’ve been building for Windows Mobile – pretty cool huh?&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Guru&lt;/STRONG&gt;: Hmm… yes it appears you’ve made quite some progress.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Me&lt;/STRONG&gt;: Yeah – look it can do animations.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Guru&lt;/STRONG&gt;: Very impressive. Did you have trouble using the DirectX libraries?&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Me&lt;/STRONG&gt;: Ah well, err no it’s just using GDI.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Guru&lt;/STRONG&gt;: Ah, I see. Does that give you full hardware acceleration on the device?&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Me&lt;/STRONG&gt;: Um… no I don’t think so.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Guru&lt;/STRONG&gt;: Ah, I see. Commendable that you have support for an opacity on each element.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Me&lt;/STRONG&gt;: Yeah, well I mean no. It seemed like a good idea at the time but I haven’t done that yet.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Guru&lt;/STRONG&gt;: Ah, I see. It appears all objects support using a RotateTransform?&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Me&lt;/STRONG&gt;: Yeah, well I mean no. I couldn’t figure out how to rotate images an arbitrary amount with decent performance.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Guru&lt;/STRONG&gt;: Ah, I see. I notice that your transforms all inherit from a base class which of course must perform the Matrix calculations.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Me&lt;/STRONG&gt;: Yeah, well actually no. I mean there is a base class but I haven’t bothered implementing the transforms using Matrix math – they’re just, you-know, hard coded.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Guru&lt;/STRONG&gt;: Ah, I see. It seems you’ve done some work building the framework for a layout engine that can be plugged into any container control. Seems a bit WinForms’ish to me, not very WPF like.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Me&lt;/STRONG&gt;: Well I didn’t think it was so bad, although I haven’t actually written that bit yet.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Guru&lt;/STRONG&gt;: Ah, I see. So no actual layout panels yet, not even the most simple stack panel?&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Me&lt;/STRONG&gt;: Err, well no – but it wouldn’t be hard to add.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Guru&lt;/STRONG&gt;: But you haven’t done it – even though it wouldn’t be hard.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Me&lt;/STRONG&gt;: Well no.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Guru&lt;/STRONG&gt;: Hmm.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Me&lt;/STRONG&gt;: I was thinking of posting the source code.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Guru&lt;/STRONG&gt;: I see. So despite the obvious architectural flaws, the missing classes, the lacklustre performance, the questionable code formatting you feel it adequate for public viewing, or perhaps that may be ridicule? I see you’re still using foreach loops – can’t quite seem to wrap your head around LINQ can you dear boy?&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;BLOCKQUOTE&gt;
&lt;P&gt;&lt;STRONG&gt;Me&lt;/STRONG&gt;: Umm…&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;Fortunately it was at this point that my Inner Guru hit an untrapped exception deep in his runtime. The following image began blinking away in my head. &lt;/P&gt;&lt;IMG src="http://upload.wikimedia.org/wikipedia/commons/d/db/Guru_meditation.gif"&gt; 
&lt;P&gt;I suppressed an evil chuckle and posted the code: &lt;A href="http://mobileui.codeplex.com"&gt;http://mobileui.codeplex.com&lt;/A&gt;&lt;/P&gt;</description><category>Development</category><category>.NET</category><category>Windows Phone</category><category>General</category><comments>http://blog.spencen.com/2009/10/09/developing-for-windows-mobile-ndash-guru-meditation.aspx#Comments</comments><guid isPermaLink="false">1490d774-5864-4704-9844-daaa6bde5878</guid><pubDate>Thu, 08 Oct 2009 14:51:33 GMT</pubDate></item><item><title>Developing for Windows Mobile &amp;ndash; Marketplace Sign-up (Part 2)</title><link>http://blog.spencen.com/2009/09/29/developing-for-windows-mobile-ndash-marketplace-signup-part-2.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Contacted GeoTrust again and got an immediate verification over the phone. Was told that the Microsoft website would update the verified status within a few minutes. Several hours later… still waiting…&lt;/p&gt;  &lt;p&gt;Decided to fill in the &lt;a href="http://developer.windowsmobile.com/Help.aspx?id=90e41e47-0a39-4c40-88be-92df843e2ef6"&gt;Payment section&lt;/a&gt; of the User Profile. Got to learning about banking Routing Numbers (not applicable within Australia) and banking &lt;a href="http://swift-codes.blogspot.com/2008/01/australian-bank-swift-codes.html"&gt;Swift Codes&lt;/a&gt;. Have no idea whether the details are filled in correctly, but I’m guessing any income will be forwarded on to some lucky individual.&lt;/p&gt;  &lt;p&gt;Tried asking the local Microsoft Mobile contact for some assistance. Took a week to reply and told me nothing. They do have a &lt;a href="http://www.codemasons.com.au/"&gt;lovely web site&lt;/a&gt; though – no original content mind – but it is pretty.&lt;/p&gt;  &lt;p&gt;Maybe its time to face that fact that Windows Mobile 6.5 is a “lipstick on a pig” release and I should just hold out for &lt;a href="http://silverlight.net/learn/mobile/"&gt;Silverlight&lt;/a&gt; on &lt;a href="http://wmpoweruser.com/?p=8162"&gt;Windows Phone 7&lt;/a&gt;? At least by that stage (mid 2010?) I may have managed to complete the registration process…&lt;/p&gt;</description><category>Windows Phone</category><category>General</category><comments>http://blog.spencen.com/2009/09/29/developing-for-windows-mobile-ndash-marketplace-signup-part-2.aspx#Comments</comments><guid isPermaLink="false">0dccd46e-ed63-4cd8-a880-49c1517e44a3</guid><pubDate>Tue, 29 Sep 2009 14:03:55 GMT</pubDate></item><item><title>Fun with Microsoft Tag</title><link>http://blog.spencen.com/2009/09/25/fun-with-microsoft-tag.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Not convinced on the business case for these tags yet – but they are fun to play with. Here’s one I created…&lt;/p&gt;  &lt;p&gt;&lt;img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="Nigel&amp;#39;s_Blog_MSTag" border="0" alt="Nigel&amp;#39;s_Blog_MSTag" src="http://blog.spencen.com/images/83489-72989/Nigel's_Blog_MSTag_3.png" width="334" height="279" /&gt; &lt;/p&gt;  &lt;p&gt;The &lt;a href="http://www.microsoft.com/tag/"&gt;MsTag site&lt;/a&gt; has some pretty cool examples where rather than just construct the tag out of triangles they &lt;a href="http://www.microsoft.com/tag/content/overview/CustomTags.aspx"&gt;merge the tag data&lt;/a&gt; into an existing graphic. Nice!&lt;/p&gt; &lt;img src="http://www.microsoft.com/tag/images/BalloonTag.jpg" /&gt; &lt;img src="http://www.microsoft.com/tag/images/JellyBeanTag.jpg" /&gt;</description><category>General</category><comments>http://blog.spencen.com/2009/09/25/fun-with-microsoft-tag.aspx#Comments</comments><guid isPermaLink="false">1ea497fa-b0c7-4e3d-8861-f7ca65fe80ac</guid><pubDate>Fri, 25 Sep 2009 01:05:53 GMT</pubDate></item><item><title>Developing for Windows Mobile &amp;ndash; Marketplace Sign-up</title><link>http://blog.spencen.com/2009/09/25/developing-for-windows-mobile-ndash-marketplace-signup.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Windows%20Marketplace.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" title="Windows Marketplace" border="0" alt="Windows Marketplace" align="right" src="http://blog.spencen.com/images/83489-72989/Windows%20Marketplace_thumb.png" width="169" height="240" /&gt;&lt;/a&gt; I’ve decided it would be fun and educational to launch a product through the soon to be released &lt;a href="http://developer.windowsmobile.com/Marketplace.aspx"&gt;Windows Phone Marketplace&lt;/a&gt;. Obviously all the major phone/mobile OS vendors have already beaten Microsoft to market – so you would expect them to have taken some of the learnings from these ventures onboard. In other words – I expect them to do a good job of this – both from a customer and developer perspective.&lt;/p&gt;  &lt;p&gt;The following is a summary of my experiences in getting an application into the Marketplace thus far… &lt;/p&gt;  &lt;h4&gt;Sign-up Process&lt;/h4&gt;  &lt;p&gt;Microsoft have been very crafty with their Marketplace registration process. Its obviously designed to weed out those individuals who are anything less that desperate to get their product into the app store. If you can answer “no” to two or more of the questions below then I suggest thinking twice before you consider signing-up.&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Do you enjoy trawling &lt;a href="http://www.irs.gov/individuals/article/0,,id=96287,00.html"&gt;IRS websites&lt;/a&gt; to learn about the various US tax forms? &lt;/li&gt;    &lt;li&gt;Do you enjoy reading about country tax laws and specific treaty clauses? &lt;/li&gt;    &lt;li&gt;Do you want to know the difference between &lt;a href="http://www.irs.gov/individuals/article/0,,id=96287,00.html#how"&gt;SSNs and ITINs&lt;/a&gt;? &lt;/li&gt;    &lt;li&gt;Do you have easy access to a non-expired passport else birth certificate plus other government photo id? &lt;/li&gt;    &lt;li&gt;Do you enjoy &lt;a href="http://www.irs.gov/pub/irs-pdf/fw7.pdf"&gt;filling out paperwork&lt;/a&gt; and posting (yes snail-mail) your documents overseas? &lt;/li&gt;    &lt;li&gt;Do you mind taking a PDF signed by a Microsoft rep, on Microsoft letterhead, modifying it yourself and then sending it off to the IRS as an official sanction for an ITIN? [What is the point of this step?] &lt;/li&gt;    &lt;li&gt;Are you really expecting to make a killer mobile app that will make this all worthwhile? &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;[Note: If you are a US taxpayer already then most of this will be irrelevant and the process will be a breeze.]&lt;/p&gt;  &lt;p&gt;Of course I answered “no” to all of these but as I stated before I’m writing the whole thing off as an “educational experience”. Nothing worthwhile is meant to be easy… right?&lt;/p&gt;  &lt;p&gt;[Note: There is actually a pretty good walkthrough/slideshow of the registration process &lt;a href="http://www.slideshare.net/mymobilehome/windows-marketplacefor-mobile-developer-registration-walk-through-081209-pr"&gt;here&lt;/a&gt;.]&lt;/p&gt;  &lt;h4&gt;Artwork&lt;/h4&gt;  &lt;p&gt;If you got through the sign-up process don’t think you’ve beaten them. You now have to create your application icon/logo in a wide variety of resolutions (dpi) and sizes. Then you have to tweak the install process to pick out the right imagery for the particular device its being installed on. When I say tweak – I mean write some C code and inject that into the installer. OK – maybe that’s a little unfair – but go check out some of the following blog posts and their related comments.&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;a title="http://windowsteamblog.com/blogs/windowsphone/archive/2009/07/24/creating-custom-icons-for-windows-mobile-6-5.aspx" href="http://windowsteamblog.com/blogs/windowsphone/archive/2009/07/24/creating-custom-icons-for-windows-mobile-6-5.aspx"&gt;http://windowsteamblog.com/blogs/windowsphone/archive/2009/07/24/creating-custom-icons-for-windows-mobile-6-5.aspx&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;&lt;a title="http://windowsteamblog.com/blogs/windowsphone/archive/2009/08/11/using-custom-icons-in-windows-mobile-6-5.aspx" href="http://windowsteamblog.com/blogs/windowsphone/archive/2009/08/11/using-custom-icons-in-windows-mobile-6-5.aspx"&gt;http://windowsteamblog.com/blogs/windowsphone/archive/2009/08/11/using-custom-icons-in-windows-mobile-6-5.aspx&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;&lt;a title="http://windowsteamblog.com/blogs/windowsphone/pages/start-screen-png-icon-faq.aspx" href="http://windowsteamblog.com/blogs/windowsphone/pages/start-screen-png-icon-faq.aspx"&gt;http://windowsteamblog.com/blogs/windowsphone/pages/start-screen-png-icon-faq.aspx&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;As one tongue-in-cheek commenter put it:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;“Was there some sort of requirement to do this in the most developer-hostile way possible, or was that just a happy accident?”&lt;/p&gt; &lt;/blockquote&gt;  &lt;h4&gt;Getting Verified&lt;/h4&gt;  &lt;p&gt;During the sign-up process an email verification is sent out to you by the third-party identity verification company (&lt;a href="http://www.geotrust.com"&gt;GeoTrust&lt;/a&gt;) that are issuing the code-signing certificates. Make sure you respond to this email immediately because it takes a week or two after that for their poor over-worked web server to send out the next email which actually asks you to provide some credentials.&lt;/p&gt;  &lt;p&gt;The good news is that you can supply these credentials back to them via email (unlike the IRS).&lt;/p&gt;  &lt;p&gt;The bad news is that their systems are a little flaky and four days later they send your exactly the same email by mistake. Luckily their online chat staff seem to be a little more competent than their computer systems and will tell you to ignore the second email whilst they manually forward your details on to the next verification step.&lt;/p&gt;  &lt;p&gt;I’m still waiting on a final outcome…&lt;/p&gt;  &lt;h4&gt;&lt;/h4&gt;  &lt;h4&gt;Submitting Your Application&lt;/h4&gt;  &lt;p&gt;This is the part of the process that I expected to be more challenging but unfortunately I haven’t gotten this far yet. Submitting your application to the Marketplace and have it pass all the internal testing. There are a number of tools that Microsoft have published which they use internally during the testing process. One such is &lt;a href="http://msdn.microsoft.com/en-us/library/bb158517.aspx"&gt;Hopper&lt;/a&gt; – which jumps between your application and others – presumably to detect your applications ability to quickly switch (i.e. for incoming call), to use minimal resources particularly whilst switched out and to be stable over a long (2 hour) period.&lt;/p&gt;  &lt;p&gt;One major gotcha with some of the test tools and those supplied with the Windows Mobile SDK is that they only work on 32 bit machines. This is annoying to say the least. They only 32 bit machine I have left is the new HP Netbook which my wife had grown rather fond of.&lt;/p&gt;  &lt;p&gt;Well – assuming I every get past the verification process I may post some further thoughts on submission and publication.&lt;/p&gt;</description><category>Development</category><category>Windows Phone</category><comments>http://blog.spencen.com/2009/09/25/developing-for-windows-mobile-ndash-marketplace-signup.aspx#Comments</comments><guid isPermaLink="false">ef9c4bf1-bd9c-453b-adb0-627b3e85f27d</guid><pubDate>Thu, 24 Sep 2009 15:05:22 GMT</pubDate></item><item><title>Tech-Ed Australia 2009 &amp;ndash; Day Two</title><link>http://blog.spencen.com/2009/09/11/teched-2009-ndash-day-two.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;First – here’s a few blog posts which cover some of the sessions I went to yesterday – but in much more detail. I’d recommend both blogs if you’re not already subscribed.&lt;/p&gt;  &lt;p&gt;Windows Mobile Marketplace - &lt;a title="http://www.techau.tv/blog/?p=2106" href="http://www.techau.tv/blog/?p=2106"&gt;http://www.techau.tv/blog/?p=2106&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Starting a Small Software Enterprise - &lt;a title="http://richardsbraindump.blogspot.com/2009/09/how-to-build-small-software-enterprise.html" href="http://richardsbraindump.blogspot.com/2009/09/how-to-build-small-software-enterprise.html"&gt;http://richardsbraindump.blogspot.com/2009/09/how-to-build-small-software-enterprise.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Everyone that attended yesterday’s session on the Windows Mobile Marketplace was also sent an e-mail this afternoon to let us know the information we were given regarding the regional pricing policy was incorrect. The price is actually an additional $10 per region, not $99 which I think it quite acceptable. See &lt;a href="http://blogs.msdn.com/lokeuei/archive/2009/09/09/clarification-submitting-apps-to-additional-regions-through-marketplace.aspx"&gt;Jame’s blog post&lt;/a&gt; for details.&lt;/p&gt;  &lt;h4&gt;DEV310 Make Some Magic! Shake, Flip and Flick Your Application for Windows Mobile 6.5! &lt;/h4&gt;  &lt;p&gt;This talk began with a brief introduction of marketplace and the Race to Market Challenge. This was then followed by a good discussion around new and emerging phone capabilities which included an interesting video of some folk who have developed a multi-touch resistive screen technology. This means you get multi-touch, pressure sensitivity and fine grain accuracy.&lt;/p&gt;  &lt;p&gt;Unfortunately for me a large part of the talk was based around how you can use the great open source &lt;a href="http://sensorapi.codeplex.com "&gt;sensor API&lt;/a&gt; to access hardware specific phone features such as accelerometers and light sensors.Would have been interesting for those that hadn’t seen it before – but otherwise just a run through of the provided demos apps.&lt;/p&gt;  &lt;p&gt;There was also a quick demonstration of how easy it is to write your own gesture recognition engine for pre 6.5 phones. Simple but very effective.&lt;/p&gt;  &lt;h4&gt;DEV350 What is new in VS2010 &amp;amp; .NET FX 4.0... and what should you be using in your next project?&lt;/h4&gt;  &lt;p&gt;The session speaker was Adam Cogan. I tried to listen to him… I really did. But he’s just so annoying!&lt;/p&gt;  &lt;p&gt;He spends all his time going off on irrelevant tangents or trying to amuse the audience. Then creeps through the content at a snails pace [hmm… can snails creep?]. His endless audience questions quickly become tiresome too. What makes it even more annoying is that he’s always getting/picking great topics for Tech-Ed sessions. Its just that the delivery is so poor. But then its probably just me. I I always give him a 1 on the review and if everybody else did the same he wouldn’t get the gigs right? Guess I’ll just notch it down to a personality clash – just hoping next year that he decides to do a talk on something less interesting. &lt;/p&gt;  &lt;p&gt;I didn’t manage to sit through this talk to the end. A good coffee was much more enjoyable.&lt;/p&gt;  &lt;h4&gt;DEV320 Visual Studio 2008 IDE Tips&lt;/h4&gt;  &lt;p&gt;I thought this session would be entertaining though I consider myself fairly familiar with Visual Studio’s IDE (I should be after 7 years) and wasn’t expecting too many surprises. Having said that I came away with at least 5 tips that I certainly intend to apply to my everyday workflow. We didn’t even have to take notes because Sara had &lt;a href="http://blogs.msdn.com/saraford/archive/2009/09/09/teched-australia-25-visual-studio-2008-ide-tips.aspx"&gt;posted them&lt;/a&gt; just prior to her talk. My favourites were 5, 15 (esp. when used to execute from find combo) and 22. Another great session by Sara.&lt;/p&gt;  &lt;h4&gt;SQL209 Project Gemini: Self-Service Business Intelligence&lt;/h4&gt;  &lt;p&gt;This was all new for me. Essentially it seems to be providing business analysis functionality using Excel as the design tool – very much end-user oriented. Support for Excel Services (via SharePoint), using Analysis Services transparently with scheduled updating of data sources. The demo was very well delivered I was impressed in how the convergence of Excel, SharePoint, Silverlight, Reporting Services and Analysis Services worked seamlessly to produce the output.&lt;/p&gt;  &lt;p&gt;To top it off the presenter showed how the project Gemini Excel add-in could sort and filter 101 million rows in real time (sub-second) even when running on a HP Mini netbook. All via an in-memory data engine and clever use of compression.&lt;/p&gt;  &lt;p&gt;Its being delivered as part of SQL 2008 R2 together with Office 2010.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>General</category><comments>http://blog.spencen.com/2009/09/11/teched-2009-ndash-day-two.aspx#Comments</comments><guid isPermaLink="false">9a7020a5-beb9-447b-b03f-f42d674ad8f3</guid><pubDate>Thu, 10 Sep 2009 15:19:04 GMT</pubDate></item><item><title>Tech-Ed Australia 2009</title><link>http://blog.spencen.com/2009/09/09/teched-australia-2009.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/IMAG0042_4.jpg"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; margin: 0px 0px 0px 15px; display: inline; border-top: 0px; border-right: 0px" title="IMAG0042" border="0" alt="IMAG0042" align="right" src="http://blog.spencen.com/images/83489-72989/IMAG0042_thumb_1.jpg" width="270" height="194" /&gt;&lt;/a&gt; I’m at Tech-Ed again this year (that’s three in a row!). Unfortunately this year I had to pay for the privilege since neither the company I’m currently working for nor Microsoft came to the party. Being an independent contractor I hardly expected my client to foot the bill – but I did try and get a ticket off of Microsoft – after all they footed the bill &lt;a href="http://blog.spencen.com/2008/08/28/tech-ed-2008.aspx"&gt;last year&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Day One of the main event has just finished and I was generally very impressed with the sessions I attended. I don’t really expect to learn a great deal at Tech-Ed. I figure its geared mainly towards corporate developers/IT pros who don’t necessarily have the passion/inclination to keep right up with emerging technologies and processes outside of company time. So if I don’t come to Tech-Ed to learn about the future of WPF, MVVM trends, ORMS and MEF then what am I doing here?&lt;/p&gt;  &lt;p&gt;Well – to answer that he’s a quick recount of the sessions I attended today.&lt;/p&gt;  &lt;h4&gt;Keynote&lt;/h4&gt;  &lt;p&gt;Pretty much on target this year. Some opening spiel about how now is a good time to be innovating which was further enforced by a HP representative. Then into some demos – Office 2010, a glimpse at VS 2010 CodePlex and Blend 3 and some Windows 7.&lt;/p&gt;  &lt;h4&gt;SOA303 A Lap around Microsoft Code Name &amp;quot;Oslo&amp;quot;&lt;/h4&gt;  &lt;p&gt;This Oslo thing has got to go somewhere… eventually… right? The presenter certainly did the best job I’ve heard yet of describing Oslo with demos of M, Quadrant and Intellipad. The talk was done well, the demos flawless but i still came away wondering whether this is really going to mature into a product that will be accepted in the real world.&lt;/p&gt;  &lt;h4&gt;DEV230 A Tour of CodePlex&lt;/h4&gt;  &lt;p&gt;I was one of the many that joined the &lt;a href="http://blogs.msdn.com/ceibner/archive/2009/08/05/sara-ford-is-coming-to-tech-ed-australia.aspx"&gt;petition&lt;/a&gt; to get Sara Ford to come down to Oz. I’m a relatively new subscriber to Sara’s blog – having caught the end of her VS 2008 tips and then her musings and tips for her new role as Codeplex PM. &lt;/p&gt;  &lt;p&gt;She seemed a little nervous in her part of the Keynote (looking up at 2500+ strangers) but in this session she was on fire. Its always a little awkward watching how the US speakers react to the subdued Australian audiences – but Sara didn’t miss a beat – she just steam-rolled ahead with a level of enthusiasm that was truly contagious.&lt;/p&gt;  &lt;p&gt;SaraFord.FanClub.Membership++;&lt;/p&gt;  &lt;p&gt;In fact - so inspired I’m going to post my latest project (Windows Mobile stuff) on Codeplex.&lt;/p&gt;  &lt;h4&gt;ARC203 How to build a small software enterprise from zero&lt;/h4&gt;  &lt;p&gt;I picked this session at the very last minute and as it turns out that was a choice very well made.&lt;/p&gt;  &lt;p&gt;The speaker was a Perth based book author ( {yawn} - so who isn’t) by the name of Joseph Albahari. But then I discover he also happens to be the author of &lt;a href="http://www.linqpad.net/"&gt;Linqpad&lt;/a&gt; (automatically elevating him to Legend status)! Just last week I was considering upgrading his most excellent utility to the premium version that includes &lt;strike&gt;intellisense&lt;/strike&gt; auto-completion.&lt;/p&gt;  &lt;p&gt;This talk was full of practical advice on how to make your own business out of developing software, with plenty of good examples from Joseph’s own journey with Linqpad. The slides, delivery and content in this talk were all first class.&lt;/p&gt;  &lt;h4&gt;WEB303 Free up the UX Bottleneck&lt;/h4&gt;  &lt;p&gt;This session was an overview of Sketchflow (within Expression Blend 3) by Shane Morris. Of all the sessions I attended today this one was the least rewarding. That was through no fault of Shane’s who covered the topic well – simply that I was already to familiar with the content. Particularly considering I’d seen Matt Morphet’s similar (dare I say superior) presentation at Remix and since then had a chance to play quite a bit with Sketchflow myself. Bad choice on my behalf – but then there wasn’t any other compelling content in this timeslot. &lt;/p&gt;  &lt;h4&gt;DEV260 Distributing and Monetizing Windows Mobile Applications through the Windows Marketplace for Mobile&lt;/h4&gt;  &lt;p&gt;I’ve been &lt;a href="http://blog.spencen.com/2009/08/05/developing-for-windows-mobile-ndash-composing-user-controls.aspx"&gt;messing around&lt;/a&gt; building a few simple apps for my &lt;a href="http://blog.spencen.com/2009/07/01/screen-resolution.aspx"&gt;new HTC Touch Diamond 2 device&lt;/a&gt; and have considered launching an app or two on Microsoft’s new Windows Mobile Marketplace. I’d even gone so far as to entering a couple of very simple entries into the &lt;a href="http://www.codemasons.com.au/"&gt;Codemason’s competition&lt;/a&gt;. &lt;/p&gt;  &lt;p&gt;This talk became a very frank discussion about the good and bad points of the new Marketplace. It was definitely worth going to and the speaker was very open about the shortfalls in the scheme. For instance, although the marketplace will allow apps to be delivered to any of 29 countries you have to target each country individually – effectively taking a US$99 hit for registering each application instance in each country. Seems to make sense to initially target any application for the US only – I can’t see Australia or New Zealand having the volume of Windows Mobile users to support anything but a very locale specific application.&lt;/p&gt;  &lt;p&gt;I got the general impression that most people leaving this talk would be less inclined to launch applications via Windows Mobile Marketplace. Seems a shame – like Microsoft almost got it right but then the marketing team came along at the last moment and crippled their solution.&lt;/p&gt;  &lt;h4&gt;Some random negatives:&lt;/h4&gt;  &lt;ul&gt;   &lt;li&gt;Seriously – invest in a schedule builder that works. Please! How hard can this really be? Every year they insist on having some terrible web interface that has an awful user experience. It takes forever to get things into your schedule. This year is the worst yet. Its truly appalling – it doesn’t seem to work at all. Doesn’t matter how many times you click add/remove the schedule just won’t update. Most annoying!&lt;/li&gt;    &lt;li&gt;With so many delegates with mobile devices Telstra’s NextG network seems a little saturated. It’s been a bit hit and miss and early in the evening I’ve been getting some really poor throughput. &lt;/li&gt; &lt;/ul&gt;  &lt;h4&gt;And the flip side:&lt;/h4&gt;  &lt;ul&gt;   &lt;li&gt;All delegates at Tech-Ed Australia 2009 receive a HP Mini 2140.&lt;/li&gt;    &lt;li&gt;Mine was scheduled to be given to my mother-in-law as a lame-ass cheapo computer that will let her surf the net. The more time I spend with it though the more I’m starting to like it. The build finish is really very nice, performance seems not as bad as I expected and it seems to run Windows 7 Ultimate very nicely. The only thing about the device that is anything other than sweet is that it seems very loud. In a quiet hotel room my Fujitsu tablet PC can’t be heard at all over the HP Mini’s constant whirring even though its not in use.&lt;/li&gt;    &lt;li&gt;Wireless connectivity at the event has been very good so far. After a few initial attempts at getting a connection the HP Mini worked flawlessly with the wireless. Resuming from sleep it connects back to the network in a matter of seconds. Good job!&lt;/li&gt;    &lt;li&gt;Weather is awesome.&lt;/li&gt;    &lt;li&gt;Got a good room at Jupiter’s Casino which is connected to the venue by a walkway.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Phew – that post was a little longer than I had originally intended. Anyone who has read this far is probably a work colleague – and yes I’m about to order room service then connect via VPN and start working on those bugs.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>General</category><comments>http://blog.spencen.com/2009/09/09/teched-australia-2009.aspx#Comments</comments><guid isPermaLink="false">ed6145dd-0331-44e1-9510-18393f5b561e</guid><pubDate>Wed, 09 Sep 2009 11:28:48 GMT</pubDate></item><item><title>Developing for Windows Mobile &amp;ndash; Composing User Controls</title><link>http://blog.spencen.com/2009/08/05/developing-for-windows-mobile-ndash-composing-user-controls.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Tonight I finished refactoring the mobile UI framework I’ve been putting together so that it can correctly handle composite elements. Previously I’d been able to handle a collection of polygons (Rectangles, Stars etc.). I’ve now introduced the concept of DrawingContainers that themselves have a collection of elements, any of which may be another DrawingContainer.&lt;/p&gt;  &lt;p&gt;The idea is that I can now construct UI &lt;em&gt;controls&lt;/em&gt; that themselves are composed of simple graphic primitives. Just like WPF right? Each graphic element can have its own animations and hit test capabilities and controls can be composed within each other to form richer&lt;em&gt; user controls&lt;/em&gt;. All this is rendered to the hosting Windows.Forms.Control in a single double-buffered render.&lt;/p&gt;  &lt;p&gt;The class diagram below gives an indication of where I’m currently at. Everything in the diagram has been implemented.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Spencen.Mobile.UI_2.png" target="_blank"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="Spencen.Mobile.UI" border="0" alt="Spencen.Mobile.UI" src="http://blog.spencen.com/images/83489-72989/Spencen.Mobile.UI_thumb.png" width="640" height="424" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;As one example of compositing controls I used a multi-part windmill.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.spencen.com/Downloads/winmo_animation_spinning.wmv"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="Windows Mobile Spinning Wheel Thing_Thumb" border="0" alt="Windows Mobile Spinning Wheel Thing_Thumb" src="http://blog.spencen.com/images/83489-72989/Windows%20Mobile%20Spinning%20Wheel%20Thing_Thumb_3.jpg" width="236" height="388" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Defined in code as:&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;var &lt;/span&gt;center = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( hostCanvas.Width / 2, hostCanvas.Height / 2 );
&lt;span style="color: blue"&gt;var &lt;/span&gt;yellowBrush = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;SolidBrush&lt;/span&gt;( &lt;span style="color: #2b91af"&gt;Color&lt;/span&gt;.Yellow );
&lt;span style="color: blue"&gt;var &lt;/span&gt;panel = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Panel&lt;/span&gt;( hostCanvas ) { Size = hostCanvas.Size, Center = center };
&lt;span style="color: blue"&gt;var &lt;/span&gt;bar1 = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Panel&lt;/span&gt;( hostCanvas ) { Size = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Size&lt;/span&gt;( 200, 20 ), Center = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( center.X, center.Y - 190 ) };
&lt;span style="color: blue"&gt;var &lt;/span&gt;bar2 = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Panel&lt;/span&gt;( hostCanvas ) { Size = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Size&lt;/span&gt;( 200, 20 ), Center = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( center.X, center.Y + 190 ) };
panel.Children.Add( &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Rectangle&lt;/span&gt;() { Size = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Size&lt;/span&gt;( 50, 400 ), Center = center } );
bar1.Children.Add( &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Rectangle&lt;/span&gt;() { Size = bar1.Size, Position = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( 0, 0 ) } );
bar2.Children.Add( &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Rectangle&lt;/span&gt;() { Size = bar1.Size, Position = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( 0, 0 ) } );
bar1.Children.Add( &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Star&lt;/span&gt;() { Size = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Size&lt;/span&gt;( 75, 75 ), &lt;br /&gt;                                             Center = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( bar1.Size.Width / 2 - 90, bar1.Size.Height / 2 ), &lt;br /&gt;                                             Background = yellowBrush } );
bar1.Children.Add( &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Star&lt;/span&gt;() { Size = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Size&lt;/span&gt;( 75, 75 ), &lt;br /&gt;                                             Center = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( bar1.Size.Width / 2 + 90, bar1.Size.Height / 2 ), &lt;br /&gt;                                             Background = yellowBrush } );
bar2.Children.Add( &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Star&lt;/span&gt;() { Size = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Size&lt;/span&gt;( 75, 75 ), &lt;br /&gt;                                             Center = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( bar2.Size.Width / 2 - 90, bar2.Size.Height / 2 ), &lt;br /&gt;                                             Background = yellowBrush } );
bar2.Children.Add( &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Star&lt;/span&gt;() { Size = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Size&lt;/span&gt;( 75, 75 ), &lt;br /&gt;                                             Center = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( bar2.Size.Width / 2 + 90, bar2.Size.Height / 2 ), &lt;br /&gt;                                             Background = yellowBrush } );
panel.Children.Add( bar1 );
panel.Children.Add( bar2 );

panel.Transforms.Add( _rotateTransform );
_rotateTransform.RenderCenter = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( hostCanvas.Width / 2, hostCanvas.Height / 2 );

panel.Host.AnimationManager.AddAnimation( &lt;br /&gt;                  &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;FloatAnimation&lt;/span&gt;( _rotateTransform, &lt;span style="color: #a31515"&gt;&amp;quot;Angle&amp;quot;&lt;/span&gt;, &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;TimeSpan&lt;/span&gt;( 0, 0, 50 ) ) { FinalValue = 3600 } );

&lt;span style="color: blue"&gt;var &lt;/span&gt;barRotation = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;RotateTransform&lt;/span&gt;();
bar1.Transforms.Add( barRotation );
bar2.Transforms.Add( barRotation );

panel.Host.AnimationManager.AddAnimation( &lt;br /&gt;                 &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;FloatAnimation&lt;/span&gt;( barRotation, &lt;span style="color: #a31515"&gt;&amp;quot;Angle&amp;quot;&lt;/span&gt;, &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;TimeSpan&lt;/span&gt;( 0, 0, 50 ) ) { FinalValue = -7200 } );

&lt;span style="color: blue"&gt;var &lt;/span&gt;starRotation = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;RotateTransform&lt;/span&gt;();
bar1.Children[ 1 ].Transforms.Add( starRotation );
bar1.Children[ 2 ].Transforms.Add( starRotation );
bar2.Children[ 1 ].Transforms.Add( starRotation );
bar2.Children[ 2 ].Transforms.Add( starRotation );

panel.Host.AnimationManager.AddAnimation( &lt;br /&gt;                &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;FloatAnimation&lt;/span&gt;( starRotation, &lt;span style="color: #a31515"&gt;&amp;quot;Angle&amp;quot;&lt;/span&gt;, &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;TimeSpan&lt;/span&gt;( 0, 0, 50 ) ) { FinalValue = 18000 } );

hostCanvas.View.Children.Add( panel );&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Other features so that I’ve got so far:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support for Behaviours. So far the only implementation is a DragBehavior that allows dragging any attached element along one or both axis. Even supports a “flick” by determining the angle and velocity on mouse up and applying an animation with a cubic easing function to simulate velocity decay.&lt;/li&gt;

  &lt;li&gt;Scrolling between views/pages using an easing function (and BitBlt).&lt;/li&gt;

  &lt;li&gt;Simple image support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other ideas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Button and ItemsList controls.&lt;/li&gt;

  &lt;li&gt;Stack and custom (e.g. radial) layout panels.&lt;/li&gt;

  &lt;li&gt;Integration with platform APIs to allow drawing of rounded rectangles, gradient fills and to support alphas.&lt;/li&gt;

  &lt;li&gt;A transform for flipping vertically or horizontally.&lt;/li&gt;

  &lt;li&gt;Behaviour to support an ICommand style interface to allowing hooking UI interactions with a view model.&lt;/li&gt;
&lt;/ul&gt;</description><category>Development</category><category>.NET</category><comments>http://blog.spencen.com/2009/08/05/developing-for-windows-mobile-ndash-composing-user-controls.aspx#Comments</comments><guid isPermaLink="false">90f67633-3f24-4981-878f-52557d8fef82</guid><pubDate>Tue, 04 Aug 2009 16:37:46 GMT</pubDate></item><item><title>Developing for Windows Mobile &amp;ndash; Animation Basics</title><link>http://blog.spencen.com/2009/07/31/developing-for-windows-mobile-ndash-animation-basics.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;This post is a follow on from my &lt;a href="http://blog.spencen.com/2009/07/29/developing-for-windows-mobile-ndash-getting-started.aspx" target="_blank"&gt;most recent efforts&lt;/a&gt; creating some screens for a Windows Mobile application. I had decided to write a simple graphics library to help me do some nice transition effects. So over the last two nights I ported (actually rewrote) my original WinForms Transition demo to Windows Compact Framework.&lt;/p&gt;  &lt;p&gt;So far I have support only for polygons, but that includes hit testing, transforms (rotate, translate, scale), animation (floats, points, colours, brushes) and easing functions (currently sine in/out and elastic out).&lt;/p&gt;  &lt;p&gt;Hopefully I’ll post more about this (with source code) soon – but &lt;a href="http://www.spencen.com/Downloads/winmo_animation_test.wmv" target="_blank"&gt;here&lt;/a&gt; is a quick demo video that I captured using Expression 3’s new screen capture utility (very neat!).&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.spencen.com/Downloads/winmo_animation_test.wmv" target="_blank"&gt;&lt;img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="Windows Mobile Animations_Thumb" border="0" alt="Windows Mobile Animations_Thumb" src="http://blog.spencen.com/images/83489-72989/Windows%20Mobile%20Animations_Thumb_3.jpg" width="236" height="388" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;So far I’ve been really happy with the performance. Will be interesting to see how much it degrades once I start adding gradients, transparency and more complex shapes. [Note that the video doesn’t really reflect the performance too well.]&lt;/p&gt;</description><category>Development</category><category>.NET</category><comments>http://blog.spencen.com/2009/07/31/developing-for-windows-mobile-ndash-animation-basics.aspx#Comments</comments><guid isPermaLink="false">bb0a6e02-a506-4249-b4a5-3a5f28526868</guid><pubDate>Thu, 30 Jul 2009 15:57:24 GMT</pubDate></item><item><title>Developing for Windows Mobile &amp;ndash; Getting Started</title><link>http://blog.spencen.com/2009/07/29/developing-for-windows-mobile-ndash-getting-started.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Now I have my new Windows Mobile 6.1 device I’ve decided to delve once more into the mysterious realm of developing for mobile devices. My previous forays have both been very lightweight. The most recent was simply displaying bus timetable information within a ListView control. Despite its simplicity its actually something I find very useful on my daily commute – rather than digging around in my bag for the paper version and then tuning in to the times and stops that I’m interested in.&lt;/p&gt;  &lt;p&gt;Here’s a screenshot of my original Bus Timetable applet (its just too trivial to be awarded the title “application”):&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/BusTimetable%20-%20PocketPC%202003%20SE.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="BusTimetable - PocketPC 2003 SE" border="0" alt="BusTimetable - PocketPC 2003 SE" src="http://blog.spencen.com/images/83489-72989/BusTimetable%20-%20PocketPC%202003%20SE_thumb.png" width="244" height="324" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Now here’s a screenshot of the same application running on my new HTC device:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/2009%2007%2006_21%2015%2012_0015_111g_2.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="2009 07 06_21 15 12_0015_111g" border="0" alt="2009 07 06_21 15 12_0015_111g" src="http://blog.spencen.com/images/83489-72989/2009%2007%2006_21%2015%2012_0015_111g_thumb.jpg" width="244" height="404" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Hmm.. some things scaled and some didn’t &lt;img src="http://blog.spencen.com/emoticons/sad.png" border="0" /&gt; But overall when compared to the other default applications (particularly those written by HTC) it looks pretty lame.&lt;/p&gt;  &lt;p&gt;So, I decided to get to work and create a user interface that:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Scales well across the more common Windows Mobile devices resolutions (at least 240x320, 480x640 and 480x800). &lt;/li&gt;    &lt;li&gt;Fits with the “look and feel” of the pre-installed HTC applications. &lt;/li&gt;    &lt;li&gt;Works with touch only – this type of application needs to work using just my thumb since common scenarios for its use are when I’m walking through a crowd and carrying a bag. &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;With the help of the &lt;a href="http://code.msdn.microsoft.com/uiframework"&gt;UIFramework&lt;/a&gt; from MSDN I managed to get some screens that I was pretty happy with. The icons and selection had gradient fills and the icons were superimposed on their corresponding “frames” with a transparent background.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/2009%2007%2006_21%2027%2031_0016_111g_2.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="2009 07 06_21 27 31_0016_111g" border="0" alt="2009 07 06_21 27 31_0016_111g" src="http://blog.spencen.com/images/83489-72989/2009%2007%2006_21%2027%2031_0016_111g_thumb.jpg" width="244" height="404" /&gt;&lt;/a&gt;&amp;#160; &lt;a href="http://blog.spencen.com/images/83489-72989/2009%2007%2006_21%2028%2035_0018_111g_2.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="2009 07 06_21 28 35_0018_111g" border="0" alt="2009 07 06_21 28 35_0018_111g" src="http://blog.spencen.com/images/83489-72989/2009%2007%2006_21%2028%2035_0018_111g_thumb.jpg" width="244" height="404" /&gt;&lt;/a&gt;&amp;#160; &lt;/p&gt;  &lt;p&gt;However, I soon found that things weren’t quite a rosy as I was hoping. To start with the UIFramework library sample seems to be a “work in progress”. That is to say it has a lot of bugs or parts that simply don’t work – its obviously intended as a starting reference for someone intending to owner draw their own controls/graphic elements.&lt;/p&gt;  &lt;p&gt;Also, I originally created each ButtonBar as a user control. As with WinForms this meant that when it came to scrolling the buttons it looked terrible. Really slow – and each button is its own Window hence there is no capability of double-buffering. Man – I have been so spoiled by WPF – I had long forgotten all this pain! This trick then seemed to be to ditch using controls and just render the entire UI on a single user control. That way the main user control can double buffer all the rendering and there is only one render pass. The downside of course is that you then have to take care of everything – drawing all your own controls, hit testing, anchoring, dpi scaling etc.&lt;/p&gt;  &lt;p&gt;Well – I’m not sure where I’m going with all this. But I did consider porting my &lt;a href="http://blog.spencen.com/2007/12/11/winforms-animation-part-2.aspx"&gt;WinForms Transitions&lt;/a&gt; code to the Windows CF. Even this was a no-go though – because although it contains plenty of base classes and helper methods for transforming and hit testing objects it relies heavily on using GraphicsContainer to do the actual transforms. These aren’t supported by the Compact Framework. So, I started from scratch, building a simple graphics library that will let me scale, rotate and translate graphic primitives. So far I have a spinning/zoomable rectangle – guess you gotta start somewhere.&lt;/p&gt;  &lt;p&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="MobileTransitions" border="0" alt="MobileTransitions" src="http://blog.spencen.com/images/83489-72989/MobileTransitions_1.png" width="244" height="404" /&gt;&lt;/p&gt;</description><category>Development</category><category>.NET</category><comments>http://blog.spencen.com/2009/07/29/developing-for-windows-mobile-ndash-getting-started.aspx#Comments</comments><guid isPermaLink="false">120eb20d-4649-4a86-bf75-e18b20275e8a</guid><pubDate>Tue, 28 Jul 2009 14:38:18 GMT</pubDate></item><item><title>Comment Spam Philosophy</title><link>http://blog.spencen.com/2009/07/21/comment-span-philosophy.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;P&gt;Recently I’ve been getting quite a bit of comment spam on this blog. Most of it is inane gibberish, a witless praise or a text fragment ripped from the post itself. However, some of it is actually quite entertaining…&lt;/P&gt;
&lt;BLOCKQUOTE&gt;
&lt;P&gt;&lt;EM&gt;Although Google does not care much about links inside comments, Google cares about links INSIDE the posts. Get people to notice you, and they will eventually write about you and your site. Links inside posts are the best quality backlinks you can get. To sum it all up, always write great comments if you are going to write them, and you will be rewarded sooner or later.&lt;/EM&gt;&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;Hmm – spam that tells me comment links are not really worth anything.&lt;/P&gt;
&lt;BLOCKQUOTE&gt;
&lt;P&gt;&lt;EM&gt;I admit, I have not been on this webpage in a long time... however it was another joy to see It is such an important topic and ignored by so many, even professionals. I thank you to help making people more aware of possible issues. &lt;BR&gt;Great stuff as usual....&lt;/EM&gt;&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;Well what can I say – its good to have you back.&lt;/P&gt;
&lt;BLOCKQUOTE&gt;
&lt;P&gt;&lt;EM&gt;The scoop neck and cap sleeves are cute, the gathers at the waist creates a uniformly flattering silhouette, and the pattern of the dye compliments beautifully the design of the dress!..&lt;/EM&gt;&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;Why – thank you so much, I designed it myself :-p&lt;/P&gt;
&lt;BLOCKQUOTE&gt;
&lt;P&gt;&lt;EM&gt;Find effective graphics and photos: It's always better to use too few than too many graphics. One great graphic is so much better than four weak ones. Sometimes they are not even necessary. When you do use graphics and photos, make sure they help illustrate your point, rather than just inserting them to take up space.&lt;/EM&gt;&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;Err… OK – use a few good graphics… when necessary… but not more than four… and make them relevant not as padding. Even graphic designers are spamming!?&lt;/P&gt;
&lt;BLOCKQUOTE&gt;
&lt;P&gt;&lt;EM&gt;nice post! It helps me a lot to optimize my site… now my newly published site are get index by search engine especially Google…&lt;/EM&gt;&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;Your new site “are get index” by Google – fancy Mr Spammer caring about that?&lt;/P&gt;
&lt;BLOCKQUOTE&gt;
&lt;P&gt;&lt;EM&gt;I would like to thank you for the efforts you have made in writing this article. I am hoping the same best work from you in the future as well. In fact your creative writing abilities has inspired me to start my own wordpress blog now. Really the blogging is spreading its wings rapidly. Your write up is a fine example of it &lt;IMG border=0 src="http://blog.spencen.com/emoticons/smile.png"&gt;&lt;/EM&gt;&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;Oh wonderful, my half-assed blog posts are inspiring the spammers to start their own blogs. I’m soooo proud &lt;IMG border=0 src="http://blog.spencen.com/emoticons/smile.png"&gt;&lt;/P&gt;</description><category>General</category><comments>http://blog.spencen.com/2009/07/21/comment-span-philosophy.aspx#Comments</comments><guid isPermaLink="false">7f7151c0-538c-41ad-93dc-229df0425603</guid><pubDate>Tue, 21 Jul 2009 14:28:16 GMT</pubDate></item><item><title>NHibernate &amp;ndash; a Quality ORM?</title><link>http://blog.spencen.com/2009/07/21/nhibernate-ndash-a-quality-orm.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;em&gt;[This is a flame. If you are an NHibernate fan, please stop reading now, you’ll only upset yourself otherwise.]&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;Like many others I subscribe to the &lt;a href="http://codebetter.com/blogs/"&gt;codebetter.com&lt;/a&gt; RSS feed. One of the members feels that its their personal responsibility to enlighten subscribers with endless NDepend analysis results for various frameworks. I &lt;em&gt;almost&lt;/em&gt; always skip those posts.&lt;/p&gt;  &lt;p&gt;However, this &lt;a href="http://codebetter.com/blogs/patricksmacchia/archive/2009/07/21/nhibernate-2-1-changes-overview.aspx"&gt;latest post&lt;/a&gt; regarding the NHibernate 2.1 release I found most amusing.&lt;/p&gt;  &lt;p&gt;I’ve been &lt;em&gt;subjected&lt;/em&gt; to NHibernate. I don’t enjoy the experience. Some of the pain that I’ve felt begins to make sense. 58,000 lines of spaghetti code to do some pretty simple ORM mapping – woot! {snigger}&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>General</category><comments>http://blog.spencen.com/2009/07/21/nhibernate-ndash-a-quality-orm.aspx#Comments</comments><guid isPermaLink="false">bfbbee0b-e20d-46eb-af7a-e8790df40fb6</guid><pubDate>Tue, 21 Jul 2009 13:57:50 GMT</pubDate></item><item><title>Presenting at Code Camp SA</title><link>http://blog.spencen.com/2009/07/19/presenting-at-code-camp-sa.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Links from my presentation at &lt;a href="http://www.codecampsa.com"&gt;Code Camp SA&lt;/a&gt; this year.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blogs.msdn.com/jaimer/archive/2009/05/27/wpf-4-and-net-framework-4-beta-1-list-of-features-totrack.aspx"&gt;What is new in WPF&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://gallery.expression.microsoft.com/en-us/"&gt;Behaviors on Expression Web Site&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blogs.msdn.com/llobo/archive/2009/05/01/download-m-v-vm-project-template-toolkit.aspx"&gt;WPF MVVM Project Template&lt;/a&gt; – getting started with MVVM in WPF&lt;/p&gt;  &lt;p&gt;&lt;a href="http://compositewpf.codeplex.com "&gt;Composite WPF Home (Prism)&lt;/a&gt; – patterns and practices guidance&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blogs.msdn.com/dphill/archive/2009/06/15/prism-quick-start-kit-update.aspx"&gt;Composite WPF (Prism) QuickStart Project Templates&lt;/a&gt; – fully fleshed templates&lt;/p&gt;  &lt;p&gt;&lt;a href="http://caliburn.codeplex.com"&gt;Caliburn&lt;/a&gt; – an alternate MVVM framework&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/2009/06/14/circular-layout-panel-v2.aspx"&gt;Radial/Circular Panel&lt;/a&gt;&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/07/19/presenting-at-code-camp-sa.aspx#Comments</comments><guid isPermaLink="false">7fb71c5e-ed80-4858-bbba-6d42e4079650</guid><pubDate>Sun, 19 Jul 2009 02:39:55 GMT</pubDate></item><item><title>Windows Mobile SDK disables Sierra 880U NextG Wireless Card</title><link>http://blog.spencen.com/2009/07/13/windows-mobile-sdk-disables-sierra-880u-nextg-wireless-card.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;On my 50 minute bus trip home I often get out my laptop – whether its to finishing checking-in my days work via VPN, getting a headstart with projects that I’m working on at home, of even just catching up with blogs/mail etc.&lt;/p&gt;  &lt;p&gt;Tonight I fired up the laptop, inserted my &lt;a href="http://blog.spencen.com/2008/08/29/wireless-internet.aspx"&gt;Telstra Wireless NextG card&lt;/a&gt; and… nothing. Just the message “Card not detected”. Tried both other USB ports no luck. Opened up device manager and there it was – exclamation marks against all the Network Adapters and Ports associated with my Sierra Aircard 880U. Not good!&lt;/p&gt;  &lt;p&gt;I tried all the usual, time honoured, general purposes fix measures:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Reboot the machine&lt;/li&gt;    &lt;li&gt;Disable and re-enable the devices&lt;/li&gt;    &lt;li&gt;Un-install the devices and do a hardware scan to re-install them&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;No luck. When I got home I removed the drivers and tried to re-install from the original installation disk that came with the device. The installer failed right after selecting the modem device. So I re-installed the driver manually from the CD. The installation worked but still the device wasn’t detected.&lt;/p&gt;  &lt;p&gt;Time to backtrack – it was working flawlessly last week. Once I’d got to this point the culprit became obvious. I had installed Windows Mobile 6.0 and 6.5 Developer Tools on the weekend so I could start doing development for my &lt;a href="http://blog.spencen.com/2009/06/24/htc-touch-diamond2.aspx"&gt;new phone&lt;/a&gt; on my laptop. It made a quirky kind of sense that this installation could have somehow installed some virtual drivers that were interfering with the real HDSPA modem.&lt;/p&gt;  &lt;p&gt;Sure enough. After uninstalling Windows Mobile 6.0 Developer Tools and Windows Mobile 6.5 Emulators then re-inserting the modem it worked immediately. Great! But how do I get to have a working NextG Wireless Card &lt;em&gt;and&lt;/em&gt; developer for a Windows Mobile device!? Is this just some quirky hardware issue on my laptop/install?&lt;/p&gt;</description><category>Development</category><category>.NET</category><comments>http://blog.spencen.com/2009/07/13/windows-mobile-sdk-disables-sierra-880u-nextg-wireless-card.aspx#Comments</comments><guid isPermaLink="false">dd0a8904-fe87-43bb-8680-101778a2a1a0</guid><pubDate>Mon, 13 Jul 2009 13:45:34 GMT</pubDate></item><item><title>Continuous Tile Panel</title><link>http://blog.spencen.com/2009/07/02/continuous-tile-panel.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p dir="ltr"&gt;A couple of weeks ago someone suggested to me an idea for a particular type of layout panel. The idea was to be able to display a fixed set of tiles which are “wrapped” horizontally. So as you scroll horizontally the tiles will move off one edge of the panel and eventually re-appear on the other side. Think of how we commonly see the earth projected onto a rectangle – scrolling left or right to bring the particular geography into the centre of the screen. &lt;/p&gt; &lt;p style="margin-right: 0px" dir="ltr"&gt;I jumped into this without giving too much thought about how I would want to interact with the panel from an API perspective. For that reason its probably I’ve taken altogether the wrong approach but I thought I would post it up here anyway, ‘cause its unlikely I’ll take it any further than this proof of concept.&lt;/p&gt; &lt;h3&gt;Usage&lt;/h3&gt; &lt;p style="margin-right: 0px" dir="ltr"&gt;Define some XAML like so:&lt;/p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;panels&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;TilePanel &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Name&lt;/span&gt;&lt;span style="color: blue"&gt;="tilePanel" &lt;/span&gt;&lt;span style="color: red"&gt;Height&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="170" 
                  &lt;/span&gt;&lt;span style="color: red"&gt;Rows&lt;/span&gt;&lt;span style="color: blue"&gt;="3" &lt;/span&gt;&lt;span style="color: red"&gt;Background&lt;/span&gt;&lt;span style="color: blue"&gt;="LightYellow" &lt;/span&gt;&lt;span style="color: red"&gt;ClipToBounds&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="True"
                  &lt;/span&gt;&lt;span style="color: red"&gt;XOffset&lt;/span&gt;&lt;span style="color: blue"&gt;="{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;ElementName&lt;/span&gt;&lt;span style="color: blue"&gt;=xOffsetSlider,&lt;/span&gt;&lt;span style="color: red"&gt;Path&lt;/span&gt;&lt;span style="color: blue"&gt;=Value,&lt;/span&gt;&lt;span style="color: red"&gt;Mode&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=OneWay}"
                  &lt;/span&gt;&lt;span style="color: red"&gt;YOffset&lt;/span&gt;&lt;span style="color: blue"&gt;="{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;ElementName&lt;/span&gt;&lt;span style="color: blue"&gt;=yOffsetSlider,&lt;/span&gt;&lt;span style="color: red"&gt;Path&lt;/span&gt;&lt;span style="color: blue"&gt;=Value,&lt;/span&gt;&lt;span style="color: red"&gt;Mode&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=OneWay}"
                  &lt;/span&gt;&lt;span style="color: red"&gt;Scale&lt;/span&gt;&lt;span style="color: blue"&gt;="{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;ElementName&lt;/span&gt;&lt;span style="color: blue"&gt;=scaleSlider,&lt;/span&gt;&lt;span style="color: red"&gt;Path&lt;/span&gt;&lt;span style="color: blue"&gt;=Value,&lt;/span&gt;&lt;span style="color: red"&gt;Mode&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=OneWay}"&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;panels&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;TilePanel.Resources&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
              &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style &lt;/span&gt;&lt;span style="color: red"&gt;TargetType&lt;/span&gt;&lt;span style="color: blue"&gt;="{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}"&amp;gt;
                  &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;="FontSize" &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="32pt"/&amp;gt;
                  &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;="FontWeight" &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="Bold"/&amp;gt;
                  &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;="Padding" &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="3"/&amp;gt;
                  &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;="TextAlignment" &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="Center"/&amp;gt;
                  &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;="Background" &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="LightBlue"/&amp;gt;
              &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;panels&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;TilePanel.Resources&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;A&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;B&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;C&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;D&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;E&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;F&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;G&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;H&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;I&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;J&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;K&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;L&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;M&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;N&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;O&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;P&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Q&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;R&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;S&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;T&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;U&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;V&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;W&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;X&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Y&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Z&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;1&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;2&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;3&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;4&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;5&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;6&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;7&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;8&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;9&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;0&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;panels&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;TilePanel&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;This generates the following layout where each of the items is laid out in three rows.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Continuous%20Tile%20Panel%20-%20Letters%20at%20Start_2.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="Continuous Tile Panel - Letters at Start" border="0" alt="Continuous Tile Panel - Letters at Start" src="http://blog.spencen.com/images/83489-72989/Continuous%20Tile%20Panel%20-%20Letters%20at%20Start_thumb.png" width="244" height="144"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Items that are beyond the right edge are actually wrapped back to the left hand side (by subtracting the total width of all columns). So that when we supply a horizontal offset we get the desired effect.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Continuous%20Tile%20Panel%20-%20Letters%20Shifted_2.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="Continuous Tile Panel - Letters Shifted" border="0" alt="Continuous Tile Panel - Letters Shifted" src="http://blog.spencen.com/images/83489-72989/Continuous%20Tile%20Panel%20-%20Letters%20Shifted_thumb.png" width="244" height="142"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Note that in the example each column width is automatically calculated based on the widest element. Likewise row heights are calculated based on the tallest elements. Although this allows for different widths/heights per column/row its works well when all items are the same width and height.&lt;/p&gt;
&lt;p&gt;One example usage of this control would be as an ItemsPanel for an ItemsControl that displays tiled images that form a single scene. It so happens that &lt;a href="http://blog.spencen.com/2009/03/22/panoramas-using-microsoft-image-composite-editor-ice-and-hd-view.aspx"&gt;ICE&lt;/a&gt; generates these types of tiles (at various zoom levels) for publishing its panoramas.&lt;/p&gt;&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ItemsControl &lt;/span&gt;&lt;span style="color: red"&gt;ItemsSource&lt;/span&gt;&lt;span style="color: blue"&gt;="{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;TileSet&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}"&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ItemsControl.ItemTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Border &lt;/span&gt;&lt;span style="color: red"&gt;BorderThickness&lt;/span&gt;&lt;span style="color: blue"&gt;="1" &lt;/span&gt;&lt;span style="color: red"&gt;BorderBrush&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="LightGray"&amp;gt;
                &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Grid&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Image &lt;/span&gt;&lt;span style="color: red"&gt;Source&lt;/span&gt;&lt;span style="color: blue"&gt;="{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;ImagePath&lt;/span&gt;&lt;span style="color: blue"&gt;}" &lt;/span&gt;&lt;span style="color: red"&gt;Stretch&lt;/span&gt;&lt;span style="color: blue"&gt;="Uniform" &lt;/span&gt;&lt;span style="color: red"&gt;Height&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="Auto"/&amp;gt;
&lt;/span&gt;&lt;span style="color: green"&gt;                    &lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock &lt;/span&gt;&lt;span style="color: red"&gt;Margin&lt;/span&gt;&lt;span style="color: blue"&gt;="4" &lt;/span&gt;&lt;span style="color: red"&gt;TextAlignment&lt;/span&gt;&lt;span style="color: blue"&gt;="Center" &lt;/span&gt;&lt;span style="color: red"&gt;FontSize&lt;/span&gt;&lt;span style="color: blue"&gt;="6pt" &lt;/span&gt;&lt;span style="color: red"&gt;Foreground&lt;/span&gt;&lt;span style="color: blue"&gt;="White" &lt;/span&gt;&lt;span style="color: red"&gt;Opacity&lt;/span&gt;&lt;span style="color: blue"&gt;="0.5" &lt;br&gt;                                     &lt;/span&gt;&lt;span style="color: red"&gt;VerticalAlignment&lt;/span&gt;&lt;span style="color: blue"&gt;="Center" &lt;/span&gt;&lt;span style="color: red"&gt;HorizontalAlignment&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="Center"&amp;gt;
                            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock.Text&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                                &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;MultiBinding &lt;/span&gt;&lt;span style="color: red"&gt;StringFormat&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="{}{0},{1}" &amp;gt;
                                    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;Path&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="ColumnIndex"/&amp;gt;
                                    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;Path&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="RowIndex"/&amp;gt;
                                &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;MultiBinding&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                            &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock.Text&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Grid&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
            &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Border&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ItemsControl.ItemTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ItemsControl.ItemsPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ItemsPanelTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;panels&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;TilePanel &lt;/span&gt;&lt;span style="color: red"&gt;Margin&lt;/span&gt;&lt;span style="color: blue"&gt;="10" &lt;/span&gt;&lt;span style="color: red"&gt;Background&lt;/span&gt;&lt;span style="color: blue"&gt;="LightYellow" &lt;/span&gt;&lt;span style="color: red"&gt;ClipToBounds&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;="True"
                              &lt;/span&gt;&lt;span style="color: red"&gt;Rows&lt;/span&gt;&lt;span style="color: blue"&gt;="{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;TileSet&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;.RowCount}"
                              &lt;/span&gt;&lt;span style="color: red"&gt;XOffset&lt;/span&gt;&lt;span style="color: blue"&gt;="{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;ElementName&lt;/span&gt;&lt;span style="color: blue"&gt;=xOffsetSlider,&lt;/span&gt;&lt;span style="color: red"&gt;Path&lt;/span&gt;&lt;span style="color: blue"&gt;=Value,&lt;/span&gt;&lt;span style="color: red"&gt;Mode&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=OneWay}"
                              &lt;/span&gt;&lt;span style="color: red"&gt;YOffset&lt;/span&gt;&lt;span style="color: blue"&gt;="{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;ElementName&lt;/span&gt;&lt;span style="color: blue"&gt;=yOffsetSlider,&lt;/span&gt;&lt;span style="color: red"&gt;Path&lt;/span&gt;&lt;span style="color: blue"&gt;=Value,&lt;/span&gt;&lt;span style="color: red"&gt;Mode&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=OneWay}"
                              &lt;/span&gt;&lt;span style="color: red"&gt;Scale&lt;/span&gt;&lt;span style="color: blue"&gt;="{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;ElementName&lt;/span&gt;&lt;span style="color: blue"&gt;=scaleSlider,&lt;/span&gt;&lt;span style="color: red"&gt;Path&lt;/span&gt;&lt;span style="color: blue"&gt;=Value,&lt;/span&gt;&lt;span style="color: red"&gt;Mode&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=OneWay}"/&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ItemsPanelTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ItemsControl.ItemsPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ItemsControl&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Continuous%20Tile%20Panel%20-%20ICE_2.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="Continuous Tile Panel - ICE" border="0" alt="Continuous Tile Panel - ICE" src="http://blog.spencen.com/images/83489-72989/Continuous%20Tile%20Panel%20-%20ICE_thumb.jpg" width="644" height="202"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;To load the ICE images into a collection of “Tiles” I wrote the following.&lt;/p&gt;&lt;pre class="code"&gt; &lt;font size="1"&gt;&lt;font face="Verdana"&gt;   &lt;span style="color: blue"&gt;public static class &lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #2b91af"&gt;TileLoader
    &lt;/span&gt;{
        &lt;span style="color: blue"&gt;public static &lt;/span&gt;&lt;span style="color: #2b91af"&gt;TileSet &lt;/span&gt;LoadFromFolder( &lt;span style="color: blue"&gt;string &lt;/span&gt;path, &lt;span style="color: blue"&gt;int &lt;/span&gt;zoomLevel )
        {
            &lt;span style="color: blue"&gt;var &lt;/span&gt;result = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;TileSet&lt;/span&gt;(path, zoomLevel);

            &lt;span style="color: blue"&gt;if &lt;/span&gt;( !&lt;span style="color: #2b91af"&gt;Directory&lt;/span&gt;.Exists( path ) )
                &lt;span style="color: blue"&gt;throw new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;ArgumentException&lt;/span&gt;( &lt;span style="color: #a31515"&gt;"The specified tile folder does not exist."&lt;/span&gt;, &lt;span style="color: #a31515"&gt;"path" &lt;/span&gt;);
            &lt;span style="color: blue"&gt;if &lt;/span&gt;( zoomLevel &amp;lt; 0 )
                &lt;span style="color: blue"&gt;throw new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;ArgumentException&lt;/span&gt;( &lt;span style="color: #a31515"&gt;"The zoom level must be &amp;gt;= 0."&lt;/span&gt;, &lt;span style="color: #a31515"&gt;"zoomLevel" &lt;/span&gt;);

            &lt;span style="color: #2b91af"&gt;DirectoryInfo &lt;/span&gt;tileLevelFolder;
            &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;try
            &lt;/span&gt;{
                &lt;span style="color: blue"&gt;var &lt;/span&gt;rootFolder = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;DirectoryInfo&lt;/span&gt;( path );
                &lt;span style="color: blue"&gt;var &lt;/span&gt;tileFolder = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;DirectoryInfo&lt;/span&gt;( &lt;span style="color: #2b91af"&gt;Path&lt;/span&gt;.Combine( path, &lt;span style="color: #a31515"&gt;"tiles" &lt;/span&gt;) );
                tileLevelFolder = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;DirectoryInfo&lt;/span&gt;( &lt;span style="color: #2b91af"&gt;Path&lt;/span&gt;.Combine( tileFolder.FullName, &lt;span style="color: #a31515"&gt;"l_" &lt;/span&gt;+ zoomLevel ) );
            }
            &lt;span style="color: blue"&gt;catch &lt;/span&gt;( System.IO.&lt;span style="color: #2b91af"&gt;IOException &lt;/span&gt;ex )
            {
                &lt;span style="color: blue"&gt;throw new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;ArgumentException&lt;/span&gt;( &lt;br&gt;                    &lt;span style="color: blue"&gt;string&lt;/span&gt;.Format( &lt;span style="color: #a31515"&gt;"The tile set specified by the path {0} is corrupt."&lt;/span&gt;, path ), &lt;span style="color: #a31515"&gt;"path"&lt;/span&gt;, ex );
            }

            &lt;span style="color: blue"&gt;var &lt;/span&gt;column = 0;
            &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="background: #fbfffb; color: green"&gt;// Order the directories by numerical ascending, e.g. c_3 before c_21
&lt;/span&gt;            &lt;span style="color: blue"&gt;foreach &lt;/span&gt;( &lt;span style="color: blue"&gt;var &lt;/span&gt;columnFolder &lt;span style="color: blue"&gt;in &lt;/span&gt;tileLevelFolder.GetDirectories( &lt;span style="color: #a31515"&gt;"c_*" &lt;/span&gt;)&lt;br&gt;                                                          .OrderBy( d =&amp;gt; &lt;span style="color: blue"&gt;int&lt;/span&gt;.Parse( d.Name.Substring( 2 ) ) ) )
            {
                &lt;span style="color: blue"&gt;var &lt;/span&gt;row = 0;
                &lt;span style="color: blue"&gt;foreach &lt;/span&gt;( &lt;span style="color: blue"&gt;var &lt;/span&gt;imageFile &lt;span style="color: blue"&gt;in &lt;/span&gt;columnFolder.GetFiles( &lt;span style="color: #a31515"&gt;"tile_*.wdp" &lt;/span&gt;)&lt;br&gt;                                                          .OrderBy( i =&amp;gt; &lt;span style="color: blue"&gt;int&lt;/span&gt;.Parse( i.Name.Substring( 5, i.Name.IndexOf( &lt;span style="color: #a31515"&gt;'.' &lt;/span&gt;) - 5 ) ) ) )
                {
                    &lt;span style="color: blue"&gt;var &lt;/span&gt;tile = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Tile&lt;/span&gt;() { ColumnIndex = column, RowIndex = row, ImagePath = imageFile.FullName };
                    result.Add( tile );
                    row++;
                    &lt;span style="color: blue"&gt;if &lt;/span&gt;( result.RowCount &amp;lt; row )
                        result.RowCount = row;
                }
                column++;
            }

            &lt;span style="color: blue"&gt;return &lt;/span&gt;result;
        }

    }

    [&lt;span style="color: #2b91af"&gt;DebuggerDisplay&lt;/span&gt;(&lt;span style="color: #a31515"&gt;"Column: {ColumnIndex}, Row: {RowIndex}, {ImagePath}"&lt;/span&gt;)]
    &lt;span style="color: blue"&gt;public class &lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #2b91af"&gt;Tile
    &lt;/span&gt;{
        &lt;span style="color: blue"&gt;public string &lt;/span&gt;ImagePath { &lt;span style="color: blue"&gt;get&lt;/span&gt;; &lt;span style="color: blue"&gt;set&lt;/span&gt;; }
        &lt;span style="color: blue"&gt;public int &lt;/span&gt;ColumnIndex { &lt;span style="color: blue"&gt;get&lt;/span&gt;; &lt;span style="color: blue"&gt;set&lt;/span&gt;; }
        &lt;span style="color: blue"&gt;public int &lt;/span&gt;RowIndex { &lt;span style="color: blue"&gt;get&lt;/span&gt;; &lt;span style="color: blue"&gt;set&lt;/span&gt;; }
    }

    &lt;span style="color: blue"&gt;public class &lt;/span&gt;&lt;span style="color: #2b91af"&gt;TileSet &lt;/span&gt;: &lt;span style="color: #2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color: #2b91af"&gt;Tile&lt;/span&gt;&amp;gt;
    {
        &lt;span style="color: blue"&gt;public &lt;/span&gt;TileSet( &lt;span style="color: blue"&gt;string &lt;/span&gt;path, &lt;span style="color: blue"&gt;int &lt;/span&gt;zoomLevel )
        {
            Path = path;
            ZoomLevel = zoomLevel;
        }

        &lt;span style="color: blue"&gt;public string &lt;/span&gt;Path { &lt;span style="color: blue"&gt;get&lt;/span&gt;; &lt;span style="color: blue"&gt;protected set&lt;/span&gt;; }
        &lt;span style="color: blue"&gt;public int &lt;/span&gt;ZoomLevel { &lt;span style="color: blue"&gt;get&lt;/span&gt;; &lt;span style="color: blue"&gt;protected set&lt;/span&gt;; }
        &lt;span style="color: blue"&gt;public int &lt;/span&gt;RowCount { &lt;span style="color: blue"&gt;get&lt;/span&gt;; &lt;span style="color: blue"&gt;set&lt;/span&gt;; }
    }&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;The panel’s arrange override code is as follows:&lt;/p&gt;&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;protected override &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Size &lt;/span&gt;ArrangeOverride(&lt;span style="color: #2b91af"&gt;Size &lt;/span&gt;finalSize)
{
    &lt;span style="color: blue"&gt;int &lt;/span&gt;row = 0;
    &lt;span style="color: blue"&gt;int &lt;/span&gt;column = 0;
    &lt;span style="color: blue"&gt;double &lt;/span&gt;fullWidth = _columnWidths.Sum();
    &lt;span style="color: blue"&gt;double &lt;/span&gt;fullHeight = _rowHeights.Sum();
    &lt;span style="color: blue"&gt;int &lt;/span&gt;maxColumns = (&lt;span style="color: blue"&gt;int&lt;/span&gt;) &lt;span style="color: #2b91af"&gt;Math&lt;/span&gt;.Ceiling( (&lt;span style="color: blue"&gt;double&lt;/span&gt;) finalSize.Width / (&lt;span style="color: blue"&gt;double&lt;/span&gt;) _maxChildWidth);

    &lt;span style="color: blue"&gt;double &lt;/span&gt;x = -( XOffset * _maxChildWidth );
    &lt;span style="color: blue"&gt;double &lt;/span&gt;y = - YOffset;
    &lt;span style="color: blue"&gt;foreach &lt;/span&gt;(&lt;span style="color: #2b91af"&gt;UIElement &lt;/span&gt;child &lt;span style="color: blue"&gt;in &lt;/span&gt;Children)
    {
        x = x % fullWidth;
        &lt;span style="color: blue"&gt;if &lt;/span&gt;(x &amp;gt;= &lt;span style="color: #2b91af"&gt;Math&lt;/span&gt;.Min(_maxChildWidth * maxColumns, fullWidth - _maxChildWidth + 1))
            x -= fullWidth;
        &lt;span style="color: blue"&gt;else if &lt;/span&gt;(x &amp;lt; - _maxChildWidth)
            x += fullWidth;

        &lt;span style="color: blue"&gt;if &lt;/span&gt;( x &amp;gt; -_maxChildWidth &amp;amp;&amp;amp; x &amp;lt;= _maxChildWidth * maxColumns &amp;amp;&amp;amp;
            y &amp;gt; -_maxChildHeight &amp;amp;&amp;amp; y &amp;lt;= fullHeight )
        {
            child.Arrange( &lt;br&gt;                 &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Rect&lt;/span&gt;( &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( x * Scale, y * Scale ), &lt;br&gt;                 &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Size&lt;/span&gt;( child.DesiredSize.Width * Scale, child.DesiredSize.Height * Scale ) ) );
            child.Visibility = &lt;span style="color: #2b91af"&gt;Visibility&lt;/span&gt;.Visible;
        }
        &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;else
        &lt;/span&gt;{
            child.Visibility = &lt;span style="color: #2b91af"&gt;Visibility&lt;/span&gt;.Hidden;
            child.Arrange( &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Rect&lt;/span&gt;( &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( 0, 0 ), &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Size&lt;/span&gt;( child.DesiredSize.Width * Scale, child.DesiredSize.Height * Scale ) ) );
        }

        y += _rowHeights[ row ];
        row = ( row + 1 ) % Rows;
        &lt;span style="color: blue"&gt;if &lt;/span&gt;( row == 0 )
        {
            x += _columnWidths[ column ]; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="background: #fbfffb; color: green"&gt;//column * _childWidth ;
&lt;/span&gt;            y = -YOffset ;
            column++;
        }
    }

    &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="background: #fbfffb; color: green"&gt;//RenderTransform = new ScaleTransform(Scale, Scale, 0.0, YOffset);

&lt;/span&gt;    &lt;span style="color: blue"&gt;return &lt;/span&gt;finalSize;
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;This is far from complete – sample project can be found &lt;a href="http://www.spencen.com/Downloads/TilePanelTest.zip"&gt;here&lt;/a&gt;. [It’s a VS2010 project but should be easy enough to re-assemble for VS2008.]&lt;/p&gt;&lt;pre class="code"&gt;&amp;nbsp;&lt;/pre&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/07/02/continuous-tile-panel.aspx#Comments</comments><guid isPermaLink="false">f63ed8a5-65c4-4bcc-bb76-39e15b4529ef</guid><pubDate>Wed, 01 Jul 2009 15:15:49 GMT</pubDate></item><item><title>Screen Resolution</title><link>http://blog.spencen.com/2009/07/01/screen-resolution.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;There has been plenty of talk over the last handful of years about how we should be writing applications that are device resolution independent. For example, designing screen elements in terms of real world measurements like millimetres (or for the metrically challenged – inches). There is no point designing a button that is designed to be touched by a large thumb at a resolution of 100 pixels by 40 pixels when its deployed to a 300 ppi (&lt;a href="http://en.wikipedia.org/wiki/Pixels_per_inch"&gt;pixels per inch&lt;/a&gt;) device.&lt;/p&gt;  &lt;p&gt;In the past I’ve read a few articles that have claimed getting to the 300 ppi mark would mean that screens would become as readable as paper (ignoring light emitting vs. light absorbing for a moment). Well, I don’t know about that but I’ve finally got myself a (near) 300 ppi device – and it is an awesome screen. Shown here below at half pixel resolution and still larger than life size on most (96 ppi) desktop monitors (click for full image).&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/HTC%20Home%20Page_2.jpg" target="_blank"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="HTC Home Page" border="0" alt="HTC Home Page" src="http://blog.spencen.com/images/83489-72989/HTC%20Home%20Page_thumb.jpg" width="240" height="400" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;The latest HTC range comes with a WVGA resolution screen (480 x 800 pixels) crammed into a screen that is only 42 x 70 mm. By my calculations that is 290 ppi compared to the blurry old iPhone 3Gs at 163 ppi. Now all we need is say a 24” widescreen LCD monitor at this resolution – hmm… that’s around 5902 x 3688 pixels!&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2009/07/01/screen-resolution.aspx#Comments</comments><guid isPermaLink="false">86b17c6f-b360-4010-b6b1-1f49907932c0</guid><pubDate>Wed, 01 Jul 2009 14:14:44 GMT</pubDate></item><item><title>Working from Home</title><link>http://blog.spencen.com/2009/06/26/working-from-home.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;For the last week and a half I’ve been lucky enough to take some leave and work on some of my own (unpaid) projects. Here’s a few simple observations from that experience…&lt;/p&gt;  &lt;p&gt;The view from my study window is better than the view from my third floor city office.&lt;/p&gt;  &lt;p&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="DSC09528-34 Stitch" border="0" alt="DSC09528-34 Stitch" src="http://blog.spencen.com/images/83489-72989/DSC09528-34%20Stitch_3.jpg" width="660" height="156" /&gt; &lt;/p&gt;  &lt;p&gt;The coffee is better, closer and comes with snacks.&lt;/p&gt;  &lt;p&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="DSC09503" border="0" alt="DSC09503" src="http://blog.spencen.com/images/83489-72989/DSC09503_1.jpg" width="244" height="184" /&gt; &lt;/p&gt;  &lt;p&gt;No background chatter, instead I have the rare opportunity to really crank up the music – awesome boost to developer productivity!&lt;/p&gt;  &lt;p&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Play List" border="0" alt="Play List" src="http://blog.spencen.com/images/83489-72989/Play%20List_1.png" width="259" height="153" /&gt; &lt;/p&gt;  &lt;p&gt;No 2+ hour commute. On the surface this would seem to be a huge benefit, but it does come with drawbacks. My daily commute normally involves walking 4km and I get precious little other daily exercise these days. Also, commute time via bus is my allocated reading and podcast listening time – so I’ve been getting a little behind there.&lt;/p&gt;  &lt;p&gt;I also got to watch my son participate in his first Grand Prix event – priceless!&lt;/p&gt;  &lt;p&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="DSC09535" border="0" alt="DSC09535" src="http://blog.spencen.com/images/83489-72989/DSC09535_1.jpg" width="420" height="282" /&gt; &lt;/p&gt;  &lt;p&gt;Overall a great experience. I thoroughly recommend it!&lt;/p&gt;  &lt;p&gt;I wonder if they’d notice at work if I took a couple more weeks off?&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2009/06/26/working-from-home.aspx#Comments</comments><guid isPermaLink="false">898f1f50-8723-42b7-a617-afc64337e1e4</guid><pubDate>Fri, 26 Jun 2009 03:30:49 GMT</pubDate></item><item><title>Desk Calendar UserControl &amp;ndash; Source Code</title><link>http://blog.spencen.com/2009/06/24/desk-calendar-usercontrol-ndash-source-code.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I had to remove the source code from my &lt;a href="http://blog.spencen.com/2009/06/24/desk-calendar-usercontrol.aspx"&gt;previous post&lt;/a&gt; because it was doing weird things to my RSS feed. For those that may be interested though a sample project file can be found &lt;a href="http://www.spencen.com/Downloads/DesktopCalendar.zip"&gt;here&lt;/a&gt;. Note that its far from a finished control – the animation that happens when you click on it was just me messing around with Blend and the intention is for it to allow full navigation and selection. &lt;/p&gt;  &lt;p&gt;XBAP demo (27kb) can be launched from &lt;a href="http://www.spencen.com/Samples/DesktopCalendarXbap/DesktopCalendarXbap.xbap"&gt;here&lt;/a&gt; – note that XBAP version doesn’t have any drop shadows.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/06/24/desk-calendar-usercontrol-ndash-source-code.aspx#Comments</comments><guid isPermaLink="false">d1f77f47-8a8c-4c4c-bd4c-3cb564c90e7d</guid><pubDate>Wed, 24 Jun 2009 10:14:04 GMT</pubDate></item><item><title>HTC Touch Diamond2</title><link>http://blog.spencen.com/2009/06/24/htc-touch-diamond2.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/HTC%20Touch%20Diamond2%20-%20Front_4.jpg"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" title="HTC Touch Diamond2 - Front" border="0" alt="HTC Touch Diamond2 - Front" align="right" src="http://blog.spencen.com/images/83489-72989/HTC%20Touch%20Diamond2%20-%20Front_thumb_1.jpg" width="205" height="308" /&gt;&lt;/a&gt; I’m on an insane spending spree at the moment. Its a combination of the fast approaching end of the financial year and a series of routine mishaps/malfunctions – reversing into the garage roller door (no I wasn’t driving), faulty speaker on my 4 year old i-Mate JAM, grossly overpriced &lt;a href="http://www.miele.com.au/au/domestic/home.htm"&gt;kitchen appliances&lt;/a&gt;, &lt;a href="http://blog.spencen.com/2009/06/11/remix09-recap.aspx"&gt;attending conferences&lt;/a&gt; etc.&lt;/p&gt;  &lt;p&gt;Inspired by what I saw at Remix regarding the launch of Windows Mobile 6.5 I figured that since my phone is on the fritz now must be the time to get a new one. For me the phone has to be a Windows Mobile device and by all the reviews I’ve looked at in the last couple of days the HTC devices seem to be the most well thought of.&lt;/p&gt;  &lt;p&gt;So the order is placed. I should be getting an unlocked HTC Touch Diamond2 in the next few days. Cooked ROMS running Windows Mobile 6.5 are already available and I already have the WM6.5 SDK installed on my dev box.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>General</category><comments>http://blog.spencen.com/2009/06/24/htc-touch-diamond2.aspx#Comments</comments><guid isPermaLink="false">9b6d84aa-fbea-4712-b3bc-11a46261a2c7</guid><pubDate>Wed, 24 Jun 2009 04:30:19 GMT</pubDate></item><item><title>Desk Calendar UserControl</title><link>http://blog.spencen.com/2009/06/24/desk-calendar-usercontrol.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;P&gt;I had a lot of fun late this afternoon putting together a Desk Calendar UserControl. The idea was triggered by me using a screenshot of the Vista Calendar Gadget in my &lt;A href="http://blog.spencen.com/2009/06/23/codecampsa-2009.aspx"&gt;last post&lt;/A&gt;. Also I’m working on a project at the moment that could use a nice date/calendar display and my previous WinForms attempts never looked that great.&lt;/P&gt;
&lt;P align=left&gt;Believing that imitation is the greatest form of flattery – here is my new Desk Calendar UserControl in all its glory. Of course being WPF its fully zoomable – no nasty bitmaps here – click the image to see it at higher res.&lt;/P&gt;
&lt;P&gt;&lt;A href="http://blog.spencen.com/images/83489-72989/DeskCalendar.png"&gt;&lt;IMG style="BORDER-RIGHT-WIDTH: 0px; DISPLAY: block; FLOAT: none; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; MARGIN-LEFT: auto; BORDER-LEFT-WIDTH: 0px; MARGIN-RIGHT: auto" title=DeskCalendar border=0 alt=DeskCalendar src="http://blog.spencen.com/images/83489-72989/DeskCalendar_thumb.png" width=128 height=240&gt;&lt;/A&gt; &lt;/P&gt;
&lt;P&gt;For the moment the control is read-only, although I did start working on a “flip page” animation. The layout was done exclusively in Blend (v3 Preview) hence the mark-up has some redundant elements and over-precise co-ords. In general though I was really happy with how easy this was to put together using Blend – the product has certainly matured well.&lt;BR&gt;&lt;BR&gt;[Edit: Source code and XBAP demo can be found on subsequent post &lt;A href="http://blog.spencen.com/2009/06/24/desk-calendar-usercontrol-ndash-source-code.aspx"&gt;here&lt;/A&gt;.]&lt;/P&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/06/24/desk-calendar-usercontrol.aspx#Comments</comments><guid isPermaLink="false">b1196007-0a2b-486d-85af-da429fca7f55</guid><pubDate>Tue, 23 Jun 2009 14:35:41 GMT</pubDate></item><item><title>CodeCampSA 2009</title><link>http://blog.spencen.com/2009/06/23/codecampsa-2009.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" title="CodeCampSA 2009 - Dates" border="0" alt="CodeCampSA 2009 - Dates" align="right" src="http://blog.spencen.com/images/83489-72989/CodeCampSA%202009%20-%20Dates_6.png" width="130" height="144" /&gt;CodeCampSA organised by the Adelaide .NET User Group (ADNUG) is on again this year on the weekend of 18-19th July. Same venue as last year at Uni SA “City West” campus. For more details about the venue and to keep up to date on who will be speaking (and what they’ll be speaking about) visit the new website at &lt;a href="http://www.codecampsa.com"&gt;www.codecampsa.com&lt;/a&gt;. Kudos go to &lt;a href="http://david.gardiner.net.au"&gt;David Gardiner&lt;/a&gt; for putting the site together!&lt;/p&gt;  &lt;p&gt;So if you are in Adelaide make sure you take some time out of your weekend to come along. I’ll be amongst those presenting but don’t let that deter you!&lt;/p&gt;</description><category>Development</category><category>General</category><comments>http://blog.spencen.com/2009/06/23/codecampsa-2009.aspx#Comments</comments><guid isPermaLink="false">495c9f06-bc38-4901-83d0-0c49acef69ca</guid><pubDate>Tue, 23 Jun 2009 01:37:29 GMT</pubDate></item><item><title>Remix Videos Online</title><link>http://blog.spencen.com/2009/06/19/remix-videos-online.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;a href="http://www.microsoft.com/australia/remix/videos"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" title="Remix09 - Videos" border="0" alt="Remix09 - Videos" align="right" src="http://blog.spencen.com/images/83489-72989/Remix09%20-%20Videos_1.png" width="149" height="35" /&gt;&lt;/a&gt;The &lt;a href="http://blog.spencen.com/2009/06/11/remix09-recap.aspx"&gt;Australia Remix 09&lt;/a&gt; videos are now available on the remix website: &lt;a href="http://www.microsoft.com/australia/remix/videos"&gt;http://www.microsoft.com/australia/remix/videos&lt;/a&gt;.  &lt;p&gt;My pick is &lt;a href="http://mattmorphett.blogspot.com/2009/06/video-remix-2009.html"&gt;Matt Morphett’s&lt;/a&gt;. The talk by Damian Edwards and Tatham Oddie was also well received (at least according to twitter) [being about website development and standards it had zero interest for me personally so I skipped it].&lt;/p&gt;</description><category>Development</category><category>.NET</category><comments>http://blog.spencen.com/2009/06/19/remix-videos-online.aspx#Comments</comments><guid isPermaLink="false">173e4d0e-1a0c-4d2e-9c81-3c0ea3faf32f</guid><pubDate>Fri, 19 Jun 2009 04:20:59 GMT</pubDate></item><item><title>Box Layout Panel</title><link>http://blog.spencen.com/2009/06/19/box-layout-panel.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;P&gt;Here’s another quick WPF custom control derived from Panel. This one is a cross between a StackPanel and a WrapPanel. It supports two modes of layout – Inline and Block. &lt;/P&gt;
&lt;P&gt;Inline elements are wrapped left to right much as the same as a WrapPanel with the default Orientation = Horizontal.&lt;/P&gt;
&lt;P&gt;Block elements are stacked as per a StackPanel with the default Orientation = Vertical.&lt;/P&gt;
&lt;P&gt;The benefit of combining (a simplified version) of this logic into one layout control is that an attached property can then be used on a per child basis to determine the layout (LayoutMode = Block or Inline). This is even more convenient when the property is set via an implicit style, e.g. all TextBlocks set to Inline by default, all Buttons as Block.&lt;/P&gt;
&lt;P&gt;I also added some dependency properties for Padding (space between edge and top/left/right/bottom-most controls) and InternalPadding (the vertical and horizontal spacing &lt;EM&gt;between&lt;/EM&gt; wrapped/stacked controls).&lt;/P&gt;&lt;PRE class=code&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;BoxPanel &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Auto" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Background&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="PaleGreen" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;InternalPadding&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="4,2" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Padding&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="50,8,8,8"&amp;gt;
    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Some inline text.&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Followed by some more inline text.&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Followed by yet some more inline text.&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;BoxPanel.LayoutMode&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Block"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;A new paragraph.&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;BoxPanel.LayoutMode&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Block"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;A Button&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Below are three buttons in a line&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;BoxPanel.LayoutMode&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Inline"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;One&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;BoxPanel.LayoutMode&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Inline"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Two&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;BoxPanel.LayoutMode&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Inline"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Three&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;BoxPanel &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Background&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="LightYellow" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Padding&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="10,2" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;InternalPadding&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="4,0"&amp;gt;
        &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;The&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
        &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Image &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Source&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Passport_Photo_with_blue_background_half_size.png" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="24"/&amp;gt;
        &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;End.&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
    &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;BoxPanel&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;BoxPanel&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/PRE&gt;&lt;A href="http://11011.net/software/vspaste"&gt;&lt;/A&gt;
&lt;P&gt;&lt;A href="http://blog.spencen.com/images/83489-72989/BoxPanel%20-%20Layout%20Measures_2.png"&gt;&lt;IMG style="BORDER-RIGHT-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px" title="BoxPanel - Layout Measures" border=0 alt="BoxPanel - Layout Measures" src="http://blog.spencen.com/images/83489-72989/BoxPanel%20-%20Layout%20Measures_thumb.png" width=640 height=257&gt;&lt;/A&gt; &lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Sound a bit obscure? Trust me, I had a reason &lt;IMG border=0 src="http://blog.spencen.com/emoticons/smile.png"&gt;.&lt;/P&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/06/19/box-layout-panel.aspx#Comments</comments><guid isPermaLink="false">500b78e3-cf6e-4514-aa9d-7d56b0f80a3f</guid><pubDate>Fri, 19 Jun 2009 00:58:44 GMT</pubDate></item><item><title>VS2010 Intellisense and refactoring</title><link>http://blog.spencen.com/2009/06/18/vs2010-intellisense-and-refactoring.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I’ve been spending a little more time recently with Visual Studio 2010 Beta 1. In particular building a solution from the ground up (including TFS integration) and doing a fair bit of prototyping. Some of the new editor improvements in VS2010 are really pretty neat.&lt;/p&gt;  &lt;p&gt;One of the first changes that you notice in the editor of course is the changes to intellisense. It now includes auto-filtering, but not just by a “starts-with” search but using more of a “contains” approach. This includes the ability to search for multi-word names using abbreviations, e.g. “AQN” to match “AssemblyQualifiedName.“ Personally I think the filtering works particularly well. Having used Resharper’s intellisense filtering I wasn’t to keen on the idea, I find that implementation to be slow and it somehow feels &lt;em&gt;invasive&lt;/em&gt;. The VS2010 implementation IMHO is &lt;em&gt;much&lt;/em&gt; better.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/VS2010%20Filtered%20Intellisense.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="VS2010 Filtered Intellisense" border="0" alt="VS2010 Filtered Intellisense" src="http://blog.spencen.com/images/83489-72989/VS2010%20Filtered%20Intellisense_thumb.png" width="399" height="222" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;I’ve started using the “consume-first” toggle, which is a great way to prevent Visual Studio from being over-zealous with auto-completion. This is useful when you’re building code against a set of yet-to-be-written APIs (i.e. consuming the API first).&lt;/p&gt;  &lt;p&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="VS2010 Consume First Mode" border="0" alt="VS2010 Consume First Mode" src="http://blog.spencen.com/images/83489-72989/VS2010%20Consume%20First%20Mode_1.png" width="602" height="68" /&gt; &lt;/p&gt;  &lt;p&gt;Just press the &lt;em&gt;Ctrl+Alt+Space&lt;/em&gt; combination and auto-completion is suspended. &lt;/p&gt;  &lt;p&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="VS2010 Consume First Not Yet Created Class" border="0" alt="VS2010 Consume First Not Yet Created Class" src="http://blog.spencen.com/images/83489-72989/VS2010%20Consume%20First%20Not%20Yet%20Created%20Class_1.png" width="298" height="68" /&gt; &lt;/p&gt;  &lt;p&gt;The code generation options have also had a tweak with the “Generate other…” dialog.&lt;/p&gt;  &lt;p&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="VS2010 Generate Class" border="0" alt="VS2010 Generate Class" src="http://blog.spencen.com/images/83489-72989/VS2010%20Generate%20Class_1.png" width="268" height="136" /&gt; &lt;/p&gt;  &lt;p&gt;Lots of good options here – particularly being able to specify in which project to create the new file.&lt;/p&gt;  &lt;p&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="VS2010 Generate Other" border="0" alt="VS2010 Generate Other" src="http://blog.spencen.com/images/83489-72989/VS2010%20Generate%20Other_1.png" width="471" height="484" /&gt; &lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;(Refer &lt;a href="http://blogs.msdn.com/somasegar/archive/2008/12/19/code-focused-development-in-vs-2010.aspx"&gt;here&lt;/a&gt; for more VS2010 &lt;em&gt;code-focused&lt;/em&gt; changes).&lt;/p&gt;  &lt;p&gt;{sigh} It’s getting harder and harder to go back to Visual Studio 2008.&lt;/p&gt;</description><category>Development</category><category>.NET</category><comments>http://blog.spencen.com/2009/06/18/vs2010-intellisense-and-refactoring.aspx#Comments</comments><guid isPermaLink="false">faa2633b-5305-4fd4-9435-154823e048d3</guid><pubDate>Thu, 18 Jun 2009 01:55:08 GMT</pubDate></item><item><title>Circular Layout Panel v2</title><link>http://blog.spencen.com/2009/06/14/circular-layout-panel-v2.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;P&gt;On the flight to &lt;A href="http://blog.spencen.com/2009/06/11/remix09-recap.aspx"&gt;Remix09 last week&lt;/A&gt; I had fun putting together a simple WPF &lt;A href="http://blog.spencen.com/2009/06/11/circular-layout-panel.aspx"&gt;Circular Layout Panel&lt;/A&gt;. Today I decided that a nice “extra” feature would be to have the child elements optionally rotated so that they are normalised with the centre of the layout panel.&lt;/P&gt;
&lt;P&gt;So after adding a new attached dependency property, IsNormalised I updated my sample clock and fan menu. The following XAML…&lt;/P&gt;&lt;PRE class=code&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Window &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;x&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Class&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="PanelTest.Window1"
        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;xmlns&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;xmlns&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;x&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="http://schemas.microsoft.com/winfx/2006/xaml"
        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Title&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Circular Panel Examples" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="405" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="383"
        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;xmlns&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;local&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="clr-namespace: PanelTest"
        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;xmlns&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="clr-namespace:Spencen.Panels;assembly=Spencen.Panels"&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DockPanel&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
        &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DockPanel.Resources&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;&lt;BR&gt;          &amp;lt;!-- Stuff to make buttons pretty --&amp;gt;
&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;        &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DockPanel.Resources&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;

&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;        &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="LightYellow" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Stroke&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="LightGray" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StrokeThickness&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="1" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StrokeDashArray&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0,1,1,0" /&amp;gt;

&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;        &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;CircularPanel &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StartAngle&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="-90" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;EndAngle&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="630"&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt; &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;TextBlock.FontSize&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="24pt"&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="True"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;XII&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="True"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;I&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="True"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;II&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="True"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;III&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="True"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;IV&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="True"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;V&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="True"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;VI&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="True"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;VII&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="True"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;VIII&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="True"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;IX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="True"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;X&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="True"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;XI&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;TextBlock&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                    
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;BR&gt;                        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;BR&gt;                        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;BR&gt;                        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;BR&gt;                        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;BR&gt;                        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;BR&gt;                        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;BR&gt;                        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;BR&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: red"&gt;                        panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;BR&gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;                        panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;BR&gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;                        panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;BR&gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;                        panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;BR&gt;                        &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.9"/&amp;gt;&lt;BR&gt;
&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Line &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;x&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Name&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="secondHand" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;X1&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;X2&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Y1&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Y2&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="100" &lt;BR&gt;                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Stroke&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Red" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StrokeThickness&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="1" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StrokeStartLineCap&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Triangle" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StrokeEndLineCap&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="Round"
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.FixedAngle&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="-90" 
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.4" 
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.4"
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="True"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Line &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;x&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Name&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="minuteHand" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;X1&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="2" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;X2&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="2" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Y1&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Y2&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="70" &lt;BR&gt;                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Stroke&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StrokeThickness&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StrokeStartLineCap&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Triangle" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StrokeEndLineCap&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="Round"
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.FixedAngle&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="-60" 
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.3" 
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.3"
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="True"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Line &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;x&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Name&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="hourHand" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;X1&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;X2&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Y1&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Y2&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="50" &lt;BR&gt;                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Stroke&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StrokeThickness&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="10" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StrokeStartLineCap&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Triangle" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StrokeEndLineCap&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="Round"
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.FixedAngle&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="-180" 
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.2" 
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0.2"
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="True"/&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Ellipse &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Fill&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="Black" 
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.FixedAngle&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0"
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleX&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="0" 
                  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.RadiusScaleY&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Width&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="30" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Height&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="30" /&amp;gt;
                    
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;CircularPanel.Triggers&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;EventTrigger &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;RoutedEvent&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="Loaded"&amp;gt;
                    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;BeginStoryboard&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                        &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Storyboard&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Duration&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0:1:0" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;By&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="360" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;RepeatBehavior&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Forever" &lt;BR&gt;                                                       &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Storyboard.TargetName&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="secondHand" &lt;BR&gt;                                                       &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Storyboard.TargetProperty&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="(panels:CircularPanel.FixedAngle)"/&amp;gt;
                            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Duration&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="1:0:0" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;By&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="360"  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;RepeatBehavior&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Forever" &lt;BR&gt;                                                       &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Storyboard.TargetName&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="minuteHand" &lt;BR&gt;                                                       &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Storyboard.TargetProperty&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="(panels:CircularPanel.FixedAngle)"/&amp;gt;
                            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Duration&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="12:0:0" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;By&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="360"  &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;RepeatBehavior&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Forever" &lt;BR&gt;                                                       &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Storyboard.TargetName&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="hourHand" &lt;BR&gt;                                                       &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Storyboard.TargetProperty&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="(panels:CircularPanel.FixedAngle)"/&amp;gt;
                        &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Storyboard&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                    &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;BeginStoryboard&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;EventTrigger&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;CircularPanel.Triggers&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
        &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;CircularPanel&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;

        &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;CircularPanel &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Padding&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="45" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;StartAngle&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="-90" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;EndAngle&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="-90"&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="true"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;1&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="true"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;2&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="true"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;3&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="true"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;4&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Panel.ZIndex&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="1" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Background&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="Gray"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Menu&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="true"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;5&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="true"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;6&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="true"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;7&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;CircularPanel.IsNormalised&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="true"&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;8&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Button&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;CircularPanel.Triggers&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;EventTrigger &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;RoutedEvent&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="MouseEnter"&amp;gt;
                    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;BeginStoryboard&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                        &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Storyboard&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;To&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="-180" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Storyboard.TargetProperty&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="StartAngle"&amp;gt;
                                &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation.EasingFunction&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                                    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;ElasticEase &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Springiness&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="10" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Oscillations&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="2"/&amp;gt;
                                 &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation.EasingFunction&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                            &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;To&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Storyboard.TargetProperty&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="EndAngle"&amp;gt;
                                &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation.EasingFunction&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                                    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;ElasticEase &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Springiness&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="10" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Oscillations&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="2"/&amp;gt;
                                &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation.EasingFunction&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                            &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                        &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Storyboard&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                    &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;BeginStoryboard&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;EventTrigger&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;EventTrigger &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;RoutedEvent&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="MouseLeave"&amp;gt;
                    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;BeginStoryboard&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                        &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Storyboard&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;To&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="-90" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;AccelerationRatio&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;DecelerationRatio&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.5" &lt;BR&gt;                                                       &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Storyboard.TargetProperty&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="StartAngle"/&amp;gt;
                            &amp;lt;&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DoubleAnimation &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;To&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="-90" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;AccelerationRatio&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.5" &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;DecelerationRatio&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;="0.5" &lt;BR&gt;                                                       &lt;/SPAN&gt;&lt;SPAN style="COLOR: red"&gt;Storyboard.TargetProperty&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;="EndAngle"/&amp;gt;
                        &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Storyboard&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                    &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;BeginStoryboard&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
                &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;EventTrigger&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
            &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;CircularPanel.Triggers&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
        &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;panels&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;:&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;CircularPanel&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;    &amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;DockPanel&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=1&gt;&lt;FONT face=Verdana&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;
&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="COLOR: #a31515"&gt;Window&lt;/SPAN&gt;&lt;SPAN style="COLOR: blue"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/PRE&gt;&lt;A href="http://11011.net/software/vspaste"&gt;&lt;/A&gt;
&lt;P&gt;Now produces…&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG style="BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; DISPLAY: block; FLOAT: none; MARGIN-LEFT: auto; BORDER-TOP: 0px; MARGIN-RIGHT: auto; BORDER-RIGHT: 0px" title="CircularPanel - Normalised" border=0 alt="CircularPanel - Normalised" src="http://blog.spencen.com/images/83489-72989/CircularPanel%20-%20Normalised_3.png" width=371 height=349&gt; &lt;/P&gt;
&lt;P&gt;For reference this is so much easier than doing the same thing in WinForms. Custom layout panels really were quite a pain.&lt;/P&gt;
&lt;P&gt;Updated source code for CircularPanel is &lt;A href="http://www.spencen.com/Downloads/CircularPanel.txt"&gt;here&lt;/A&gt;.&lt;/P&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/06/14/circular-layout-panel-v2.aspx#Comments</comments><guid isPermaLink="false">0c5f39de-64b4-430c-afc0-cad714c36ddd</guid><pubDate>Sun, 14 Jun 2009 12:16:44 GMT</pubDate></item><item><title>Remix09 Recap</title><link>http://blog.spencen.com/2009/06/11/remix09-recap.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;a href="http://www.microsoft.com/australia/remix"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="Remix09" border="0" alt="Remix09" align="right" src="http://blog.spencen.com/images/83489-72989/Remix09_1.png" width="240" height="51" /&gt;&lt;/a&gt; Last year I went to Remix08 in Melbourne (scaled down aussie version of Mix08). One of the main attractions was the fact they were giving away a copy of Expression Suite 2 to every attendee – not bad for the $199 entry fee!&lt;/p&gt;  &lt;p&gt;This year I decided to go to &lt;a href="http://www.microsoft.com/australia/remix/"&gt;Remix09&lt;/a&gt; not for software bargains, but because of the quality of last year’s event. Presumably the &lt;a href="http://en.wikipedia.org/wiki/Global_financial_crisis_of_2008"&gt;GFC&lt;/a&gt; meant that the event was only held in Sydney this year. Here’s my take on the conference this year.&lt;/p&gt;  &lt;h3&gt;Good&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="Windows Mobile 6.5 Development" border="0" alt="Windows Mobile 6.5 Development" align="right" src="http://blog.spencen.com/images/83489-72989/Windows%20Mobile%206.5%20Development_1.png" width="137" height="193" /&gt;&lt;/h3&gt;  &lt;ul&gt;   &lt;li&gt;Keynote was packed with lots of good Aussie demos. &lt;/li&gt;    &lt;li&gt;&lt;a href="http://mattmorphett.blogspot.com/"&gt;Matt Morphett&lt;/a&gt; on design prototyping and &lt;a href="http://blogs.msdn.com/somasegar/archive/2009/04/25/prototyping-with-sketchflow.aspx"&gt;Sketchflow&lt;/a&gt; – for me he was the outstanding presenter of the day. [Make sure you check out the video when it comes online late next week.] &lt;/li&gt;    &lt;li&gt;Silverlight 3 and Expression 3 demos – behaviours, blend visual state manager support, animation easing, 2.5D, shaders etc. &lt;/li&gt;    &lt;li&gt;Windows Mobile 6.5 was demoed along with plans for the Australian launch and overview of the “Marketplace” to compete with “fruit phone”. Check out the Australian &lt;a href="http://www.microsoft.com/windowsmobile/en-au/developer/default.mspx"&gt;dev centre&lt;/a&gt;. &lt;/li&gt;    &lt;li&gt;&lt;strike&gt;Virtual Earth&lt;/strike&gt; &lt;strike&gt;Live&lt;/strike&gt; Bing Maps for Silverlight. Some nice demos – I liked the GIS integration. &lt;/li&gt; &lt;/ul&gt;  &lt;h3&gt;Bad&lt;/h3&gt;  &lt;ul&gt;   &lt;li&gt;Internet connections. Its a shame that every time I attend a Microsoft conference in Australia the available internet connection sucks. It’s bad enough that the delegates get WiFi that drops out and 3G/NextG saturation, but when the presenters can’t get a reliable/performant connection if really affects demos. &lt;/li&gt;    &lt;li&gt;Seating was a bit quishy in Ballroom 3. OK – if that’s all I’ve got to complain about I’m thinking this must have been a pretty good day &lt;img src="http://blog.spencen.com/emoticons/smile.png" border="0" /&gt;. &lt;/li&gt; &lt;/ul&gt;  &lt;h3&gt;Remix10?&lt;/h3&gt;  &lt;p&gt;There seems to be a question mark around having a Remix conference at all next year. I for one would be disappointed not to see the event return.&lt;/p&gt;</description><category>Development</category><category>General</category><comments>http://blog.spencen.com/2009/06/11/remix09-recap.aspx#Comments</comments><guid isPermaLink="false">5dd79518-1133-4f03-a32f-adddf6331f2b</guid><pubDate>Thu, 11 Jun 2009 11:13:55 GMT</pubDate></item><item><title>Last chance for free Xceed DataGrid for WPF!</title><link>http://blog.spencen.com/2009/06/11/last-chance-for-free-xceed-datagrid-for-wpf.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;The folks over at &lt;a href="http://www.xceed.com"&gt;Xceed&lt;/a&gt; have decided that their free &lt;a href="http://xceed.com/Grid_WPF_Intro.html"&gt;WPF DataGrid Express&lt;/a&gt; product really is too good a deal to be true &lt;img src="http://blog.spencen.com/emoticons/smile.png" border="0" /&gt;. As of 3 days from now they will start charging $300 for the Express version. If you get in quick you can still get hold of it for free! So what are you waiting for – head on over to &lt;a href="http://xceed.com/freegrid"&gt;xceed.com/freegrid&lt;/a&gt;. &lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/06/11/last-chance-for-free-xceed-datagrid-for-wpf.aspx#Comments</comments><guid isPermaLink="false">2092e8d5-5b7d-46ea-889f-802abd255545</guid><pubDate>Thu, 11 Jun 2009 10:08:49 GMT</pubDate></item><item><title>Circular Layout Panel</title><link>http://blog.spencen.com/2009/06/11/circular-layout-panel.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I’ve been given an opportunity to write a custom WPF layout panel. This is something that I’ve been wanting to try for ages but have never really had the need. Rather than jumping straight in to some potentially complex layout algorithms, I figured that I’d start with something trivial just to get the hang of things. Hence the CircularPanel was born.&lt;/p&gt;  &lt;p&gt;The CircularPanel is a simple Panel derivative that lays out its children in a circular arrangement. It has some useful dependency properties to allow some customization.&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;strong&gt;StartAngle&lt;/strong&gt; – Angle in degrees at which the first child element will be positioned. &lt;/li&gt;    &lt;li&gt;&lt;strong&gt;EndAngle&lt;/strong&gt; – Angle in degrees at which the last child element will be positioned. If the EndAngle forms a complete circle, e.g. Math.Abs(StartAngle-EndAngle) &amp;gt; 360 then rather than positioning the last element on top of the first the element an angle will be included between first and last elements. &lt;/li&gt;    &lt;li&gt;&lt;strong&gt;Padding&lt;/strong&gt; – As per standard – reduces the space within the panel used to layout the child elements. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;When adding these properties I originally missed the AffectsArrange flag on the property registration’s FrameworkElementMetaData. Without this flag changing the property (for instance in the designer) would not cause the control to re-render.&lt;/p&gt;  &lt;p&gt;I also added some attached dependency properties. These properties can be used by the child UI elements to dictate an override to the default behaviour.&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;strong&gt;FixedAngle&lt;/strong&gt; – Overrides the default automatic assignment of angle based on child index. Instead the child element is placed at the fixed angle specified in degrees. &lt;/li&gt;    &lt;li&gt;&lt;strong&gt;RadiusScaleX&lt;/strong&gt; – Allows the radius to be scaled in the X direction for this child element – defaults to 1. &lt;/li&gt;    &lt;li&gt;&lt;strong&gt;RadiusScaleY&lt;/strong&gt; – Allows the radius to be scaled in the Y direction for this child element – defaults to 1. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;When adding these attached properties I made sure I included the AffectsArrange flag. Of course this wasn’t right – changing the attached property requires the parent to re-calculate the arrangement, it doesn’t affect the applied elements arrangement. I updated the flag to AffectsParentArrange and all was good.&lt;/p&gt;  &lt;p&gt;Now I’m not sure how much real-world value this panel has – but I did get the combination of these properties to produce some interesting affects. For example:&lt;/p&gt;  &lt;p&gt;Set StartAngle = 0, EndAngle = 1080 and then have each element decrease the RadiusScaleX/Y via binding. This produces a nice sprial.&lt;/p&gt;  &lt;p&gt;&lt;img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="CircularPanel - Spiral" border="0" alt="CircularPanel - Spiral" src="http://blog.spencen.com/images/83489-72989/CircularPanel%20-%20Spiral_1.png" width="389" height="410" /&gt; &lt;/p&gt;  &lt;p&gt;Add 12 auto-placed elements, then three more using FixedAngle combined with an animation to produce a clock with hour, minute and second hands.&lt;/p&gt;  &lt;p&gt;&lt;img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="CircularPanel - Clock" border="0" alt="CircularPanel - Clock" src="http://blog.spencen.com/images/83489-72989/CircularPanel%20-%20Clock_1.png" width="122" height="118" /&gt; &lt;/p&gt;  &lt;p&gt;Use an animation over StartAngle and EndAngle to produce an effect similar to opening a fan. &lt;/p&gt;  &lt;p&gt;&lt;img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="CircularPanel - Fan" border="0" alt="CircularPanel - Fan" src="http://blog.spencen.com/images/83489-72989/CircularPanel%20-%20Fan_1.png" width="399" height="321" /&gt;&lt;/p&gt;  &lt;p&gt;Here’s the interesting code from the ArrangeOverride method on CircularPanel.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;protected override &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Size &lt;/span&gt;ArrangeOverride(&lt;span style="color: #2b91af"&gt;Size &lt;/span&gt;finalSize)
{
    &lt;span style="color: blue"&gt;int &lt;/span&gt;numberOfVisibleChildren = InternalChildren&lt;br /&gt;                                                      .OfType&amp;lt;&lt;span style="color: #2b91af"&gt;UIElement&lt;/span&gt;&amp;gt;()&lt;br /&gt;                                                      .Count(u =&amp;gt; u.Visibility != &lt;span style="color: #2b91af"&gt;Visibility&lt;/span&gt;.Collapsed &lt;br /&gt;                                                                        &amp;amp;&amp;amp; !GetFixedAngle(u).HasValue);

    &lt;span style="color: blue"&gt;if &lt;/span&gt;(numberOfVisibleChildren == 0) &lt;span style="color: blue"&gt;return &lt;/span&gt;finalSize; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: green"&gt;// Short circuit if there are no children

    &lt;/span&gt;&lt;span style="color: blue"&gt;int &lt;/span&gt;currentChildPosition = 0;
    &lt;span style="color: blue"&gt;double &lt;/span&gt;startArcAngle = StartAngle / 180 * &lt;span style="color: #2b91af"&gt;Math&lt;/span&gt;.PI;
    &lt;span style="color: blue"&gt;double &lt;/span&gt;endArcAngle = EndAngle / 180 * &lt;span style="color: #2b91af"&gt;Math&lt;/span&gt;.PI;

    &lt;span style="color: blue"&gt;double &lt;/span&gt;arcDelta;
    &lt;span style="color: blue"&gt;if &lt;/span&gt;( &lt;span style="color: #2b91af"&gt;Math&lt;/span&gt;.Abs(startArcAngle-endArcAngle) &amp;gt;= &lt;span style="color: #2b91af"&gt;Math&lt;/span&gt;.PI * 2 )
        &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: green"&gt;// If we have a full circle then don't end the last element on the &lt;br /&gt;        // EndAngle because that would overlay the StartAngle.
        &lt;/span&gt;arcDelta = (endArcAngle - startArcAngle ) /  (&lt;span style="color: blue"&gt;double&lt;/span&gt;) numberOfVisibleChildren;
    &lt;/font&gt;&lt;/font&gt;&lt;span style="color: blue"&gt;&lt;font size="1" face="Verdana"&gt;else
        &lt;/font&gt;&lt;/span&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: green"&gt;// If we have less than a full circle then make sure we spread the &lt;br /&gt;        // elements with first and last on the start and end angles.
        &lt;/span&gt;arcDelta = (endArcAngle - startArcAngle) / ((&lt;span style="color: blue"&gt;double&lt;/span&gt;)numberOfVisibleChildren - 1);

    &lt;span style="color: blue"&gt;double &lt;/span&gt;maxChildWidth = InternalChildren&lt;br /&gt;                                            .OfType&amp;lt;&lt;span style="color: #2b91af"&gt;UIElement&lt;/span&gt;&amp;gt;()&lt;br /&gt;                                            .Max( u =&amp;gt; u.DesiredSize.Width );
    &lt;span style="color: blue"&gt;double &lt;/span&gt;maxChildHeight = InternalChildren&lt;br /&gt;                                             .OfType&amp;lt;&lt;span style="color: #2b91af"&gt;UIElement&lt;/span&gt;&amp;gt;()&lt;br /&gt;                                            .Max( u =&amp;gt; u.DesiredSize.Height );

    &lt;span style="color: blue"&gt;double &lt;/span&gt;radiusX = ( finalSize.Width - Padding.Left - Padding.Right - maxChildWidth ) / 2;
    &lt;span style="color: blue"&gt;double &lt;/span&gt;radiusY = ( finalSize.Height - Padding.Top - Padding.Bottom - maxChildHeight ) / 2;

    &lt;span style="color: #2b91af"&gt;Point &lt;/span&gt;midPoint = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;( radiusX + Padding.Left + maxChildWidth / 2, &lt;br /&gt;                                            radiusY + Padding.Top + maxChildHeight / 2);

    &lt;span style="color: blue"&gt;foreach &lt;/span&gt;(&lt;span style="color: #2b91af"&gt;UIElement &lt;/span&gt;child &lt;span style="color: blue"&gt;in &lt;/span&gt;InternalChildren)
    {
        &lt;span style="color: blue"&gt;var &lt;/span&gt;childAngle = startArcAngle + arcDelta * currentChildPosition;

        &lt;span style="color: blue"&gt;double&lt;/span&gt;? fixedAngle = GetFixedAngle(child);
        &lt;span style="color: blue"&gt;if &lt;/span&gt;(fixedAngle.HasValue)
            childAngle = fixedAngle.Value / 180 * &lt;span style="color: #2b91af"&gt;Math&lt;/span&gt;.PI;

        &lt;span style="color: blue"&gt;double &lt;/span&gt;x = &lt;span style="color: #2b91af"&gt;Math&lt;/span&gt;.Cos( childAngle ) * radiusX * GetRadiusScaleX(child) + &lt;br /&gt;                        midPoint.X - child.DesiredSize.Width / 2;
        &lt;span style="color: blue"&gt;double &lt;/span&gt;y = &lt;span style="color: #2b91af"&gt;Math&lt;/span&gt;.Sin( childAngle ) * radiusY * GetRadiusScaleY(child) + &lt;br /&gt;                        midPoint.Y - child.DesiredSize.Height / 2;
        
        child.Arrange(&lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Rect&lt;/span&gt;(&lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Point&lt;/span&gt;(x, y), child.DesiredSize));

        &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: green"&gt;// Ignore collapsed children and FixedAngle children.
        &lt;/span&gt;&lt;span style="color: blue"&gt;if &lt;/span&gt;( child.Visibility != &lt;span style="color: #2b91af"&gt;Visibility&lt;/span&gt;.Collapsed &amp;amp;&amp;amp; !fixedAngle.HasValue )
            currentChildPosition++;
    }

    &lt;span style="color: blue"&gt;return &lt;/span&gt;finalSize;
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Source code with simple sample application &lt;a href="http://www.spencen.com/Downloads/CircularPanel.zip"&gt;here&lt;/a&gt;. It’s a VS2010 solution/project but should be easy to converted to VS2008 – just remove the EasingFunctions in the sample app XAML.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/06/11/circular-layout-panel.aspx#Comments</comments><guid isPermaLink="false">8a45fbb8-5a9f-4d87-aef3-d9cc4e410471</guid><pubDate>Wed, 10 Jun 2009 14:40:06 GMT</pubDate></item><item><title>Windows 7 RC and Visual Studio 2010 Beta &amp;ndash; Hands on</title><link>http://blog.spencen.com/2009/05/24/windows-7-rc-and-visual-studio-2010-beta-ndash-hands-on.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;A while back I posted that I had &lt;a href="http://blog.spencen.com/2009/01/28/windows-7-beta-experience.aspx"&gt;installed the Windows 7 64bit Beta&lt;/a&gt; on my main development machine as a dual boot with Vista and that all looked good. A couple of weeks after that post my machine inexplicably stopped booting into Vista despite my attempts to perform a repair. So I’ve been running Windows 7 now for quite a while.&lt;/p&gt;  &lt;p&gt;This week, along with everyone else I re-paved the machine with Windows 7 RC. On top of that I installed Visual Studio 2010 Beta and also jumped through the numerous hoops to install VS2010 Team Foundation Server on a virtual Windows 2008 Server instance &lt;a href="http://blog.spencen.com/2008/06/26/windows-home-server-2008.aspx"&gt;running on my WHS box&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;So far:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;The Windows 7 taskbar is improved by the additional key/mouse combos, e.g. Ctrl-LeftClick to quickly cycle through instances of an application.&lt;/li&gt;    &lt;li&gt;Windows 7 install is still the best Windows installation ever – which is good because for a while there Windows was getting consistently worse.&lt;/li&gt;    &lt;li&gt;Team Foundation Server is still a long installation process, but mainly now due just to the pre-requisites, e.g. Windows Server, IIS, SharePoint, SQL Server/Reporting Services. The install documentation is good – but it would pay to read through most of it before you install – which of course no-one (myself included) will ever do.&lt;/li&gt;    &lt;li&gt;Visual Studio 2010 is looking pretty good. If the new WPF text editor is anything to go by then the new font improvements in WPF 4/&lt;a href="http://channel9.msdn.com/pdc2008/PC18/"&gt;DirectWrite&lt;/a&gt; have worked well.&lt;/li&gt;    &lt;li&gt;There are typical Beta quirks in VS 2010 – it crashes occasionally, when you zoom in the editor the scroll bars also zoom (which looks most odd).&lt;/li&gt;    &lt;li&gt;Visual Studio start page is so easy to customize now. This &lt;a href="http://blogs.msdn.com/vsxteam/archive/2009/05/20/visual-studio-2010-beta-1-start-page-customization.aspx"&gt;article&lt;/a&gt; shows how you simple toggle an option and then build whatever XAML you like for the startpage. Either just extending what’s already there or completely re-writing or re-skinning. Very cool!&lt;/li&gt;    &lt;li&gt;A number of Visual Studio extensions are beginning to popup. Including editor extensions for creating Regex’s with intellisense, adding images inline with source code as well as some project templates, e.g. WPF application with tray icon.&lt;/li&gt; &lt;/ul&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/05/24/windows-7-rc-and-visual-studio-2010-beta-ndash-hands-on.aspx#Comments</comments><guid isPermaLink="false">d5baef0b-ae2e-4ec2-995c-885a378160d4</guid><pubDate>Sat, 23 May 2009 14:31:02 GMT</pubDate></item><item><title>Xceed WPF DataGrid &amp;ndash; Part 1</title><link>http://blog.spencen.com/2009/05/06/xceed-wpf-datagrid-ndash-part-1.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;h3&gt;Vendor Choice&lt;/h3&gt;  &lt;p&gt;Having met a number of &lt;a href="http://blog.spencen.com/2009/04/13/wpf-datagrid-tips.aspx" target="_blank"&gt;obstacles&lt;/a&gt; in getting Microsoft’s WPF DataGrid control to function as I required I decided it may be prudent to look at some of the other offerings. In the past I’ve been a big fan of the DevExpress suite of WinForms controls. &lt;/p&gt;  &lt;p&gt;However, &lt;a href="http://www.devexpress.com" target="_blank"&gt;DevExpress&lt;/a&gt; have been a little slow to get on the WPF bandwagon. In fact even now (April 2009) their grid control is still only in &lt;a href="http://www.devexpress.com/Products/NET/Controls/WPF/Grid/" target="_blank"&gt;Beta&lt;/a&gt; (expecting release in mid 2009). That’s a two full years behind the offerings from &lt;a href="http://xceed.com" target="_blank"&gt;Xceed&lt;/a&gt; and &lt;a href="http://www.infragistics.com/" target="_blank"&gt;Infragistics&lt;/a&gt; – what were they thinking!? Even if they did release now I’m really not sure I want to be working with a v1 DataGrid control when other vendors have more mature products available.&lt;/p&gt;  &lt;p&gt;I remember taking a look at the &lt;a href="http://xceed.com/Grid_WPF_Intro.html" target="_blank"&gt;Xceed WPF DataGrid&lt;/a&gt; when it first appeared – back in early 2007. At the time I found the demo app to be quite off-putting. All orange glow and black gloss with ridiculously rounded corners. &lt;/p&gt;  &lt;p&gt;However, whilst searching the internet for clues on &lt;a href="http://blog.spencen.com/2009/04/13/wpf-datagrid-tips.aspx" target="_blank"&gt;using Microsoft’s WPF DataGrid&lt;/a&gt; I had stumbled across a number of posts/articles related to the Xceed grid. In fact many more so than any other WPF grid control. So from this I figured it must have an active community, which got me to thinking that maybe it was time to see how far the Xceed offering has come in the last two years?&lt;/p&gt;  &lt;h3&gt;Comparison against Microsoft’s WPF DataGrid&lt;/h3&gt;  &lt;p&gt;So how does the Xceed DataGrid stack up against Microsoft’s? Here are some of the benefits that I’ve found so far:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;a href="http://blog.spencen.com/2009/04/30/problems-binding-to-selectedvalue-with-microsoftrsquos-wpf-datagrid.aspx" target="_blank"&gt;Binding to SelectedItem&lt;/a&gt; works just fine. &lt;/li&gt;    &lt;li&gt;ReadOnly properties support at Grid, Column and &lt;a href="http://blog.spencen.com/2009/04/25/readonly-rows-and-cells-in-a-datagrid.aspx" target="_blank"&gt;Row level&lt;/a&gt;. &lt;/li&gt;    &lt;li&gt;CheckBox column allows simple styling &lt;a href="http://blog.spencen.com/2009/04/19/when-is-a-wpf-datagrid-readonly-checkbox-not-readonly.aspx" target="_blank"&gt;whilst preserving ReadOnly&lt;/a&gt; value. &lt;/li&gt;    &lt;li&gt;Automatically supports current selection and &lt;a href="http://blog.spencen.com/2009/04/26/editing-indicator-in-datagrid-row-header.aspx" target="_blank"&gt;edit indicators&lt;/a&gt; in the row header. &lt;/li&gt;    &lt;li&gt;The grid theme matches the OS theme out of the box. This is how it should be. Sure the grid can be custom styled to suit but it only makes sense that by default the grid should match the look and feel of the standard themed controls. &lt;/li&gt;    &lt;li&gt;When auto-generating column headers it correctly uses any System.ComponentModel.DisplayName attributes that have been applied to the underlying class. &lt;/li&gt;    &lt;li&gt;There are lots of options at grid and column level that determine how a cell should enter edit mode. This is very useful for columns such as CheckBox columns where requiring a click to enter edit mode can be highly annoying (since the user would expect the click to toggle the checkbox). &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;In short – most of the stumbling blocks that I’ve hit getting the Microsoft WPF DataGrid to do something pretty trivial “just work” with the Xceed grid. That’s not to say there was no learning curve at all – I had to wrap my head around setting the ItemsSource to a DataGridCollectionView rather than direct to a ObservableCollection&amp;lt;T&amp;gt; to get anything to display for a start. But this was glaringly obvious as soon as I looked at any of the samples and “how to” guides. The supplied documentation is OK, but what impressed me most was the feedback provided on Xceeds community forums. Some really good answers provided by the Xceed team in an ultra timely fashion.&lt;/p&gt;  &lt;p&gt;So what could be improved with Xceed’s DataGrid? Well, its a little early for me to provide a comprehensive list here – but off the cuff I’d make the following suggestions:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;An easier mechanism for custom sorting. Rather than having to specific custom IComparer implemenations often it is easier to refer to an unbound property that contains the raw data. Like Microsoft’s SortMemberPath property. Hmm… I wonder if you could use a generic SortComparer to provide the same functionality?&lt;/li&gt;    &lt;li&gt;Smaller assembly size. I know these days 2.08Mb shouldn’t be an issue but for my current contract it is. We have a ClickOnce application that is deployed to machines in remote country areas. Many of these machines are still using dial-up! Adding another another 2Mb to our current 4.5Mb total is a decision not to be made too lightly. [We’ve already been burned with a ridiculously bloated NHibernate assembly (1.6Mb)] &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;As much as I’ve had fun with the Microsoft DataGrid I’m now considering making the Xceed’s my DataGrid of choice – certainly for my own projects. Expect to see a few more posts on the Xceed DataGrid coming up soon.&lt;/p&gt;  &lt;h4&gt;References&lt;/h4&gt;  &lt;p&gt;Microsoft WPF DataGrid – &lt;a href="http://www.codeplex.com/wpf"&gt;www.codeplex.com/wpf&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Xceed WPF DataGrid – &lt;a href="http://www.xceed.com"&gt;www.xceed.com&lt;/a&gt;&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/05/06/xceed-wpf-datagrid-ndash-part-1.aspx#Comments</comments><guid isPermaLink="false">9314e57e-72f1-41e5-a2a5-9190552423ff</guid><pubDate>Tue, 05 May 2009 14:44:19 GMT</pubDate></item><item><title>Hard Drive Performance</title><link>http://blog.spencen.com/2009/05/03/hard-drive-performance.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Today I spent an hour or so reconfiguring the hard disks in a few of my home machines. The idea was to boost the Windows Home Server machine&amp;#160; to 2Tb and also replace the aging 120Gb ATA drive in my main dev box (the oldest of four drives in that box and my last remaining ATA drive in service).&lt;/p&gt;  &lt;p&gt;Once I was done swapping physical drives I wanted to check that the drive I was going to use to install the Windows 7 64bit RC build was sufficiently speedy. I decided to run a &lt;a href="http://www.hdtune.com/" target="_blank"&gt;simple drive benchmark&lt;/a&gt; across my widely varying collection of disks. The results are as follows:&lt;/p&gt;  &lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;strong&gt;120Gb&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 200Gb&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 400Gb&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 640Gb&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 1500Gb&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="HDD Benchmark 120Gb" border="0" alt="HDD Benchmark 120Gb" src="http://blog.spencen.com/images/83489-72989/HDD%20Benchmark%20120Gb_1.png" width="115" height="228" /&gt;&amp;#160;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="HDD Benchmark 200Gb" border="0" alt="HDD Benchmark 200Gb" src="http://blog.spencen.com/images/83489-72989/HDD%20Benchmark%20200Gb_1.png" width="113" height="227" /&gt; &lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="HDD Benchmark 400Gb" border="0" alt="HDD Benchmark 400Gb" src="http://blog.spencen.com/images/83489-72989/HDD%20Benchmark%20400Gb_1.png" width="115" height="230" /&gt; &lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="HDD Benchmark 640Gb" border="0" alt="HDD Benchmark 640Gb" src="http://blog.spencen.com/images/83489-72989/HDD%20Benchmark%20640Gb_1.png" width="115" height="229" /&gt; &lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="HDD Benchmark 1500Gb" border="0" alt="HDD Benchmark 1500Gb" src="http://blog.spencen.com/images/83489-72989/HDD%20Benchmark%201500Gb_1.png" width="113" height="224" /&gt; &lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;So the 120Gb drive that cost me AUD$413 in July 2002 has about one third the read speed of the latest 1.5Tb drive that cost me AUD$199. &lt;/p&gt;  &lt;p&gt;From a cost perspective the 7 year old drive cost me $3.44 per gigabyte, compared to the new drive at just $0.13 per gigabyte. Still this pales in comparison to my first 20Mb hard drive that I bought 20 years ago for $950. That works out to $45000 per gigabyte!&lt;/p&gt;</description><category>General</category><category>Windows Home Server</category><comments>http://blog.spencen.com/2009/05/03/hard-drive-performance.aspx#Comments</comments><guid isPermaLink="false">264d04e2-3355-4fad-a5cb-859c8c9e2030</guid><pubDate>Sat, 02 May 2009 14:37:30 GMT</pubDate></item><item><title>Problems binding to SelectedValue with Microsoft&amp;rsquo;s WPF DataGrid</title><link>http://blog.spencen.com/2009/04/30/problems-binding-to-selectedvalue-with-microsoftrsquos-wpf-datagrid.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I had been seeing some odd exceptions being thrown by the WPF DataGrid code when interacting with the “new row” place holder. &lt;/p&gt;  &lt;p&gt;&lt;img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="GridEditing - SelectedItem FormatException" border="0" alt="GridEditing - SelectedItem FormatException" src="http://blog.spencen.com/images/83489-72989/GridEditing%20-%20SelectedItem%20FormatException_1.png" width="471" height="131" /&gt; &lt;/p&gt;  &lt;p&gt;I could identify that the error was occurring because I had data-bound to the SelectedItem property on the DataGrid like so:&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGrid &lt;/span&gt;&lt;span style="color: red"&gt;ItemsSource&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;Persons&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;AutoGenerateColumns&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;False&amp;quot;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;span style="color: blue"&gt;
&lt;/span&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;                  &lt;/span&gt;&lt;span style="color: red"&gt;SelectedItem&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;SelectedPerson&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;
                  &lt;/span&gt;&lt;span style="color: red"&gt;IsSynchronizedWithCurrentItem&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;True&amp;quot;&amp;gt;&lt;br /&gt;    …&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Both the Persons collection and SelectedPerson are properties on my ViewModel (VM). Its possible to use CollectionViewSource.GetDefaultView(Persons).CurrentItem – but I find it useful to expose and bind a simple read/write property. I’ve used this previously for ListView and ListBox without a problem.&lt;/p&gt;

&lt;p&gt;I spent some time debugging this right down through BindingExpression and DependencyObject.SetValue. As far as I can tell the exception is thrown because a ConvertBack method (on the default converter) fails when dealing with the MS.Internal.NamedObject that represents the NewItemPlaceholder. This instance is used to represent the blank “new row” if CanUserAddRows is set to True (and the collection supports it). In fact it appears as if the FormatException is actually being thrown within an exception handler whilst attempting to Trace the binding failure. Whoops!&lt;/p&gt;

&lt;p&gt;Initially I tried simply putting an try/catch block around the DataGrid code shown above. However, the exception occurred under various conditions – focus on new row, begin edit on a new row and rollback on a new row. Not all of these could be easily caught because they would leave the grid in an invalid state. Eventually the answer (HACK) became obvious – to use a converter on the binding.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;using &lt;/span&gt;System;
&lt;span style="color: blue"&gt;using &lt;/span&gt;System.Windows;
&lt;span style="color: blue"&gt;using &lt;/span&gt;System.Windows.Data;

&lt;span style="color: blue"&gt;namespace &lt;/span&gt;GridEditing.Converters
{
    &lt;span style="color: blue"&gt;public class &lt;/span&gt;&lt;span style="color: #2b91af"&gt;IgnoreNewItemPlaceHolderConverter &lt;/span&gt;: &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #2b91af"&gt;IValueConverter
    &lt;/span&gt;{
        &lt;span style="color: blue"&gt;private const string &lt;/span&gt;NewItemPlaceholderName = &lt;span style="color: #a31515"&gt;&amp;quot;{NewItemPlaceholder}&amp;quot;&lt;/span&gt;;

        &lt;span style="color: blue"&gt;public object &lt;/span&gt;Convert( &lt;span style="color: blue"&gt;object &lt;/span&gt;value, &lt;span style="color: #2b91af"&gt;Type &lt;/span&gt;targetType, &lt;span style="color: blue"&gt;object &lt;/span&gt;parameter, System.Globalization.&lt;span style="color: #2b91af"&gt;CultureInfo &lt;/span&gt;culture )
        {
            &lt;span style="color: blue"&gt;return &lt;/span&gt;value;
        }

        &lt;span style="color: blue"&gt;public object &lt;/span&gt;ConvertBack( &lt;span style="color: blue"&gt;object &lt;/span&gt;value, &lt;span style="color: #2b91af"&gt;Type &lt;/span&gt;targetType, &lt;span style="color: blue"&gt;object &lt;/span&gt;parameter, System.Globalization.&lt;span style="color: #2b91af"&gt;CultureInfo &lt;/span&gt;culture )
        {
            &lt;span style="color: blue"&gt;if &lt;/span&gt;( value != &lt;span style="color: blue"&gt;null &lt;/span&gt;&amp;amp;&amp;amp; value.ToString() == NewItemPlaceholderName )
                &lt;span style="color: blue"&gt;return &lt;/span&gt;&lt;span style="color: #2b91af"&gt;DependencyProperty&lt;/span&gt;.UnsetValue;
            &lt;span style="color: blue"&gt;return &lt;/span&gt;value;
        }
    }
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;All we are doing here is &lt;strong&gt;not&lt;/strong&gt; binding when we encounter the “new row” instance. Notice the curly braces in the NewItemPlaceholder ToString() representation? This, I believe, is why it causes the FormatException since the ToString() is used to construct a formatString which is then passed to the TraceEvent method. However, because the curly braces aren’t escaped it expects a string token number, e.g. {0} as per string.Format().&lt;/p&gt;

&lt;p&gt;Anyhow, using the converter above means that binding to DataGrid.SelectedValue works as expected with the “new row” place holder.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Window.Resources&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;   
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;converters&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;IgnoreNewItemPlaceHolderConverter &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;ignoreNewItemPlaceHolderConverter&amp;quot;/&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Window.Resources&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGrid &lt;/span&gt;&lt;span style="color: red"&gt;ItemsSource&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;Persons&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;AutoGenerateColumns&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;False&amp;quot;&lt;br /&gt;                  &lt;/span&gt;&lt;span style="color: red"&gt;SelectedItem&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;SelectedPerson&lt;/span&gt;&lt;span style="color: blue"&gt;,&lt;/span&gt;&lt;span style="color: red"&gt;Converter&lt;/span&gt;&lt;span style="color: blue"&gt;={&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;ignoreNewItemPlaceHolderConverter&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}}&amp;quot;
                  &lt;/span&gt;&lt;span style="color: red"&gt;IsSynchronizedWithCurrentItem&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;True&amp;quot;&amp;gt;&lt;br /&gt;    …&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/04/30/problems-binding-to-selectedvalue-with-microsoftrsquos-wpf-datagrid.aspx#Comments</comments><guid isPermaLink="false">691582b1-f3f2-459c-86ce-d9847c89dc90</guid><pubDate>Thu, 30 Apr 2009 13:17:05 GMT</pubDate></item><item><title>WPF Charting</title><link>http://blog.spencen.com/2009/04/29/wpf-charting.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Yesterday, I received an e-mail from a developer who has been working on a set of WPF charting controls called &lt;a href="http://wpf.amcharts.com" target="_blank"&gt;amCharts for WPF&lt;/a&gt;. I was intrigued so I went over to the website to have a look around. Suffice to say I was easily impressed enough by the demos on the website to download myself a copy of the free (link ware) version.&lt;/p&gt;  &lt;p&gt;The download, if anything, was even more impressive. The class library is concise, consistent and obviously well thought through (or evolved). Also, unlike other “bloatware” libraries this one weighs in at only just over 200Kb!&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/amCharts%20Torus_3.png"&gt;&lt;img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="amCharts Torus" border="0" alt="amCharts Torus" src="http://blog.spencen.com/images/83489-72989/amCharts%20Torus_thumb_2.png" width="260" height="159" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;If you like what you see over at &lt;a href="http://wpf.amcharts.com" target="_blank"&gt;amCharts&lt;/a&gt; and are considering purchasing the Pro version then you may want to take advantage of a 50% discount code “spencen” when placing your order. Thanks go to &lt;a href="http://www.amcharts.com/about/" target="_blank"&gt;Alan from amCharts&lt;/a&gt; for making me aware of his product and providing the discount which should be good till the end of May 2009.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/04/29/wpf-charting.aspx#Comments</comments><guid isPermaLink="false">a2ff6ecc-d995-4e66-9d47-2b484b9d9fff</guid><pubDate>Tue, 28 Apr 2009 14:33:42 GMT</pubDate></item><item><title>Editing Indicator in DataGrid Row Header</title><link>http://blog.spencen.com/2009/04/26/editing-indicator-in-datagrid-row-header.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Editable grids will quite commonly show an indicator in the row header area to indicate that a row is currently being edited. This is trivial to achieve using Microsoft’s WPF DataGrid.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="GridEditing - Edit Indicator" border="0" alt="GridEditing - Edit Indicator" src="http://blog.spencen.com/images/83489-72989/GridEditing%20-%20Edit%20Indicator_6.png" width="405" height="118" /&gt; &lt;/p&gt;  &lt;p&gt;All that is needed is a DataTemplate assigned to the RowHeaderTemplate property of the DataGrid. The template simply shows or hides the editing image based upon whether the current row is being edited.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;SolidColorBrush &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;gridLineBrush&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Color&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;#FFCDEFFE&amp;quot;/&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataTemplate &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;rowHeaderTemplate&amp;quot;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;StackPanel &lt;/span&gt;&lt;span style="color: red"&gt;Orientation&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Horizontal&amp;quot;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Image &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Name&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;editImage&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Source&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;Images/Edit.png&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Width&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;16&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Margin&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;1,0&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Visibility&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Hidden&amp;quot;/&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;StackPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataTemplate.Triggers&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataTrigger &lt;/span&gt;&lt;span style="color: red"&gt;Binding&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;RelativeSource&lt;/span&gt;&lt;span style="color: blue"&gt;={&lt;/span&gt;&lt;span style="color: #a31515"&gt;RelativeSource &lt;/span&gt;&lt;span style="color: red"&gt;FindAncestor&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;,&lt;br /&gt;                                       &lt;/span&gt;&lt;span style="color: red"&gt;AncestorType&lt;/span&gt;&lt;span style="color: blue"&gt;={&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;DataGridRow&lt;/span&gt;&lt;span style="color: blue"&gt;}},&lt;/span&gt;&lt;span style="color: red"&gt;Path&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=Item.IsEditing}&amp;quot; &lt;br /&gt;                     &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;True&amp;quot;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;TargetName&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;editImage&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;Visibility&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Visible&amp;quot;/&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataTrigger&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataTemplate.Triggers&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;

&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style &lt;/span&gt;&lt;span style="color: red"&gt;TargetType&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;DataGrid&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;GridLinesVisibility&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;All&amp;quot;/&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;HorizontalGridLinesBrush&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;gridLineBrush&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;VerticalGridLinesBrush&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;gridLineBrush&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&amp;gt;
&lt;font color="#808080"&gt;    &amp;lt;&lt;/font&gt;&lt;/span&gt;&lt;font color="#808080"&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;RowHeaderTemplate&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;rowHeaderTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;font color="#808080"&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&amp;gt;
&lt;font color="#808080"&gt;    &amp;lt;&lt;/font&gt;&lt;/span&gt;&lt;/font&gt;&lt;font color="#808080"&gt;&lt;span style="color: #a31515"&gt;Style.Resources&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font color="#808080"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: green"&gt;        &lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;SolidColorBrush &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Static &lt;/span&gt;&lt;span style="color: red"&gt;SystemColors&lt;/span&gt;&lt;span style="color: blue"&gt;.&lt;/span&gt;&lt;span style="color: red"&gt;HighlightBrushKey&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Color&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font color="#808080"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Transparent&amp;quot;/&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;SolidColorBrush &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Static &lt;/span&gt;&lt;span style="color: red"&gt;SystemColors&lt;/span&gt;&lt;span style="color: blue"&gt;.&lt;/span&gt;&lt;span style="color: red"&gt;HighlightTextBrushKey&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Color&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font color="#808080"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Black&amp;quot;/&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;SolidColorBrush &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Static &lt;/span&gt;&lt;span style="color: red"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;DataGrid&lt;/span&gt;&lt;span style="color: blue"&gt;.FocusBorderBrushKey}&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Color&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font color="#808080"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;font color="#800000"&gt;StaticResource&lt;/font&gt; &lt;font color="#ff0000"&gt;gridLineBrush&lt;/font&gt;}&amp;quot;/&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style.Resources&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&lt;font color="#808080"&gt;&amp;gt;&lt;/font&gt;
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;

&lt;p&gt;There is an IsEditingRowItem property on the DataGrid but unfortunately its private. As it happens my base model class has an IsEditing property as part of its IEditableObject implementation. So I simply bind the visibility of the image to that.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;#region &lt;/span&gt;IEditableObject Members

&lt;span style="color: blue"&gt;public void &lt;/span&gt;BeginEdit()
{
    IsEditing = &lt;span style="color: blue"&gt;true&lt;/span&gt;;
}

&lt;span style="color: blue"&gt;public void &lt;/span&gt;CancelEdit()
{
    IsEditing = &lt;span style="color: blue"&gt;false&lt;/span&gt;;
&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;font color="#008000"&gt;    // RollbackPropertyValues( _preEditValues );
&lt;/font&gt;}

&lt;span style="color: blue"&gt;public void &lt;/span&gt;EndEdit()
{
    IsEditing = &lt;span style="color: blue"&gt;false&lt;/span&gt;;
}

&lt;span style="color: blue"&gt;#endregion&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/04/26/editing-indicator-in-datagrid-row-header.aspx#Comments</comments><guid isPermaLink="false">136ac9c0-2edd-4aa0-adad-a466d5450b03</guid><pubDate>Sat, 25 Apr 2009 15:55:30 GMT</pubDate></item><item><title>ReadOnly Rows and Cells in a DataGrid</title><link>http://blog.spencen.com/2009/04/25/readonly-rows-and-cells-in-a-datagrid.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;A common requirement for a DataGrid control is to have cells, or entire rows and/or columns that are read-only, or in other words non-editable. My requirements for this are as follows:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;ReadOnly can be applied to the entire grid, a column, a row, or an individual cell. &lt;/li&gt;    &lt;li&gt;The cell(s) must not allow the cell value to be modified. &lt;/li&gt;    &lt;li&gt;The cell(s) must be highlighted in some manner (e.g. background colour) to indicate that they are different to the editable cells. &lt;/li&gt;    &lt;li&gt;ReadOnly columns require only single direction data-binding (i.e. Mode=OneWay to read-only properties). &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="GridEditing - ReadOnly Rows" border="0" alt="GridEditing - ReadOnly Rows" src="http://blog.spencen.com/images/83489-72989/GridEditing%20-%20ReadOnly%20Rows_5.png" width="404" height="117" /&gt; &lt;/p&gt;  &lt;p&gt;The Microsoft WPF DataGrid meets these requirements via:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;DataGrid.IsReadOnly property&lt;/li&gt; &lt;/ul&gt;  &lt;blockquote&gt;   &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGrid &lt;/span&gt;&lt;span style="color: red"&gt;IsReadOnly&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;True&amp;quot;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;ul&gt;
  &lt;li&gt;DataColumn.IsReadOnly property&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridTextColumn &lt;/span&gt;&lt;span style="color: red"&gt;Binding&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;FullName&lt;/span&gt;&lt;span style="color: blue"&gt;,&lt;/span&gt;&lt;span style="color: red"&gt;Mode&lt;/span&gt;&lt;span style="color: blue"&gt;=OneWay}&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;IsReadOnly&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;True&amp;quot;&lt;/span&gt;&lt;span style="color: blue"&gt;/&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;We can use a simple style targeting all DataGridCells to change the background colour. &lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style &lt;/span&gt;&lt;span style="color: red"&gt;TargetType&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;DataGridCell&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;&amp;gt;
&lt;/span&gt;&lt;span style="color: green"&gt;    &lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style.Triggers&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: blue"&gt;        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Trigger &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;IsReadOnly&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;True&amp;quot;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;Background&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;LightGray&amp;quot;/&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Trigger&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style.Triggers&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;So the only thing that’s really missing here is the ability to mark an entire row as read-only. In my experience this is a common requirement – we have a list of records displayed in the grid some of which are locked/completed/secured, whilst others can be edited.&lt;/p&gt;

&lt;p&gt;One solution is to override the OnBeginningEdit method of the DataGrid. The following example assumes that I have an attached property ControlSupport.IsReadOnly.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;protected override void &lt;/span&gt;OnBeginningEdit( &lt;span style="color: #2b91af"&gt;DataGridBeginningEditEventArgs &lt;/span&gt;e )
{
    &lt;span style="color: blue"&gt;base&lt;/span&gt;.OnBeginningEdit( e );

    &lt;span style="color: blue"&gt;bool &lt;/span&gt;isReadOnlyRow = &lt;font color="#008080"&gt;ControlSupport&lt;/font&gt;.GetIsReadOnly( e.Row );
    &lt;span style="color: blue"&gt;if &lt;/span&gt;( isReadOnlyRow )
        e.Cancel = &lt;span style="color: blue"&gt;true&lt;/span&gt;;
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;However, since I’ve got used to “tweaking” some of the DataGrid code I decided to instead to simply add an IsReadOnly property to the DataGridRow class.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;public bool &lt;/span&gt;IsReadOnly
{
    &lt;span style="color: blue"&gt;get &lt;/span&gt;{ &lt;span style="color: blue"&gt;return &lt;/span&gt;(&lt;span style="color: blue"&gt;bool&lt;/span&gt;) GetValue( IsReadOnlyProperty ); }
    &lt;span style="color: blue"&gt;set &lt;/span&gt;{ SetValue( IsReadOnlyProperty, &lt;span style="color: blue"&gt;value &lt;/span&gt;); }
}

&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="background: #f9fff9; color: green"&gt;// Using a DependencyProperty as the backing store for IsReadOnly.  This enables animation, styling, binding, etc...
&lt;/span&gt;&lt;span style="color: blue"&gt;public static readonly &lt;/span&gt;&lt;span style="color: #2b91af"&gt;DependencyProperty &lt;/span&gt;IsReadOnlyProperty =
        &lt;span style="color: #2b91af"&gt;DependencyProperty&lt;/span&gt;.Register( &lt;span style="color: #a31515"&gt;&amp;quot;IsReadOnly&amp;quot;&lt;/span&gt;, &lt;span style="color: blue"&gt;typeof&lt;/span&gt;( &lt;span style="color: blue"&gt;bool &lt;/span&gt;), &lt;span style="color: blue"&gt;typeof&lt;/span&gt;( &lt;span style="color: #2b91af"&gt;DataGridRow &lt;/span&gt;), &lt;br /&gt;            &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;FrameworkPropertyMetadata&lt;/span&gt;( &lt;span style="color: blue"&gt;false&lt;/span&gt;, OnNotifyRowAndCellsPropertyChanged ) );&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;private static void &lt;/span&gt;OnNotifyRowAndCellsPropertyChanged( &lt;span style="color: #2b91af"&gt;DependencyObject &lt;/span&gt;d, &lt;br /&gt;                                                                                 &lt;span style="color: #2b91af"&gt;DependencyPropertyChangedEventArgs &lt;/span&gt;e )
{
    ( d &lt;span style="color: blue"&gt;as &lt;/span&gt;&lt;span style="color: #2b91af"&gt;DataGridRow &lt;/span&gt;).NotifyPropertyChanged( d, e, &lt;span style="color: #2b91af"&gt;NotificationTarget&lt;/span&gt;.Rows | &lt;span style="color: #2b91af"&gt;NotificationTarget&lt;/span&gt;.Cells );
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Then I just needed to make sure that the read-only property DataGridCell.IsReadOnly would correctly return the right value when its row was marked as read-only.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;private static object &lt;/span&gt;OnCoerceIsReadOnly(&lt;span style="color: #2b91af"&gt;DependencyObject &lt;/span&gt;d, &lt;span style="color: blue"&gt;object &lt;/span&gt;baseValue)
{
    &lt;span style="color: blue"&gt;var &lt;/span&gt;cell = d &lt;span style="color: blue"&gt;as &lt;/span&gt;&lt;span style="color: #2b91af"&gt;DataGridCell&lt;/span&gt;;
    &lt;span style="color: blue"&gt;var &lt;/span&gt;column = cell.Column;
    &lt;span style="color: blue"&gt;var &lt;/span&gt;row = cell.RowOwner;
    &lt;span style="color: blue"&gt;var &lt;/span&gt;dataGrid = cell.DataGridOwner;
    &lt;span style="color: blue"&gt;return &lt;/span&gt;&lt;span style="color: #2b91af"&gt;DataGridHelper&lt;/span&gt;.GetCoercedTransferPropertyValue(
        cell, 
        baseValue, 
        IsReadOnlyProperty,
        row,
        &lt;span style="color: #2b91af"&gt;DataGridRow&lt;/span&gt;.IsReadOnlyProperty,
        column,   
        &lt;span style="color: #2b91af"&gt;DataGridColumn&lt;/span&gt;.IsReadOnlyProperty,
        dataGrid, 
        &lt;span style="color: #2b91af"&gt;DataGrid&lt;/span&gt;.IsReadOnlyProperty);
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;There’s a fairly complex series of notification propagation calls going on within the DataGrid classes. For this solution to work it requires that the DataGridRow.IsReadOnly property changing flows down and causes the read-only DataGridCell.IsReadOnly property to be re-evaulated (via the coerce method above). I had to add another GetCoervedTransferPropertyValue method that took another pair of object/property parameters, and also tweaked the DataGridCell.NotifyPropertyChanged as follows:&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;else if &lt;/span&gt;(e.Property == &lt;span style="color: #2b91af"&gt;DataGrid&lt;/span&gt;.IsReadOnlyProperty || &lt;br /&gt;         e.Property == &lt;span style="color: #2b91af"&gt;DataGridColumn&lt;/span&gt;.IsReadOnlyProperty || &lt;br /&gt;         e.Property == &lt;span style="color: #2b91af"&gt;DataGridRow&lt;/span&gt;.IsReadOnlyProperty || &lt;br /&gt;         e.Property == IsReadOnlyProperty)
{
    &lt;span style="color: #2b91af"&gt;DataGridHelper&lt;/span&gt;.TransferProperty(&lt;span style="color: blue"&gt;this&lt;/span&gt;, IsReadOnlyProperty);
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Now in my XAML I can do the following (assuming I have an IsReadOnly property on my business objects):&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style &lt;/span&gt;&lt;span style="color: red"&gt;TargetType&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;DataGridRow&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;&amp;gt;
     &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;IsReadOnly&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;IsReadOnly&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/04/25/readonly-rows-and-cells-in-a-datagrid.aspx#Comments</comments><guid isPermaLink="false">8f5a3219-22c1-4495-80e0-ff4e2ed70d91</guid><pubDate>Sat, 25 Apr 2009 13:32:02 GMT</pubDate></item><item><title>When is a WPF DataGrid read-only CheckBox not read-only?</title><link>http://blog.spencen.com/2009/04/19/when-is-a-wpf-datagrid-readonly-checkbox-not-readonly.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I found the answer to this riddle when I decided to style the &lt;strong&gt;DataGridCheckBoxColumn&lt;/strong&gt; of Microsoft’s WPF DataGrid. By default the CheckBox displayed by the column template is not centered horizontally or vertically. I thought this looked at little tacky so I decided to apply a custom Style to the &lt;strong&gt;ElementStyle&lt;/strong&gt; (and &lt;strong&gt;EditElementStyle&lt;/strong&gt;) property.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style  &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;CheckBoxStyle&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;TargetType&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;CheckBox&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;BasedOn&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: blue"&gt;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;CheckBox&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;span style="color: blue"&gt;&lt;font size="1" face="Verdana"&gt;}}&amp;quot;&amp;gt;
&lt;/font&gt;&lt;/span&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;HorizontalAlignment&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Center&amp;quot;/&amp;gt; &lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;Margin&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;0,2,0,0&amp;quot;/&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridCheckBoxColumn &lt;/span&gt;&lt;span style="color: red"&gt;Binding&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;IsPensioner&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;&lt;br /&gt;                                                  Header&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;Pensioner?&amp;quot; &lt;br /&gt;                                                  &lt;/span&gt;&lt;span style="color: red"&gt;ElementStyle&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;CheckBoxStyle&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot; &lt;br /&gt;                                                  &lt;/span&gt;&lt;span style="color: red"&gt;EditingElementStyle&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;CheckBoxStyle&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&amp;gt;
&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridCheckBoxColumn &lt;/span&gt;&lt;span style="color: red"&gt;Binding&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;IsEditing&lt;/span&gt;&lt;span style="color: blue"&gt;,&lt;/span&gt;&lt;span style="color: red"&gt;Mode&lt;/span&gt;&lt;span style="color: blue"&gt;=OneWay}&amp;quot; &lt;br /&gt;                                                  &lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;span style="color: blue"&gt;&lt;font size="1" face="Verdana"&gt;=&amp;quot;Is Editing&amp;quot;&lt;/font&gt;&lt;/span&gt;&lt;br /&gt;                                                  &lt;/span&gt;&lt;span style="color: red"&gt;ElementStyle&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;CheckBoxStyle&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot; &lt;br /&gt;&lt;br /&gt;                                                  &lt;/span&gt;&lt;span style="color: red"&gt;IsReadOnly&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;True&amp;quot;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;span style="color: blue"&gt;&lt;font size="1" face="Verdana"&gt;/&amp;gt;&lt;/font&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;What I later discovered is that applying this style has somehow made my read-only CheckBox editable. But only via mouse clicks! Using the keyboard to focus to the cell and pressing Space didn’t cause the CheckBox to toggle, but left clicking on the CheckBox did. What’s going on?&lt;/p&gt;

&lt;p&gt;My &lt;strong&gt;guess&lt;/strong&gt; is that the default style applied to the &lt;strong&gt;DataGridCheckBoxColumn&lt;/strong&gt;’s CheckBox in non-edit mode (ElementStyle) sets the &lt;strong&gt;IsHitTestVisible&lt;/strong&gt; property to &lt;strong&gt;False&lt;/strong&gt; to disable clicking on the cell. The keyboard events are swallowed by the DataGrid using Preview events – so no styling is required to prevent keyboard access.&lt;/p&gt;

&lt;p&gt;The rule would therefore appear to be that if you set &lt;strong&gt;ElementStyle&lt;/strong&gt; on the &lt;strong&gt;DataGridCheckBoxColumn&lt;/strong&gt; you must include &lt;strong&gt;IsHitTestVisible=”False”&lt;/strong&gt; to prevent it from “seeming” that the control allows edits.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style  &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;CheckBoxStyle&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;TargetType&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;CheckBox&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;BasedOn&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: blue"&gt;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;CheckBox&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}}&amp;quot;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;HorizontalAlignment&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Center&amp;quot;/&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;Margin&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;0,2,0,0&amp;quot;/&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style  &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;ReadOnlyCheckBoxStyle&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;TargetType&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;CheckBox&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;BasedOn&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;CheckBoxStyle&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Setter &lt;/span&gt;&lt;span style="color: red"&gt;Property&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;IsHitTestVisible&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Value&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;False&amp;quot;/&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Style&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridCheckBoxColumn &lt;/span&gt;&lt;span style="color: red"&gt;Binding&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;IsPensioner&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot; 
                                &lt;/span&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Pensioner?&amp;quot; 
                                &lt;/span&gt;&lt;span style="color: red"&gt;ElementStyle&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;ReadOnlyCheckBoxStyle&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot; 
                                &lt;/span&gt;&lt;span style="color: red"&gt;EditingElementStyle&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;CheckBoxStyle&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&amp;gt;
&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridCheckBoxColumn &lt;/span&gt;&lt;span style="color: red"&gt;Binding&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;IsEditing&lt;/span&gt;&lt;span style="color: blue"&gt;,&lt;/span&gt;&lt;span style="color: red"&gt;Mode&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=OneWay}&amp;quot; 
                                &lt;/span&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Is Editing&amp;quot;
                                &lt;/span&gt;&lt;span style="color: red"&gt;ElementStyle&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;ReadOnlyCheckBoxStyle&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot; 
                                &lt;/span&gt;&lt;span style="color: red"&gt;IsReadOnly&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;True&amp;quot;/&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/04/19/when-is-a-wpf-datagrid-readonly-checkbox-not-readonly.aspx#Comments</comments><guid isPermaLink="false">eecb3f89-8dbb-4f4c-8ed2-2a107b56d36d</guid><pubDate>Sun, 19 Apr 2009 13:50:20 GMT</pubDate></item><item><title>Binding an Enum Property to a ComboBox using customized text</title><link>http://blog.spencen.com/2009/04/19/binding-an-enum-property-to-a-combobox-using-customized-text.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;h3&gt;The problem&lt;/h3&gt;  &lt;p&gt;I want to data bind a property on my Model to a ComboBox that allows selection from a list of Enum values. For example, my &lt;strong&gt;Person&lt;/strong&gt; class has a &lt;strong&gt;HighestEducationLevel&lt;/strong&gt; property of type &lt;strong&gt;EducationLevel&lt;/strong&gt;.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="GridEditing" border="0" alt="GridEditing" src="http://blog.spencen.com/images/83489-72989/GridEditing_6.png" width="379" height="370" /&gt; &lt;/p&gt;  &lt;p&gt;The second part of this problem is that I want to provide an optional customized text description for each of my enumeration values. For example, the enumeration value&lt;strong&gt; EducationLevel.PreSchool&lt;/strong&gt; should be displayed as “Pre-school” in the ComboBox.&lt;/p&gt;  &lt;p&gt;&lt;img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="GridEditing - TypeConverter ComboBox" border="0" alt="GridEditing - TypeConverter ComboBox" src="http://blog.spencen.com/images/83489-72989/GridEditing%20-%20TypeConverter%20ComboBox_3.png" width="209" height="278" /&gt; &lt;/p&gt;  &lt;h3&gt;Solution 1 – Bind to Enum.GetValues()&lt;/h3&gt;  &lt;p&gt;There are plenty of blog posts and forum answers that show the following technique that can be accomplished in XAML alone. I first saw this on a &lt;a href="http://www.codeproject.com/KB/WPF/FillComboboxWSortedEnum.aspx" target="_blank"&gt;post by Karl Schifflet&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;You define a static resource as an ObjectDataProvider that simply uses a method call to get an array of the enumerated values.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ObjectDataProvider &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;EducationLevelList&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;MethodName&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;GetValues&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;ObjectType&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;local&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;EducationLevel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ObjectDataProvider.MethodParameters&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;TypeName&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;local:EducationLevel&amp;quot;/&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ObjectDataProvider.MethodParameters&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ObjectDataProvider&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;This can then be data bound as the ItemsSource for a ComboBox – in my case its a ComboBox column of a WPF DataGrid.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridComboBoxColumn &lt;/span&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Education Level&amp;quot; 
                                &lt;/span&gt;&lt;span style="color: red"&gt;SelectedValueBinding&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;HighestEducationLevel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;
                                &lt;/span&gt;&lt;span style="color: red"&gt;ItemsSource&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;Source&lt;/span&gt;&lt;span style="color: blue"&gt;={&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;EducationLevelList&lt;/span&gt;&lt;span style="color: blue"&gt;}}&amp;quot;/&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;h3&gt;Solution 2 – Bind to Custom Method&lt;/h3&gt;

&lt;p&gt;This technique can be taken a step further by providing your own method to be used by the ObjectDataProvider rather than relying on Enum.GetValues(Type). This then provides the opportunity to provide custom sorting, filtering and text for the list of enumeration values.&lt;/p&gt;

&lt;p&gt;One way to achieve the custom text values is to have the method return a list of “wrapper” objects that provide access to both the underlying enumeration value and the custom text.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;&lt;font size="1" face="Verdana"&gt;public class &lt;/font&gt;&lt;/span&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #2b91af"&gt;EnumMapper
&lt;/span&gt;{
    &lt;span style="color: blue"&gt;public &lt;/span&gt;EnumMapper( &lt;span style="color: blue"&gt;object &lt;/span&gt;enumValue, &lt;span style="color: blue"&gt;string &lt;/span&gt;enumDescription )
    {
        Enum = enumValue;
        Description = enumDescription;
    }

    &lt;span style="color: blue"&gt;public object &lt;/span&gt;Enum { &lt;span style="color: blue"&gt;get&lt;/span&gt;; &lt;span style="color: blue"&gt;private set&lt;/span&gt;; }
    &lt;span style="color: blue"&gt;public string &lt;/span&gt;Description { &lt;span style="color: blue"&gt;get&lt;/span&gt;; &lt;span style="color: blue"&gt;private set&lt;/span&gt;; }
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;

&lt;p&gt;The enum type can then have each of its members (fields) that require a custom text decorated with a custom attribute as follows.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;&lt;font size="1" face="Verdana"&gt;public enum &lt;/font&gt;&lt;/span&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #2b91af"&gt;EducationLevel
&lt;/span&gt;{
    None,
    [&lt;span style="color: #2b91af"&gt;EnumDisplayName&lt;/span&gt;(&lt;span style="color: #a31515"&gt;&amp;quot;Pre-school&amp;quot;&lt;/span&gt;)]
    PreSchool,
    [&lt;span style="color: #2b91af"&gt;EnumDisplayName&lt;/span&gt;( &lt;span style="color: #a31515"&gt;&amp;quot;Junior school&amp;quot; &lt;/span&gt;)]
    JuniorSchool,
    [&lt;span style="color: #2b91af"&gt;EnumDisplayName&lt;/span&gt;( &lt;span style="color: #a31515"&gt;&amp;quot;Senior School&amp;quot; &lt;/span&gt;)]
    SeniorSchool,
    Graduate,
    [&lt;span style="color: #2b91af"&gt;EnumDisplayName&lt;/span&gt;( &lt;span style="color: #a31515"&gt;&amp;quot;Post Graduate&amp;quot; &lt;/span&gt;)]
    PostGraduate,
    Professor
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;The new attribute class itself is trivial…&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1" face="Verdana"&gt;[&lt;span style="color: #2b91af"&gt;AttributeUsage&lt;/span&gt;(&lt;span style="color: #2b91af"&gt;AttributeTargets&lt;/span&gt;.Field, AllowMultiple=&lt;span style="color: blue"&gt;false&lt;/span&gt;)]
&lt;span style="color: blue"&gt;public class &lt;/span&gt;&lt;span style="color: #2b91af"&gt;EnumDisplayNameAttribute &lt;/span&gt;: &lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #2b91af"&gt;Attribute
&lt;/span&gt;{
    &lt;span style="color: blue"&gt;public &lt;/span&gt;EnumDisplayNameAttribute( &lt;span style="color: blue"&gt;string &lt;/span&gt;displayName )
    {
        DisplayName = displayName;
    }

    &lt;span style="color: blue"&gt;public string &lt;/span&gt;DisplayName { &lt;span style="color: blue"&gt;get&lt;/span&gt;; &lt;span style="color: blue"&gt;set&lt;/span&gt;; }
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;The custom method to generate the list then becomes...&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;public static &lt;/span&gt;&lt;span style="color: #2b91af"&gt;IList&lt;/span&gt;&amp;lt;&lt;span style="color: #2b91af"&gt;EnumMapper&lt;/span&gt;&amp;gt; GetEnumDescriptions( &lt;span style="color: #2b91af"&gt;Type &lt;/span&gt;enumType )
{
    &lt;span style="color: blue"&gt;if &lt;/span&gt;( !enumType.IsEnum )
        &lt;span style="color: blue"&gt;throw new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;ArgumentException&lt;/span&gt;( &lt;span style="color: #a31515"&gt;&amp;quot;This method can only be called for enum types.&amp;quot; &lt;/span&gt;);

    &lt;span style="color: blue"&gt;var &lt;/span&gt;list = &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color: #2b91af"&gt;EnumMapper&lt;/span&gt;&amp;gt;();

    &lt;span style="color: blue"&gt;foreach &lt;/span&gt;( &lt;span style="color: blue"&gt;var &lt;/span&gt;enumValue &lt;span style="color: blue"&gt;in &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Enum&lt;/span&gt;.GetValues( enumType ) )
        list.Add( &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;EnumMapper&lt;/span&gt;( enumValue, enumType.GetDisplayName( enumValue ) ) );

    &lt;span style="color: blue"&gt;return &lt;/span&gt;list;
}

&lt;span style="color: blue"&gt;public static string &lt;/span&gt;GetDisplayName( &lt;span style="color: blue"&gt;this &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Type &lt;/span&gt;enumType, &lt;span style="color: blue"&gt;object &lt;/span&gt;enumValue )
{
    &lt;span style="color: blue"&gt;if &lt;/span&gt;( !enumType.IsEnum )
        &lt;span style="color: blue"&gt;throw new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;ArgumentException&lt;/span&gt;( &lt;span style="color: #a31515"&gt;&amp;quot;This method can only be called for enum types.&amp;quot; &lt;/span&gt;);

    &lt;span style="color: blue"&gt;var &lt;/span&gt;displayNameAttribute = enumType.GetField( enumValue.ToString() )&lt;br /&gt;                                                         .GetCustomAttributes( &lt;span style="color: blue"&gt;typeof&lt;/span&gt;( &lt;span style="color: #2b91af"&gt;EnumDisplayNameAttribute &lt;/span&gt;), &lt;span style="color: blue"&gt;false &lt;/span&gt;)&lt;br /&gt;                                                         .FirstOrDefault() &lt;span style="color: blue"&gt;as &lt;/span&gt;&lt;span style="color: #2b91af"&gt;EnumDisplayNameAttribute&lt;/span&gt;;
    &lt;span style="color: blue"&gt;if &lt;/span&gt;( displayNameAttribute != &lt;span style="color: blue"&gt;null &lt;/span&gt;)
        &lt;span style="color: blue"&gt;return &lt;/span&gt;displayNameAttribute.DisplayName;

    &lt;span style="color: blue"&gt;return &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Enum&lt;/span&gt;.GetName( enumType, enumValue );
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;

&lt;p&gt;The XAML has to change a little. First the ObjectDataProvider must use the new method, and secondly because the ItemsSource is now a list of &lt;strong&gt;EnumMapper&lt;/strong&gt; instances we must provide DisplayMemberPath and SelectedValuePath properties for the ComboBox.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ObjectDataProvider &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;EducationLevelList&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;MethodName&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;GetEnumDescriptions&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;ObjectType&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;local&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;BindingSupport&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ObjectDataProvider.MethodParameters&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;TypeName&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;local:EducationList&amp;quot;/&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ObjectDataProvider.MethodParameters&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ObjectDataProvider&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridComboBoxColumn &lt;/span&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Highest Education Level&amp;quot; 
&lt;/span&gt;&lt;span style="color: blue"&gt;                                &lt;/span&gt;&lt;span style="color: red"&gt;SelectedValueBinding&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;HighestEducationLevel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;
                                &lt;/span&gt;&lt;span style="color: red"&gt;ItemsSource&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;Source&lt;/span&gt;&lt;span style="color: blue"&gt;={&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;EducationLevelList&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}}&amp;quot;
                                &lt;/span&gt;&lt;span style="color: red"&gt;DisplayMemberPath&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Description&amp;quot;
                                &lt;/span&gt;&lt;span style="color: red"&gt;SelectedValuePath&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;Enum&amp;quot;/&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;h3&gt;Solution 3 – Use a customized TypeConverter&lt;/h3&gt;

&lt;p&gt;Solution 2 provides quite a lot of flexibility but it does mean a couple of extra property setters are required in the XAML (though I guess these could go into a Style). The third approach is to use a TypeConverter to “magically” convert enum values to strings. The major benefit of this approach is that it will work not just for ComboBoxs but anywhere an enum is bound to text property, e.g. in a TextBlock or TextBox.&lt;/p&gt;

&lt;p&gt;First we declare a new TypeConverter that has some special processing that allows its to generate the custom text. All enums by default use the EnumConverter anyway – we are just providing an extra lookup to check for a custom attribute. &lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;public class &lt;/span&gt;&lt;span style="color: #2b91af"&gt;EnumTypeConverter &lt;/span&gt;: &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #2b91af"&gt;EnumConverter
&lt;/span&gt;{
    &lt;span style="color: blue"&gt;public &lt;/span&gt;EnumTypeConverter( &lt;span style="color: #2b91af"&gt;Type &lt;/span&gt;enumType ) : &lt;span style="color: blue"&gt;base&lt;/span&gt;( enumType ) { }

    &lt;span style="color: blue"&gt;public override object &lt;/span&gt;ConvertTo( &lt;span style="color: #2b91af"&gt;ITypeDescriptorContext &lt;/span&gt;context, &lt;span style="color: #2b91af"&gt;CultureInfo &lt;/span&gt;culture, &lt;span style="color: blue"&gt;object &lt;/span&gt;value, &lt;span style="color: #2b91af"&gt;Type &lt;/span&gt;destinationType )
    {
        &lt;span style="color: blue"&gt;if &lt;/span&gt;( destinationType == &lt;span style="color: blue"&gt;typeof&lt;/span&gt;(&lt;span style="color: blue"&gt;string&lt;/span&gt;) &amp;amp;&amp;amp; value != &lt;span style="color: blue"&gt;null &lt;/span&gt;)
        {
            &lt;span style="color: blue"&gt;var &lt;/span&gt;enumType = value.GetType();
            &lt;span style="color: blue"&gt;if &lt;/span&gt;( enumType.IsEnum )
                &lt;span style="color: blue"&gt;return &lt;/span&gt;GetDisplayName( value );
        }

        &lt;span style="color: blue"&gt;return base&lt;/span&gt;.ConvertTo( context, culture, value, destinationType );
    }&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;    private string &lt;/span&gt;GetDisplayName( &lt;span style="color: blue"&gt;object &lt;/span&gt;enumValue )
    {
        &lt;span style="color: blue"&gt;var &lt;/span&gt;displayNameAttribute = EnumType.GetField( enumValue.ToString() )&lt;br /&gt;                                                             .GetCustomAttributes( &lt;span style="color: blue"&gt;typeof&lt;/span&gt;( &lt;span style="color: #2b91af"&gt;EnumDisplayNameAttribute &lt;/span&gt;), &lt;span style="color: blue"&gt;false &lt;/span&gt;)&lt;br /&gt;                                                             .FirstOrDefault() &lt;span style="color: blue"&gt;as &lt;/span&gt;&lt;span style="color: #2b91af"&gt;EnumDisplayNameAttribute&lt;/span&gt;;
        &lt;span style="color: blue"&gt;if &lt;/span&gt;( displayNameAttribute != &lt;span style="color: blue"&gt;null &lt;/span&gt;)
            &lt;span style="color: blue"&gt;return &lt;/span&gt;displayNameAttribute.DisplayName;

        &lt;span style="color: blue"&gt;return &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Enum&lt;/span&gt;.GetName( EnumType, enumValue );
    }
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;The next step is to make sure that all our enums use the new TypeConverter. This is done by decorating the enum with a TypeConverter attribute.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;[&lt;span style="color: #2b91af"&gt;TypeConverter&lt;/span&gt;(&lt;span style="color: blue"&gt;typeof&lt;/span&gt;(&lt;span style="color: #2b91af"&gt;EnumTypeConverter&lt;/span&gt;))]
&lt;span style="color: blue"&gt;public enum &lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #2b91af"&gt;EducationLevel
&lt;/span&gt;{
    None,
    [&lt;span style="color: #2b91af"&gt;EnumDisplayName&lt;/span&gt;(&lt;span style="color: #a31515"&gt;&amp;quot;Pre-school&amp;quot;&lt;/span&gt;)]
    PreSchool,
    [&lt;span style="color: #2b91af"&gt;EnumDisplayName&lt;/span&gt;( &lt;span style="color: #a31515"&gt;&amp;quot;Junior school&amp;quot; &lt;/span&gt;)]
    JuniorSchool,
    [&lt;span style="color: #2b91af"&gt;EnumDisplayName&lt;/span&gt;( &lt;span style="color: #a31515"&gt;&amp;quot;Senior School&amp;quot; &lt;/span&gt;)]
    SeniorSchool,
    Graduate,
    [&lt;span style="color: #2b91af"&gt;EnumDisplayName&lt;/span&gt;( &lt;span style="color: #a31515"&gt;&amp;quot;Post Graduate&amp;quot; &lt;/span&gt;)]
    PostGraduate,
    Professor
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Now we can change our XAML back to its original simplified form (as per Solution 1) and yet we still get our customized text appearing.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ObjectDataProvider &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;EducationLevelList&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;MethodName&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;GetValues&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;ObjectType&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;local&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;EducationLevel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ObjectDataProvider.MethodParameters&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;Type &lt;/span&gt;&lt;span style="color: red"&gt;TypeName&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;local:EducationLevel&amp;quot;/&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ObjectDataProvider.MethodParameters&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ObjectDataProvider&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridComboBoxColumn &lt;/span&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Education Level&amp;quot; 
        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;&lt;span style="color: red"&gt;SelectedValueBinding&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;HighestEducationLevel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot; 
        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;&lt;span style="color: red"&gt;ItemsSource&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;Source&lt;/span&gt;&lt;span style="color: blue"&gt;={&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;EducationLevelList&lt;/span&gt;&lt;span style="color: blue"&gt;}}&amp;quot;/&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;

&lt;h3&gt;Other Considerations&lt;/h3&gt;

&lt;p&gt;In the example here I’ve just used hard-coded strings for the &lt;strong&gt;EnumDisplayName&lt;/strong&gt; attributes. However, there is no reason these couldn’t be resource IDs or the like and the GetDisplayName method changed accordingly.&lt;/p&gt;

&lt;p&gt;Also, if we want the TypeConverter to have the ability to ConvertFrom the customized text then we need to do a little more work. This is handy in the scenarios where the user may be able to type (as opposed to select from a list) the enum values. So the EnumTypeConverter changes to the following.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;public class &lt;/span&gt;&lt;span style="color: #2b91af"&gt;EnumTypeConverter &lt;/span&gt;: &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #2b91af"&gt;EnumConverter
&lt;/span&gt;{
    &lt;span style="color: blue"&gt;private &lt;/span&gt;&lt;span style="color: #2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style="color: #2b91af"&gt;EnumMapper&lt;/span&gt;&amp;gt; _mappings;

    &lt;span style="color: blue"&gt;public &lt;/span&gt;EnumTypeConverter( &lt;span style="color: #2b91af"&gt;Type &lt;/span&gt;enumType ) : &lt;span style="color: blue"&gt;base&lt;/span&gt;( enumType )
    {
        _mappings = &lt;span style="color: blue"&gt;from object &lt;/span&gt;enumValue &lt;span style="color: blue"&gt;in &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Enum&lt;/span&gt;.GetValues(enumType)
                     &lt;span style="color: blue"&gt;select new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;EnumMapper&lt;/span&gt;( enumValue, GetDisplayName(enumValue) );
    }

    &lt;span style="color: blue"&gt;public override object &lt;/span&gt;ConvertTo( &lt;span style="color: #2b91af"&gt;ITypeDescriptorContext &lt;/span&gt;context, &lt;span style="color: #2b91af"&gt;CultureInfo &lt;/span&gt;culture, &lt;span style="color: blue"&gt;object &lt;/span&gt;value, &lt;span style="color: #2b91af"&gt;Type &lt;/span&gt;destinationType )
    {
        &lt;span style="color: blue"&gt;if &lt;/span&gt;( destinationType == &lt;span style="color: blue"&gt;typeof&lt;/span&gt;(&lt;span style="color: blue"&gt;string&lt;/span&gt;) &amp;amp;&amp;amp; value != &lt;span style="color: blue"&gt;null &lt;/span&gt;)
        {
            &lt;span style="color: blue"&gt;var &lt;/span&gt;enumType = value.GetType();
            &lt;span style="color: blue"&gt;if &lt;/span&gt;( enumType.IsEnum )
                &lt;span style="color: blue"&gt;return &lt;/span&gt;GetDisplayName( value );
        }
         &lt;span style="color: blue"&gt;return base&lt;/span&gt;.ConvertTo( context, culture, value, destinationType );
    }

    &lt;span style="color: blue"&gt;public override object &lt;/span&gt;ConvertFrom( &lt;span style="color: #2b91af"&gt;ITypeDescriptorContext &lt;/span&gt;context, &lt;span style="color: #2b91af"&gt;CultureInfo &lt;/span&gt;culture, &lt;span style="color: blue"&gt;object &lt;/span&gt;value )
    {
        &lt;span style="color: blue"&gt;if &lt;/span&gt;( value &lt;span style="color: blue"&gt;is string &lt;/span&gt;)
        {
            &lt;span style="color: blue"&gt;var &lt;/span&gt;match = _mappings.FirstOrDefault( mapping =&amp;gt; &lt;span style="color: blue"&gt;string&lt;/span&gt;.Compare( mapping.Description, (&lt;span style="color: blue"&gt;string&lt;/span&gt;) value, &lt;span style="color: blue"&gt;true&lt;/span&gt;, culture ) == 0 );
            &lt;span style="color: blue"&gt;if &lt;/span&gt;( match != &lt;span style="color: blue"&gt;null &lt;/span&gt;)
                &lt;span style="color: blue"&gt;return &lt;/span&gt;match.Enum;
        }
         &lt;span style="color: blue"&gt;return base&lt;/span&gt;.ConvertFrom( context, culture, value );
    }&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;    &lt;br /&gt;    private string &lt;/span&gt;GetDisplayName( &lt;span style="color: blue"&gt;object &lt;/span&gt;enumValue ) &lt;br /&gt;    { &lt;br /&gt;        &lt;span style="color: blue"&gt;var &lt;/span&gt;displayNameAttribute = EnumType.GetField( enumValue.ToString() )&lt;br /&gt;                                           .GetCustomAttributes( &lt;span style="color: blue"&gt;typeof&lt;/span&gt;( &lt;span style="color: #2b91af"&gt;EnumDisplayNameAttribute &lt;/span&gt;), &lt;span style="color: blue"&gt;false &lt;/span&gt;)&lt;br /&gt;                                           .FirstOrDefault() &lt;span style="color: blue"&gt;as &lt;/span&gt;&lt;span style="color: #2b91af"&gt;EnumDisplayNameAttribute&lt;/span&gt;; &lt;br /&gt;&lt;br /&gt;        &lt;span style="color: blue"&gt;if &lt;/span&gt;( displayNameAttribute != &lt;span style="color: blue"&gt;null &lt;/span&gt;) &lt;br /&gt;            &lt;span style="color: blue"&gt;return &lt;/span&gt;displayNameAttribute.DisplayName; &lt;br /&gt;        &lt;br /&gt;        &lt;span style="color: blue"&gt;return &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Enum&lt;/span&gt;.GetName( EnumType, enumValue ); &lt;br /&gt;    } 
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/04/19/binding-an-enum-property-to-a-combobox-using-customized-text.aspx#Comments</comments><guid isPermaLink="false">1803e1fc-5e06-441b-aae3-60fbf261809c</guid><pubDate>Sat, 18 Apr 2009 15:35:31 GMT</pubDate></item><item><title>WPF DataGrid Tips</title><link>http://blog.spencen.com/2009/04/13/wpf-datagrid-tips.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I’ve been struggling at work to use Microsoft’s WPF DataGrid (from their WPF Toolkit) to fulfil a fairly basic set of requirement. The following is simply a list of lessons learned.&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Remember to set the SortMemberPath for all DataGridTemplateColumns. Otherwise the column header is “inactive” and doesn’t allow sorting regardless of setting CanUserSort. &lt;/li&gt;    &lt;li&gt;Remember to set the ClipboardContentBinding for all DataGridTemplateColumns. Otherwise the column data will be copied to the clipboard as an empty string.      &lt;br /&gt;      &lt;br /&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridTemplateColumn &lt;/span&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;Date of Birth&amp;quot;            &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;&lt;span style="color: red"&gt;SortMemberPath&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;DateOfBirth&amp;quot;            &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;&lt;span style="color: red"&gt;ClipboardContentBinding&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;DateOfBirth&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;&amp;gt;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridTemplateColumn.CellTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TextBlock &lt;/span&gt;&lt;span style="color: red"&gt;Text&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;DateOfBirth&lt;/span&gt;&lt;span style="color: blue"&gt;,&lt;/span&gt;&lt;span style="color: red"&gt;Mode&lt;/span&gt;&lt;span style="color: blue"&gt;=OneWay,&lt;/span&gt;&lt;span style="color: red"&gt;StringFormat&lt;/span&gt;&lt;span style="color: blue"&gt;=d}&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Margin&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;2,0,2,2&amp;quot;/&amp;gt;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridTemplateColumn.CellTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridTemplateColumn.CellEditingTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DatePicker &lt;/span&gt;&lt;span style="color: red"&gt;SelectedDate&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;DateOfBirth&lt;/span&gt;&lt;span style="color: blue"&gt;,&lt;/span&gt;&lt;span style="color: red"&gt;Mode&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=TwoWay}&amp;quot;/&amp;gt;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridTemplateColumn.CellEditingTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;           &lt;br /&gt;&amp;#160; &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;toolkit&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGridTemplateColumn&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;           &lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/li&gt;    &lt;li&gt;As with other ItemsControls you will most likely want to redefine HighlightBrush and HighlightTextBrush to avoid the high contrast (and very old fashioned) row selection colours. &lt;/li&gt;    &lt;li&gt;Use Styles embedded in the DataGrid’s style’s Resources collection to override attributes of controls that will be used for editing. For example, setting the BorderThickness=”0” and Padding=”0” on the DatePicker. &lt;/li&gt;    &lt;li&gt;Watch out for implicit Styles that effect Button. The grid is made up of lots of buttons (grid, row and column headers) so having an implicit style define MinWidth or Margins can lead to some unsightly grid layouts. &lt;/li&gt;    &lt;li&gt;DataGridCheckBoxColumn doesn’t centre vertically and its default margin doesn’t seem to match the DataGridTextColumn. Setting the Margin for DataGridCheckBoxColumns to&amp;#160; “2”, or at least “0,2,0,0” seems to do the trick.&lt;/li&gt;    &lt;li&gt;Setting an EditingElementStyle for a DataGridTextBoxColumn to CharacterCasing=”Upper” is not honoured if the keystroke is used to enter edit mode. Requires a simple fix to the PrepareCellForEdit method in DataGridTextBoxColumn. Refer &lt;a title="http://www.codeplex.com/wpf/Thread/View.aspx?ThreadId=36985" href="http://www.codeplex.com/wpf/Thread/View.aspx?ThreadId=36985"&gt;http://www.codeplex.com/wpf/Thread/View.aspx?ThreadId=36985&lt;/a&gt;.       &lt;br /&gt;      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;font size="1" face="Verdana"&gt;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="background: #f9fff9; color: green"&gt;// If text input started the edit, then replace the text with what was typed.            &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;string &lt;/span&gt;inputText;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;switch &lt;/span&gt;(textBox.CharacterCasing)           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; {           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;case &lt;/span&gt;&lt;span style="color: #2b91af"&gt;CharacterCasing&lt;/span&gt;.Upper:           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; inputText = textArgs.Text.ToUpper();           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;break&lt;/span&gt;;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;case &lt;/span&gt;&lt;span style="color: #2b91af"&gt;CharacterCasing&lt;/span&gt;.Lower:           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; inputText = textArgs.Text.ToLower();           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;break&lt;/span&gt;;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;default&lt;/span&gt;:           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; inputText = textArgs.Text;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;break&lt;/span&gt;;           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; textBox.Text = inputText;           &lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;/li&gt;    &lt;li&gt;Placing a DatePicker in a DataGridTemplateColumn doesn’t cause the DatePIcker to automatically gain focus when pressing F2 (enter edit). To get around that I overrode PrepareCellForEdit in DataGridTemplateColumn as follows:      &lt;br /&gt;      &lt;br /&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;#160;&amp;#160;&amp;#160; protected override object &lt;/span&gt;PrepareCellForEdit(&lt;span style="color: #2b91af"&gt;FrameworkElement &lt;/span&gt;editingElement,           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: #2b91af"&gt;RoutedEventArgs &lt;/span&gt;editingEventArgs)           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; {           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; editingElement.MoveFocus(&lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;TraversalRequest&lt;/span&gt;(&lt;span style="color: #2b91af"&gt;FocusNavigationDirection&lt;/span&gt;.First));           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;return base&lt;/span&gt;.PrepareCellForEdit(editingElement, editingEventArgs);           &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; }&lt;/font&gt;&lt;/font&gt; &lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;      &lt;br /&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;The DatePicker uses the Enter key to highlight the date within its embedded TextBox. This is annoying when used in a DataGridTemplateColumn since the standard behaviour for the Enter key is to commit edits and move down a row. Commenting out this functionality in the DatePicker (within ProcessDatePickerKey) does the trick.&amp;#160; &lt;br /&gt;      &lt;br /&gt;&lt;font size="1" face="Verdana"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;private bool &lt;/span&gt;ProcessDatePickerKey(&lt;span style="color: #2b91af"&gt;KeyEventArgs &lt;/span&gt;e)        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; {        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;switch &lt;/span&gt;(e.Key)        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; {        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;case &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Key&lt;/span&gt;.System:        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; {        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;switch &lt;/span&gt;(e.SystemKey)        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; {        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;case &lt;/span&gt;&lt;span style="color: #2b91af"&gt;Key&lt;/span&gt;.Down: { &lt;span style="color: blue"&gt;if &lt;/span&gt;((&lt;span style="color: #2b91af"&gt;Keyboard&lt;/span&gt;.Modifiers &amp;amp; &lt;span style="color: #2b91af"&gt;ModifierKeys&lt;/span&gt;.Alt) == &lt;span style="color: #2b91af"&gt;ModifierKeys&lt;/span&gt;.Alt)        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; {        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; TogglePopUp();        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;return true&lt;/span&gt;;        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;break&lt;/span&gt;;        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;break&lt;/span&gt;;        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="background: #f9fff9; color: green"&gt;// Removing this functionality makes the control work better in the grid - ENTER goes to next row.           &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="background: #f9fff9; color: green"&gt;//case Key.Enter:           &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="background: #f9fff9; color: green"&gt;//{           &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="background: #f9fff9; color: green"&gt;//&amp;#160;&amp;#160;&amp;#160; SetSelectedDate();           &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="background: #f9fff9; color: green"&gt;//&amp;#160;&amp;#160;&amp;#160; return true;           &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="background: #f9fff9; color: green"&gt;//}           &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }          &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;return false&lt;/span&gt;;          &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }&lt;/font&gt;&lt;/font&gt;&lt;/li&gt; &lt;/ol&gt;  &lt;h3&gt;Other Resources&lt;/h3&gt;  &lt;ul&gt;   &lt;li&gt;Tips and Tricks for DataGrid and DatePicker: &lt;a title="http://wpf.codeplex.com/Wiki/View.aspx?title=Tips%20%26%20Tricks" href="http://wpf.codeplex.com/Wiki/View.aspx?title=Tips%20%26%20Tricks"&gt;http://wpf.codeplex.com/Wiki/View.aspx?title=Tips%20%26%20Tricks&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;Customizing the DataGrid (Jaime Rodriguez): &lt;a title="http://blogs.msdn.com/jaimer/archive/2008/08/13/dabbling-around-the-new-wpf-datagrid-part-1.aspx" href="http://blogs.msdn.com/jaimer/archive/2008/08/13/dabbling-around-the-new-wpf-datagrid-part-1.aspx"&gt;http://blogs.msdn.com/jaimer/archive/2008/08/13/dabbling-around-the-new-wpf-datagrid-part-1.aspx&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;DataGrid (Vincent Sibal): &lt;a title="http://blogs.msdn.com/vinsibal/archive/2008/08/11/net-3-5-sp1-and-wpf-datagrid-ctp-is-out-now.aspx" href="http://blogs.msdn.com/vinsibal/archive/2008/08/11/net-3-5-sp1-and-wpf-datagrid-ctp-is-out-now.aspx"&gt;http://blogs.msdn.com/vinsibal/archive/2008/08/11/net-3-5-sp1-and-wpf-datagrid-ctp-is-out-now.aspx&lt;/a&gt; and &lt;a title="http://blogs.msdn.com/vinsibal/archive/2008/09/16/wpf-datagrid-styling-rows-and-columns-based-on-header-conditions-and-other-properties.aspx" href="http://blogs.msdn.com/vinsibal/archive/2008/09/16/wpf-datagrid-styling-rows-and-columns-based-on-header-conditions-and-other-properties.aspx"&gt;http://blogs.msdn.com/vinsibal/archive/2008/09/16/wpf-datagrid-styling-rows-and-columns-based-on-header-conditions-and-other-properties.aspx&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;Detecting column, cell and row for click event (Colin Eberhardt): &lt;a title="http://www.scottlogic.co.uk/blog/wpf/2008/12/wpf-datagrid-detecting-clicked-cell-and-row/" href="http://www.scottlogic.co.uk/blog/wpf/2008/12/wpf-datagrid-detecting-clicked-cell-and-row/"&gt;http://www.scottlogic.co.uk/blog/wpf/2008/12/wpf-datagrid-detecting-clicked-cell-and-row/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/04/13/wpf-datagrid-tips.aspx#Comments</comments><guid isPermaLink="false">d2b62ae7-b14e-4c8f-9c0f-d57269019520</guid><pubDate>Sun, 12 Apr 2009 14:40:10 GMT</pubDate></item><item><title>Blog Reader Replacement</title><link>http://blog.spencen.com/2009/03/30/blog-reader-replacement.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;em&gt;[Warning: This is largely a rant… it is by no means a serious review of any of these products.]&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;For the last couple of years I’ve been using &lt;a href="http://www.feedghost.com" target="_blank"&gt;FeedGhost&lt;/a&gt; as my RSS Reader of choice. I install it on all my machines – home, work and laptop. Up until recently I’ve been happy with the tool. I was originally drawn to it because 1) it looked fresh and new with plenty of visual polish, 2) it had a great synchronization mechanism which meant all my machines could be kept in sync.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/FeedGhost_4.jpg"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="FeedGhost" border="0" alt="FeedGhost" src="http://blog.spencen.com/images/83489-72989/FeedGhost_thumb_1.jpg" width="580" height="480" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Alas, in the last couple of months things have started to fail. Running FeedGhost on my laptop has suddenly jumped from using 100Mb to using well over a 1Gb. Even more worrisome the synchronization seems to have had a few bugs introduced. Blog entries appears under the wrong category/feed and old items keep incorrectly showing as unread.&lt;/p&gt;  &lt;p&gt;So… time for a new Blog Reader. The guys at work use Google Reader. I pity them, I try to educate them and when all else fails I just mock them.&lt;/p&gt;  &lt;p&gt;So what serious contenders are there? I used SharpReader many years ago. Simple, quick but definitely lacking in features – I don’t think its being actively developed.&lt;/p&gt;  &lt;p&gt;So from SharpReader I moved to RssBandit. I downloaded the latest version, loaded my feed list and took it for a spin. Initial reaction is one of disappointment. On the surface it seems much as it was a few years ago. They’ve added synchronization and a download manager. The posts glow a horrible yellow when you mouse over them – very annoying but presumably something that can be turned off.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/RSSBandit_2.jpg"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="RSSBandit" border="0" alt="RSSBandit" src="http://blog.spencen.com/images/83489-72989/RSSBandit_thumb.jpg" width="571" height="480" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;At the same time as downloading RssBandit I got the latest version of FeedDemon. I haven’t used this product before – I seem to remember a time when it wasn’t free. The Newsgator synchronization seems to work well and is quick as is loading the posts themselves. Its been severely beaten with the ugly stick which is a shame. It also doesn’t behave how I would “expect” in many cases. For instance – it doesn’t seem to let you open more than one node in the feed list tree. If you open one it closes the previous – why?!&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/FeedDemon_2.jpg"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="FeedDemon" border="0" alt="FeedDemon" src="http://blog.spencen.com/images/83489-72989/FeedDemon_thumb.jpg" width="554" height="480" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;I don’t really want too much in an RSS Reader. My feature list in order of importance would go something like:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Simply, effective synchronization of feeds and entry status.&lt;/li&gt;    &lt;li&gt;Well rendered post in a couple of layout formats – summary list, “river of news” flow etc.&lt;/li&gt;    &lt;li&gt;“Helpers” for adding subscriptions, e.g. Subscribe action takes clipboard URL by default, browser right click extensions etc.&lt;/li&gt;    &lt;li&gt;Clean, intuitive user interface – most are way to cluttered.&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Of course what might be nice is a WPF based RSS Reader. Maybe using Live Services/Sync Framework behind the scenes to do the synchronization. Maybe &lt;a href="http://www.codeplex.com/paperboy" target="_blank"&gt;Paperboy&lt;/a&gt; will become such a tool?&lt;/p&gt;  &lt;p&gt;Overall – I’m a little disappointed with the available offerings. Does anyone have a (non browser based) alternative that they’d recommend?&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2009/03/30/blog-reader-replacement.aspx#Comments</comments><guid isPermaLink="false">3950f8e7-26b9-4267-afea-63323ab6fe7c</guid><pubDate>Mon, 30 Mar 2009 12:14:12 GMT</pubDate></item><item><title>Panoramas using Microsoft Image Composite Editor (ICE) and HD View</title><link>http://blog.spencen.com/2009/03/22/panoramas-using-microsoft-image-composite-editor-ice-and-hd-view.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;After having had quite a bit of &lt;a href="http://blog.spencen.com/2009/03/12/weekend-getaway-to-kangaroo-island.aspx" target="_blank"&gt;fun stitching photos together&lt;/a&gt; using Window Live Photo Gallery I decided to see what other gems it may have on its feature list. What I found was the &lt;em&gt;Extras/Download more photo tools…&lt;/em&gt; menu which took me to &lt;a href="http://blogs.msdn.com/pix/pages/extras.aspx"&gt;this website&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://photosynth.net/"&gt;Photosynth&lt;/a&gt; is awesome, but it requires that all photos be public at this stage. &lt;a href="http://research.microsoft.com/en-us/um/cambridge/projects/autocollage/"&gt;AutoCollage&lt;/a&gt; I had tried out before and whilst it is kinda cute, I preferr having more custom control in the layout (hence my PhotoPlay app a few years ago).&lt;/p&gt;  &lt;p&gt;The &lt;a href="http://research.microsoft.com/en-us/um/redmond/groups/ivm/ICE/"&gt;Image Composite Editor&lt;/a&gt; (apart from having a truly uninspiring name) seem to essentially be the engine that Windows Live Photo Gallery uses under the hood to perform its own “Create panoramic photo” feature. Of course the Image Composite Editor (ICE) allows you to get more involved in how the composite stitching is performed. It also has quite a few export options, including: HD View Tileset, Adobe Photoshop, Deepzoom Tileset or just plan jpg or png.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Microsoft%20Image%20Composite%20Editor_2.png" target="_blank"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="Microsoft Image Composite Editor" border="0" alt="Microsoft Image Composite Editor" src="http://blog.spencen.com/images/83489-72989/Microsoft%20Image%20Composite%20Editor_thumb.png" width="644" height="417" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;I did some experiments with the HD View Tileset option. What I liked about this was it allows you to view the image whilst getting a better perspective of the rotational span. Kind of like printing out a panoramic strip and then wrapping it around your head about 15cm from your eyes whist spanning the correct angle of the composite. Err… ok – that wasn’t a great explanation – try the links below.&lt;/p&gt;  &lt;p align="center"&gt;&lt;a href="http://www.spencen.com/Panoramics/Dunk_Island_Peak/DSC07492_stitch.html" target="_blank"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DSC07492-5 Stitch" border="0" alt="DSC07492-5 Stitch" src="http://blog.spencen.com/images/83489-72989/DSC07492-5%20Stitch_3.jpg" width="660" height="162" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p align="center"&gt;&lt;a href="http://www.dunk-island.com/" target="_blank"&gt;Dunk Island&lt;/a&gt; – View from Mount Kootaloo&lt;/p&gt;  &lt;p align="center"&gt;&lt;a href="http://www.spencen.com/Panoramics/Muggy_Muggy_Beach/DSC07549_stitch.html" target="_blank"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DSC07549-53 Stitch" border="0" alt="DSC07549-53 Stitch" src="http://blog.spencen.com/images/83489-72989/DSC07549-53%20Stitch_3.jpg" width="660" height="146" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p align="center"&gt;Dunk Island – Alone on Muggy Muggy Beach&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2009/03/22/panoramas-using-microsoft-image-composite-editor-ice-and-hd-view.aspx#Comments</comments><guid isPermaLink="false">2bd203e7-4467-44ef-8335-b98ba0dc1590</guid><pubDate>Sun, 22 Mar 2009 12:43:40 GMT</pubDate></item><item><title>Weekend Getaway to Kangaroo Island</title><link>http://blog.spencen.com/2009/03/12/weekend-getaway-to-kangaroo-island.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I spent last weekend away with the family touring around Kangaroo Island. I managed to take a few photos of the “mandatory” tourist spots. I’ve become quite a fan of taking panoramic photos the easy way – i.e. standing in one spot and taking multiple photos at different angles with a relatively constant horizon.&lt;/p&gt;  &lt;p&gt;Back in the “good ‘ol days” I used to spend hours stitching the individual photos together afterwards. This involved difficult colour matching, transforms to cater for perspective, manual touchups/blurs of the edges etc. These days I simply select the photos (in any order) using Windows Live Photo Gallery and then choose “Create panoramic photo…”. Hey presto – all done!&lt;/p&gt;  &lt;p&gt;Here’s a few samples – click for larger versions. These are all taken with a 6 year old digital camera by a novice photographer (me).&lt;/p&gt;  &lt;p&gt;&lt;em&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: First photo now links to full size image (around 2.9Mb).&lt;/em&gt;&lt;/p&gt;  &lt;p align="center"&gt;&lt;a href="http://photos.spencen.com/images/A_9/7/5/7/7579/abzu4er1.jpg" target="_blank"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DSC09098 Stitch" border="0" alt="DSC09098 Stitch" src="http://blog.spencen.com/images/83489-72989/DSC09098%20Stitch_thumb.jpg" width="660" height="172" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p align="center"&gt;&lt;em&gt;Beach at Penneshaw – taken from Frenchman’s Rock. Cape Jervis on the horizon on the far right.&lt;/em&gt;&lt;/p&gt;  &lt;p align="center"&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;  &lt;p align="center"&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/DSC09150%20Stitch_2.jpg" target="_blank"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DSC09150 Stitch" border="0" alt="DSC09150 Stitch" src="http://blog.spencen.com/images/83489-72989/DSC09150%20Stitch_thumb.jpg" width="660" height="134" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p align="center"&gt;&lt;em&gt;Remarkable Rocks&lt;/em&gt;&lt;/p&gt;  &lt;p align="center"&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;  &lt;p align="center"&gt;&amp;#160;&lt;a href="http://blog.spencen.com/images/83489-72989/DSC09169%20Stitch_2.jpg" target="_blank"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DSC09169 Stitch" border="0" alt="DSC09169 Stitch" src="http://blog.spencen.com/images/83489-72989/DSC09169%20Stitch_thumb.jpg" width="660" height="288" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p align="center"&gt;&lt;em&gt;Admiral’s Arch&lt;/em&gt;&lt;/p&gt;  &lt;p align="center"&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;  &lt;p align="center"&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/DSC09252%20Stitch%20Wide_2.jpg" target="_blank"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DSC09252 Stitch Wide" border="0" alt="DSC09252 Stitch Wide" src="http://blog.spencen.com/images/83489-72989/DSC09252%20Stitch%20Wide_thumb.jpg" width="660" height="127" /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;  &lt;p align="center"&gt;&lt;em&gt;Stokes Bay – great beach for young kids.&lt;/em&gt;&lt;/p&gt;  &lt;p align="center"&gt;&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2009/03/12/weekend-getaway-to-kangaroo-island.aspx#Comments</comments><guid isPermaLink="false">51e6df33-9a05-4c73-82d7-bc7044831fc6</guid><pubDate>Fri, 13 Mar 2009 13:18:59 GMT</pubDate></item><item><title>Word Puzzle v0.2</title><link>http://blog.spencen.com/2009/03/12/word-puzzle-v02.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Someone was kind enough to ask for the source code for a &lt;a href="http://blog.spencen.com/2008/11/30/a-simple-word-puzzle.aspx"&gt;very simple word puzzle application&lt;/a&gt; that I put together a few months ago (mainly whilst commuting on the bus). I’ve messed around with it a few times since that original post – but there are no noteworthy changes. Its still very much unfinished – and likely to remain so.&lt;/p&gt;  &lt;p&gt;Here’s the &lt;a href="http://www.spencen.com/Downloads/WordPuzzle.zip"&gt;source code&lt;/a&gt;, and a &lt;a href="https://www.spencen.com/WordPuzzle/AlphabetXbap.xbap" target="_blank"&gt;link to the XBAP game itself&lt;/a&gt;.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/03/12/word-puzzle-v02.aspx#Comments</comments><guid isPermaLink="false">8e47d9b7-6f65-4512-b66c-79ae1de31f8d</guid><pubDate>Thu, 12 Mar 2009 13:06:46 GMT</pubDate></item><item><title>INotifyPropertyChanged via Extension Methods</title><link>http://blog.spencen.com/2009/03/04/inotifypropertychanged-via-extension-methods.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I imagine most developers that work with data-binding in WinForms or WPF have their preferred way of implementing INotifyPropertyChanged (or individual &amp;lt;property&amp;gt;Changed events). Normally I use a base class to hide the interface declaration and event and then use helper methods in the setters to take care of raising the event when applicable.&lt;/p&gt;  &lt;p&gt;I’ve also spent some time looking at AOP alternatives using PostSharp. These look really promising, but it does require taking a dependency on PostSharp. &lt;/p&gt;  &lt;p&gt;Another alternative is to use Extension methods. I had this realisation today and figured I’d spend a few minutes putting together a quick test. Getting the event proved a little irksome, and I’m passing around property names as strings (as opposed to perhaps &lt;a href="http://blog.hightech.ir/2008/09/enhanced-inotifypropertychanged.html"&gt;using a member expression&lt;/a&gt;). Here’s the extension class:&lt;/p&gt;  &lt;blockquote&gt;   &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;&lt;font size="1" face="Verdana"&gt;public static class &lt;/font&gt;&lt;/span&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #2b91af"&gt;PropertyChangedExtension
&lt;/span&gt;{
    &lt;span style="color: blue"&gt;public static void &lt;/span&gt;OnPropertyChanged(&lt;span style="color: blue"&gt;this &lt;/span&gt;&lt;span style="color: #2b91af"&gt;INotifyPropertyChanged &lt;/span&gt;sender, &lt;span style="color: blue"&gt;string &lt;/span&gt;propertyName)
    {
        RaiseEvent(sender, propertyName,  &lt;span style="color: #a31515"&gt;&amp;quot;PropertyChanged&amp;quot;&lt;/span&gt;);
    }

    &lt;span style="color: blue"&gt;public static void &lt;/span&gt;OnPropertyChanging(&lt;span style="color: blue"&gt;this &lt;/span&gt;&lt;span style="color: #2b91af"&gt;INotifyPropertyChanging &lt;/span&gt;sender, &lt;span style="color: blue"&gt;string &lt;/span&gt;propertyName)
    {
        RaiseEvent(sender, propertyName, &lt;span style="color: #a31515"&gt;&amp;quot;PropertyChanging&amp;quot;&lt;/span&gt;);
    }

    &lt;span style="color: blue"&gt;public static bool &lt;/span&gt;SetValue&amp;lt;T&amp;gt;(&lt;span style="color: blue"&gt;this &lt;/span&gt;&lt;span style="color: #2b91af"&gt;INotifyPropertyChanged &lt;/span&gt;sender, &lt;br /&gt;                                              &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;ref &lt;/span&gt;T backingField, &lt;br /&gt;                                              T newValue, &lt;br /&gt;                                              &lt;span style="color: blue"&gt;string &lt;/span&gt;propertyName)
    {
        &lt;span style="color: blue"&gt;if &lt;/span&gt;( Equals( backingField, newValue ))
            &lt;span style="color: blue"&gt;return false&lt;/span&gt;;

        &lt;span style="color: blue"&gt;var &lt;/span&gt;propertyChanging = sender &lt;span style="color: blue"&gt;as &lt;/span&gt;&lt;span style="color: #2b91af"&gt;INotifyPropertyChanging&lt;/span&gt;;
        &lt;span style="color: blue"&gt;if &lt;/span&gt;(propertyChanging != &lt;span style="color: blue"&gt;null&lt;/span&gt;)
            propertyChanging.OnPropertyChanging(propertyName);

        backingField = newValue;

        OnPropertyChanged(sender, propertyName);

        &lt;span style="color: blue"&gt;return true&lt;/span&gt;;
    }

    &lt;span style="color: blue"&gt;private static void &lt;/span&gt;RaiseEvent(&lt;span style="color: blue"&gt;object &lt;/span&gt;sender, &lt;span style="color: blue"&gt;string &lt;/span&gt;propertyName, &lt;span style="color: blue"&gt;string &lt;/span&gt;eventName)
    {
        &lt;span style="color: blue"&gt;var &lt;/span&gt;fieldInfo = sender.GetType().GetField(eventName, &lt;span style="color: #2b91af"&gt;BindingFlags&lt;/span&gt;.Instance | &lt;span style="color: #2b91af"&gt;BindingFlags&lt;/span&gt;.NonPublic);
        &lt;span style="color: blue"&gt;if &lt;/span&gt;(fieldInfo != &lt;span style="color: blue"&gt;null&lt;/span&gt;)
        {
            &lt;span style="color: blue"&gt;var &lt;/span&gt;eventDelegate = fieldInfo.GetValue(sender) &lt;span style="color: blue"&gt;as &lt;/span&gt;&lt;span style="color: #2b91af"&gt;MulticastDelegate&lt;/span&gt;;
            &lt;span style="color: blue"&gt;if &lt;/span&gt;(eventDelegate != &lt;span style="color: blue"&gt;null&lt;/span&gt;)
                eventDelegate.DynamicInvoke(&lt;br /&gt;                   &lt;span style="color: blue"&gt;new object&lt;/span&gt;[] { sender, &lt;span style="color: blue"&gt;new &lt;/span&gt;&lt;span style="color: #2b91af"&gt;PropertyChangedEventArgs&lt;/span&gt;(propertyName) });
        }
    }
}&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Here’s a simple test class. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;font size="1" face="Verdana"&gt;&lt;span style="color: blue"&gt;public class&lt;/span&gt;&lt;span style="color: #2b91af"&gt;Person&lt;/span&gt;: &lt;span style="color: #2b91af"&gt;INotifyPropertyChanging&lt;/span&gt;, &lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: #2b91af"&gt;INotifyPropertyChanged 
          &lt;br /&gt;&lt;/span&gt;{ 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;public event&lt;/span&gt;&lt;span style="color: #2b91af"&gt;PropertyChangedEventHandler &lt;/span&gt;PropertyChanged; 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;public event&lt;/span&gt;&lt;span style="color: #2b91af"&gt;PropertyChangingEventHandler &lt;/span&gt;PropertyChanging; 

        &lt;br /&gt;

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;private string&lt;/span&gt;_firstName; 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;private string&lt;/span&gt;_lastName; 

        &lt;br /&gt;

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;public string&lt;/span&gt;FirstName 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; { 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;get&lt;/span&gt;{ &lt;span style="color: blue"&gt;return&lt;/span&gt;_firstName; } 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;set 
          &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;{ 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;if&lt;/span&gt;(&lt;span style="color: blue"&gt;this&lt;/span&gt;.SetValue(&lt;span style="color: blue"&gt;ref &lt;/span&gt;_firstName, &lt;span style="color: blue"&gt;value&lt;/span&gt;, &lt;span style="color: #a31515"&gt;&amp;quot;FirstName&amp;quot;&lt;/span&gt;)) 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;this&lt;/span&gt;.OnPropertyChanged(&lt;span style="color: #a31515"&gt;&amp;quot;FullName&amp;quot;&lt;/span&gt;); 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; } 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; } 

        &lt;br /&gt;

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;public string &lt;/span&gt;LastName 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; { 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;get &lt;/span&gt;{ &lt;span style="color: blue"&gt;return &lt;/span&gt;_lastName; } 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;set 
          &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;{ 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;if &lt;/span&gt;(&lt;span style="color: blue"&gt;this&lt;/span&gt;.SetValue(&lt;span style="color: blue"&gt;ref &lt;/span&gt;_lastName, &lt;span style="color: blue"&gt;value&lt;/span&gt;, &lt;span style="color: #a31515"&gt;&amp;quot;FirstName&amp;quot;&lt;/span&gt;)) 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;this&lt;/span&gt;.OnPropertyChanged(&lt;span style="color: #a31515"&gt;&amp;quot;FullName&amp;quot;&lt;/span&gt;); 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; } 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; } 

        &lt;br /&gt;

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;public string &lt;/span&gt;FullName 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; { 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;get &lt;/span&gt;{ &lt;span style="color: blue"&gt;return string&lt;/span&gt;.Format(&lt;span style="color: #a31515"&gt;&amp;quot;{0} {1}&amp;quot;&lt;/span&gt;, FirstName, LastName); } 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; } 

        &lt;br /&gt;}&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Note that I use the boolean result from SetValue to determine whether I should fire property changed events on other dependent properties (again this is something that can be done declaratively using PostSharp).&lt;/p&gt;

&lt;p&gt;The RaiseEvent method in the Extension class is a really nasty hack (in other words it won’t always work and is slow). You can simply &lt;a href="http://blog.jeffhandley.com/archive/2008/10/07/inotifypropertychanged---
extension-methods.aspx"&gt;pass through the event handlers&lt;/a&gt; which makes things much simpler, but what I was aiming for was the least amount of code in the setters. I wouldn’t use this code in a production environment (a base class is much better suited). However it is well suited for adding property change notification to classes that I’m just throwing together for a demo or prototype without having to worry about PostSharp dependencies or base classes.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2009/03/04/inotifypropertychanged-via-extension-methods.aspx#Comments</comments><guid isPermaLink="false">286e7c70-604c-4c85-b3e6-b2148de6ad3c</guid><pubDate>Tue, 03 Mar 2009 15:06:47 GMT</pubDate></item><item><title>Windows 7 Beta Experience</title><link>http://blog.spencen.com/2009/01/28/windows-7-beta-experience.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Like a few million others I’ve put the Windows 7 Beta through its paces recently. Keen to get it up and running with as little fuss as possible I initially installed it on a VM using Microsoft Virtual PC 2007. It installed flawlessly but the experience was terrible. No Aero-glass of course, but disk access was slow, screen redraws were torturous – everything seemed so “laggy”. Much more so than a Windows Vista or XP virtual machine.&lt;/p&gt;  &lt;p&gt;Disappointed with my initial attempt I left it at that for a while. Then a few nights back I decided to install the 64bit version of Windows 7 as a dual boot on my main development machine. The install was again flawless – which was quite a surprise since the installs for the Windows Vista Betas were the worst of any OS I’ve installed. Once the machine rebooted, Windows 7 came up complete with the full Aero-glass. This time the experience was the complete opposite of the initial VM installation. Everything was just so damn fast. It really makes Vista (32bit on the same box) seem so slow. The window animations and effects are beautifully smooth.&lt;/p&gt;  &lt;p&gt;Playing with it further I was also pleasantly surprised by a number of other improvements:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Libraries – finally!!! These rock – its what the “My XXX” folders should have always been. &lt;/li&gt;    &lt;li&gt;Search – I added a significant quantity of files (22,000 photos, 2,000 documents, 3,000 videos) to my document libraries and they were indexed within minutes. The search results were then displayed neatly, clearly showing how each file was matched – including showing the content around the text match for documents. This is how search in Vista should have worked! &lt;/li&gt;    &lt;li&gt;Windows docking – use the Windows key with the cursor keys to minimize, maximize, move to left/right monitor etc. These seem to work really nicely. &lt;/li&gt;    &lt;li&gt;Task bar – I really didn’t think too much of this from the video demos I’d seen. Now having used it for a few hours it feels painful to go back to Vista. &lt;/li&gt;    &lt;li&gt;File Dialogs and Explorer Windows – great use of the libraries in all dialogs and explorer. The folder tree is much better than Vista – smaller icons and sensible groupings. &lt;/li&gt;    &lt;li&gt;Less obnoxious UAC &lt;/li&gt; &lt;/ul&gt;</description><category>General</category><comments>http://blog.spencen.com/2009/01/28/windows-7-beta-experience.aspx#Comments</comments><guid isPermaLink="false">24ee5bb7-9add-4936-9eaa-24706ee1e380</guid><pubDate>Wed, 28 Jan 2009 13:18:10 GMT</pubDate></item><item><title>World of Goo</title><link>http://blog.spencen.com/2008/12/29/world-of-goo.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I normally try to ignore the ulterior motives behind &lt;a href="http://www.codinghorror.com/blog/" target="_blank"&gt;coding horror&lt;/a&gt; posts – but I think &lt;a href="http://www.codinghorror.com/blog/archives/001201.html" target="_blank"&gt;this one&lt;/a&gt; turned out to be quite a gem. [Just a shame it wasn’t titled “Go and support 2dboy” rather than blathering on about software piracy]. If you’re into physics based puzzle games then check out &lt;a href="http://www.worldofgoo.com" target="_blank"&gt;World of Goo&lt;/a&gt;. Not bad for &lt;a href="http://2dboy.com/games.php" target="_blank"&gt;AU$30.10&lt;/a&gt;, and good fun for all the family. If you’re not sure then check out the demo – only 32Mb and has a heap of levels included.&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2008/12/29/world-of-goo.aspx#Comments</comments><guid isPermaLink="false">b3ca4633-dfeb-4a54-9131-45d3a54a4a10</guid><pubDate>Mon, 29 Dec 2008 13:29:27 GMT</pubDate></item><item><title>Can a developer learn design skills?</title><link>http://blog.spencen.com/2008/12/13/can-a-developer-learn-design-skills.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Over the years I have the opportunity to build a fair number of user interfaces for various software applications. Whilst some have been more effective than others I’ve always struggled to create what I’d consider to be a truly compelling experience.&lt;/p&gt;  &lt;p&gt;I find it very difficult to “dream up” user interfaces that are both functional and unique. It’s the starting point – the &lt;em&gt;blank canvas&lt;/em&gt; if you like that really stumps me. If I concentrate on small individual portions of the interface I’ve trained myself to be fairly good at decomposing it into graphic primitives in order to be able to duplicate the effect. I find that this is actually an exercise in consciously processing what I’m seeing – rather than relying on the assumptions being made unconsciously.&lt;/p&gt;  &lt;p&gt;Some examples:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;What makes something look three dimensional? &lt;/li&gt;    &lt;li&gt;How are surfaces made to have either a matt or shiny finish? &lt;/li&gt;    &lt;li&gt;What characteristics does a glass surface have? What about a mirrored surface? &lt;/li&gt;    &lt;li&gt;How can an indicator light appear to realistically switch on and off – taking into account glow and shadows? &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;When boiled down to graphic primitives most of these become fairly simple – although not altogether obvious at first. I’ve found that when working for an extended period of time to achieve a particular effect its possible to un-train your unconscious so that you actually process the primitives rather than the desired effect. This is pretty frustrating because for the next few days when I look at, say the glowing indicator light, what I actually see are a bunch of linear and radial gradients. Still it wears off after a few days and then, if I’ve done it properly, they starting looking like indicator lights again.&lt;/p&gt;  &lt;p&gt;Last night whilst experimenting with some glass effects I came across this website: &lt;a title="http://www.bestechvideos.com/tag/screencasters" href="http://www.bestechvideos.com/tag/screencasters"&gt;http://www.bestechvideos.com/tag/screencasters&lt;/a&gt;. It has a number of video tutorials that explain how to achieve common visual effects such as &lt;a href="http://www.bestechvideos.com/2008/07/05/screencasters-episode-017-glass-button-effect-redux" target="_blank"&gt;shiny buttons&lt;/a&gt;, &lt;a href="http://www.bestechvideos.com/2008/10/01/screencasters-episode-072-glass-panels" target="_blank"&gt;glass panels&lt;/a&gt; and the like. The tool they use is InkScape which appears to be a vector drawing program running on Linux. However, I found its pretty easy to translate the effects into XAML, especially with the help of Blend.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font face="Verdana" size="1"&gt;  &lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(139,0,139)"&gt;&amp;lt;Grid&amp;gt;  
    &amp;lt;Image &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Source&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;F:\Pictures\Textures\Image_After_Stock_Images\b1crystal001.jpg&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Stretch&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;None&amp;quot;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(139,0,139)"&gt;/&amp;gt;
    &amp;lt;Border &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;BorderBrush&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#FF040404&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;BorderThickness&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;1&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;CornerRadius&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;8&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Width&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;135&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Height&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;160&amp;quot; &lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(139,0,139)"&gt;&amp;gt;
      &amp;lt;Border &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Width&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;Auto&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Height&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;Auto&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Background&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#60A0A0F0&amp;quot; &lt;br /&gt;              &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;BorderBrush&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#A3808080&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;BorderThickness&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;5&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;CornerRadius&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;4&amp;quot;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(139,0,139)"&gt;&amp;gt;
        &amp;lt;Border.Effect&amp;gt;
          &amp;lt;DropShadowEffect &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;BlurRadius&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;20&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;ShadowDepth&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;5&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Opacity&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0.4&amp;quot;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(139,0,139)"&gt;/&amp;gt;
        &amp;lt;/Border.Effect&amp;gt;
        &amp;lt;Path &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Stretch&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;Fill&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Margin&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0,0,0,70&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;VerticalAlignment&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;Top&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Height&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;Auto&amp;quot; 
              &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Data&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;span style="color: rgb(0,0,255)"&gt;&lt;font face="Verdana" size="1"&gt;=&amp;quot;M256,0
                    &lt;/font&gt;&lt;/span&gt;&lt;span style="color: rgb(139,0,139)"&gt;&lt;font face="Verdana" color="#0000ff" size="1"&gt;C256,0 260,0, 260,4
                    L260,80
                    C230.46646,92.718311 185.26848,100.83087 129.63841,101.82405 
                     95.868918,102.42695 58.948563,96.301248 27.904232,88.28635 
                     20.143162,86.282627 12.749348,84.160824 5.863842,81.996578
                    L0,80 0,4
                    C0,4 0,0 4,0 z&lt;/font&gt;&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&lt;font face="Verdana" size="1"&gt;&amp;quot;&amp;gt;
          &lt;/font&gt;&lt;/span&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(139,0,139)"&gt;&amp;lt;Path.Fill&amp;gt;
            &amp;lt;LinearGradientBrush &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;EndPoint&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0.5,1&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;StartPoint&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0.5,0&amp;quot;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(139,0,139)"&gt;&amp;gt;
              &amp;lt;GradientStop &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Color&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#CFFFFFFF&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Offset&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(139,0,139)"&gt;/&amp;gt;
              &amp;lt;GradientStop &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Color&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#00FFFFFF&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Offset&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;span style="color: rgb(139,0,139)"&gt;&lt;font face="Verdana" size="1"&gt;/&amp;gt;
            &amp;lt;/LinearGradientBrush&amp;gt;
          &amp;lt;/Path.Fill&amp;gt;
        &amp;lt;/Path&amp;gt;
      &amp;lt;/Border&amp;gt;
    &amp;lt;/Border&amp;gt;
  &amp;lt;/Grid&amp;gt;&lt;/font&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;This is a really simple example and you can tell I did the Path using Blend because of the ridiculous numbers (though I did clean up the edges). This XAML generates the following, with and without the background Image:&lt;/p&gt;

&lt;p&gt;&lt;img title="Glass Panel Effect" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="195" alt="Glass Panel Effect" src="http://blog.spencen.com/images/83489-72989/Glass%20Panel%20Effect_3.png" width="330" border="0" /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;img title="Glass Panel No Background" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; margin: 0px 0px 5px; border-right-width: 0px" height="184" alt="Glass Panel No Background" src="http://blog.spencen.com/images/83489-72989/Glass%20Panel%20No%20Background_3.png" width="157" border="0" /&gt;&lt;/p&gt;

&lt;p&gt;Here’s another glassy effect that I was using for an update to &lt;a href="http://blog.spencen.com/2008/11/30/a-simple-word-puzzle.aspx" target="_blank"&gt;my word puzzle&lt;/a&gt; UI. This one just uses a linear gradient brush on a diagonal.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(163,21,21)"&gt;    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;LinearGradientBrush&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; x&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;:&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Key&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;ShimmerBrush&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; StartPoint&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0,0&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; EndPoint&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;1,1&amp;quot;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;GradientStop&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Color&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#40FFFFFF&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Offset&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;GradientStop&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Color&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#40FFFFFF&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Offset&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0.25&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;GradientStop&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Color&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#80FFFFFF&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Offset&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0.3&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;GradientStop&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Color&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#80FFFFFF&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Offset&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0.5&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;GradientStop&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Color&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#40FFFFFF&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Offset&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0.55&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;GradientStop&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Color&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#40FFFFFF&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Offset&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;1&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;LinearGradientBrush&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;

&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;LinearGradientBrush&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; x&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;:&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Key&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;GlassEdge&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; StartPoint&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0,0&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; EndPoint&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;1,1&amp;quot;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;GradientStop&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Offset&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Color&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#80808080&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;GradientStop&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Offset&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0.3&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Color&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#80FFFFFF&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;GradientStop&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Offset&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0.5&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Color&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#80FFFFFF&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;GradientStop&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Offset&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Color&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#80606060&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;LinearGradientBrush&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;&amp;#160;&lt;img title="Word Puzzle on Wood" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="423" alt="Word Puzzle on Wood" src="http://blog.spencen.com/images/83489-72989/Word%20Puzzle%20on%20Wood_5.png" width="534" border="0" /&gt;&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2008/12/13/can-a-developer-learn-design-skills.aspx#Comments</comments><guid isPermaLink="false">914eee27-b2ba-44ca-ae71-b84b987c5c88</guid><pubDate>Fri, 12 Dec 2008 14:50:21 GMT</pubDate></item><item><title>A Simple Word Puzzle</title><link>http://blog.spencen.com/2008/11/30/a-simple-word-puzzle.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;A few weeks back my young son showed me some work that he’d been doing at school – constructing a simple word puzzle by hiding a few known words within a grid of letters. His approach to this was very simplistic – but got me thinking that writing an application to do the same would be trivial and thus something that could keep me busy on the bus trips to and from work.&lt;/p&gt;  &lt;p&gt;One night to get started and then a few bus trips later and I’ve got the following:&lt;/p&gt;  &lt;p&gt;&lt;img title="Word Puzzle 1" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="356" alt="Word Puzzle 1" src="http://blog.spencen.com/images/83489-72989/Word%20Puzzle%201_1.png" width="572" border="0" /&gt; &lt;/p&gt;  &lt;p&gt;The puzzle board itself is actually two ItemsControls layered on top of each other. The lower control has its items laid out using a UniformGrid and each item represents a letter tile. The topmost control superimposes the “solved” words on top of the lower grid. I originally tried doing this just be altering the style of the individual tiles – but this didn’t achieve the effect I was after and got overly complex when a single letter was used by multiple words.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(163,21,21)"&gt;       &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Viewbox&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;            &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Grid&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; VerticalAlignment&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;Center&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; HorizontalAlignment&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;Center&amp;quot;&amp;gt;

&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ItemsControl&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; x&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;:&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Name&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;letterItemsControl&amp;quot;&lt;/span&gt; 
                             &lt;span style="color: rgb(255,0,0)"&gt; ItemsSource&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Binding&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; LetterStream&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;}&amp;quot;&lt;/span&gt; 
                             &lt;span style="color: rgb(255,0,0)"&gt; MouseDown&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;letterItemsControl_MouseDown&amp;quot;
&lt;/span&gt;                             &lt;span style="color: rgb(255,0,0)"&gt; MouseMove&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;letterItemsControl_MouseMove&amp;quot;
&lt;/span&gt;                             &lt;span style="color: rgb(255,0,0)"&gt; MouseUp&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;letterItemsControl_MouseUp&amp;quot;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ItemsControl.ItemsPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ItemsPanelTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                            &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;UniformGrid&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Rows&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Binding&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Height&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;}&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Columns&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Binding&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Width&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;}&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ItemsPanelTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ItemsControl.ItemsPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ItemsControl&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;

&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ItemsControl&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; x&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;:&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Name&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;wordItemsControl&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; ItemsSource&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Binding&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Words&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;}&amp;quot;&lt;/span&gt; 
                             &lt;span style="color: rgb(255,0,0)"&gt; IsHitTestVisible&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;False&amp;quot;
&lt;/span&gt;                             &lt;span style="color: rgb(255,0,0)"&gt; ItemTemplate&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;StaticResource&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; WordSelection&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;}&amp;quot;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ItemsControl.ItemsPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ItemsPanelTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                            &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Canvas&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ItemsPanelTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ItemsControl.ItemsPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ItemsControl&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;

&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;            &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Grid&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Viewbox&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Of course it was pointed out to me that having each letter tile rendered as a set of controls wouldn’t scale well at all. Sure enough, even at 20x20 things start to slow down. Rendering a grid at 100x100 is painfully slow – although to be fare you can’t read the letter tiles at that size either – and it wouldn’t be much fun looking for words on a 10000 letter grid. Whilst a better implementation probably lies down the path of creating a BoardControl that renders all the tiles as one geometry group, I just liked the idea of being able to easily apply styles to the letter tiles, word selection etc.&lt;/p&gt;

&lt;p&gt;As it stands this isn’t really finished – but its probably as close as I’ll get. I showed it to my son – he was bored of it after about 30 seconds &lt;img src="http://blog.spencen.com/emoticons/sad.png" border="0" /&gt;.&lt;/p&gt;

&lt;p&gt;I’ve posted an XBAP version &lt;a href="http://www.spencen.com/Alphabet/AlphabetXBap.xbap" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2008/11/30/a-simple-word-puzzle.aspx#Comments</comments><guid isPermaLink="false">18b633ce-0b41-4d23-ac90-93cc58f8f6a0</guid><pubDate>Sun, 30 Nov 2008 12:37:27 GMT</pubDate></item><item><title>IDataErrorInfo &amp;ndash; is there really any point?</title><link>http://blog.spencen.com/2008/11/24/idataerrorinfo-ndash-is-there-really-any-point.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;When looking into data validation systems that focus around WinForms and WPF technologies the IDataErrorInfo interface is a common focus. Personally I’ve never been satisfied with this interface. Not only does it appear to have some very poorly named members, it just doesn’t seem anywhere near functional enough. Don’t get me wrong – its a great concept – it just seems to be a super-lightweight example.&lt;/p&gt;  &lt;p&gt;From MetaData on &lt;strong&gt;&lt;font color="#0080c0"&gt;IDataErrorInfo&lt;/font&gt;&lt;/strong&gt;:&lt;/p&gt;  &lt;p&gt;&lt;font face="Verdana" size="1"&gt;&amp;#160;&amp;#160; &lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;// Summary:          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;//&amp;#160;&amp;#160;&amp;#160;&amp;#160; Provides the functionality to offer custom error information that a user          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;//&amp;#160;&amp;#160;&amp;#160;&amp;#160; interface can bind to.          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;interface&lt;/span&gt; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(43,145,175)"&gt;IDataErrorInfo          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160; {         &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;// Summary:          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;//&amp;#160;&amp;#160;&amp;#160;&amp;#160; Gets an error message indicating what is wrong with this object.          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;//          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;// Returns:          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;//&amp;#160;&amp;#160;&amp;#160;&amp;#160; An error message indicating what is wrong with this object. The default is          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;//&amp;#160;&amp;#160;&amp;#160;&amp;#160; an empty string (&amp;quot;&amp;quot&lt;img src="http://blog.spencen.com/emoticons/wink.png" border="0" /&gt;.          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; Error { &lt;span style="color: rgb(0,0,255)"&gt;get&lt;/span&gt;; }         &lt;br /&gt;        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;// Summary:          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;//&amp;#160;&amp;#160;&amp;#160;&amp;#160; Gets the error message for the property with the given name.          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;//          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;// Parameters:          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;//&amp;#160;&amp;#160; columnName:          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;//&amp;#160;&amp;#160;&amp;#160;&amp;#160; The name of the property whose error message to get.          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;//          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;// Returns:          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,128,0)"&gt;//&amp;#160;&amp;#160;&amp;#160;&amp;#160; The error message for the property. The default is an empty string (&amp;quot;&amp;quot&lt;img src="http://blog.spencen.com/emoticons/wink.png" border="0" /&gt;.          &lt;br /&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;this&lt;/span&gt;[&lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; columnName] { &lt;span style="color: rgb(0,0,255)"&gt;get&lt;/span&gt;; }&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font face="Verdana" size="1"&gt;    }&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;So if I have a business object, &lt;strong&gt;&lt;font color="#0080c0"&gt;Contact&lt;/font&gt;&lt;/strong&gt;, that implements &lt;strong&gt;&lt;font color="#0080c0"&gt;IDataErrorInfo&lt;/font&gt;&lt;/strong&gt; then to get a description of the validation state for a particular property we use &lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;font size="2"&gt;myContact[propertyName]&lt;/font&gt;.&lt;/font&gt;&lt;/font&gt; That really doesn’t seem very intuitive, surely that should be a method call, e.g. &lt;font face="Verdana" size="2"&gt;myContact.GetPropertyValidationState(propertyName)&lt;/font&gt;? Of course because all the return results are strings rather than object there’s no clean path for extensibility here either.&lt;/p&gt;

&lt;p&gt;Does anyone really use this interface for anything other that quick data-binding sample applications? Really – I’d love to know.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.paulstovell.com/blog/validation-scopes-draft"&gt;Paul’s latest foray into a WPF Validation framework&lt;/a&gt; got me started on this. Though to be fair his draft framework has clear extensibility points for plugging in a much richer business object validation interface.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2008/11/24/idataerrorinfo-ndash-is-there-really-any-point.aspx#Comments</comments><guid isPermaLink="false">281e4ac1-3dea-42d3-a962-7fd6aaa94422</guid><pubDate>Mon, 24 Nov 2008 13:48:02 GMT</pubDate></item><item><title>Visual Studio 2010&amp;rsquo;s WPF Source Editor</title><link>http://blog.spencen.com/2008/10/30/visual-studio-2010rsquos-wpf-source-editor.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;The last couple of days I’ve been enjoying reading/listening to the announcements coming out of PDC – as I’m sure has most of the Microsoft Developer community.&lt;/p&gt;  &lt;p&gt;Tonight I watched the on-demand keynote. The highlights for me:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Windows 7 Taskbar Enhancements&lt;/li&gt;    &lt;li&gt;Windows 7 Multi-touch&lt;/li&gt;    &lt;li&gt;WPF demos! In fact, lots of WPF love in general!&lt;/li&gt;    &lt;li&gt;Visual Studio 2010 shell and editor moved to WPF&lt;/li&gt;    &lt;li&gt;“Much improved” WPF design experience (including Silverlight)&lt;/li&gt;    &lt;li&gt;Programming against the Live Mesh API&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;And the ultimate highlight was watching Scott “Gu” show has easy it was to extend the design time source editor in Visual Studio 2010 which is rendered in WPF (around 1:30:00 in the video). As simple as implementing an interface (ITextViewService), decorating with an “Export” attribute and then dropping the assembly into the extensions folder. No other registration required. Interestingly, Visual Studio is itself using the new Managed Extensibility Framework, including its support for Add-Ins. What was even cooler (from my perspective) is that Scott’s demo “add-in” showed how easy it was to re-render XML source comments with a custom UserControl declared in XAML. &lt;/p&gt;  &lt;p&gt;&lt;img title="VS2010 Source Code Adorner" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="215" alt="VS2010 Source Code Adorner" src="http://blog.spencen.com/images/83489-72989/VS2010%20Source%20Code%20Adorner_1.png" width="360" border="0" /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;/p&gt;  &lt;p&gt;Hey – I think &lt;a href="http://blog.spencen.com/2008/04/17/source-code-comments--time-for-a-revamp.aspx"&gt;I predicted/wished for that feature&lt;/a&gt; :-p. This is even better – now I can build my own and customize however I like!&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2008/10/30/visual-studio-2010rsquos-wpf-source-editor.aspx#Comments</comments><guid isPermaLink="false">02c6bdaf-73e9-4443-a0dc-4bf1f308df5e</guid><pubDate>Thu, 30 Oct 2008 13:04:36 GMT</pubDate></item><item><title>Building delimited lists</title><link>http://blog.spencen.com/2008/10/23/building-delimited-lists.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;As developers we often find ourselves writing the same simple bits of logic over and over again. Today at work I noticed one of my co-workers (let’s call him &lt;a href="http://www.citv.co.uk/static/engie/index.html"&gt;Benjy&lt;/a&gt;) writing a very simple routine to format some output for diagnostics. It went something like this:&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font face="Verdana" size="1"&gt;        &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;static&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; FormatAsCommaDelimitedList(&lt;span style="color: rgb(0,0,255)"&gt;object&lt;/span&gt;[] args)
        {
            &lt;span style="color: rgb(0,0,255)"&gt;var&lt;/span&gt; builder = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;StringBuilder&lt;/span&gt;();
            &lt;span style="color: rgb(0,0,255)"&gt;foreach&lt;/span&gt; (&lt;span style="color: rgb(0,0,255)"&gt;object&lt;/span&gt; arg &lt;span style="color: rgb(0,0,255)"&gt;in&lt;/span&gt; args)
            {
                builder.Append( (builder.Length &amp;gt; 0 ? &lt;span style="color: rgb(163,21,21)"&gt;&amp;quot;, &amp;quot;&lt;/span&gt; : &lt;span style="color: rgb(163,21,21)"&gt;&amp;quot;&amp;quot;&lt;/span&gt;) + arg.ToString());
            }
            &lt;span style="color: rgb(0,0,255)"&gt;return&lt;/span&gt; builder.ToString();
        }&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;I commented that whilst his implementation was fine (and I’m sure we’ve all written something similar in the past) it annoyed me that the condition within the loop made it look so ungainly. It was then that a few things clicked. I mentioned that if it were a simple array of strings we could concatenate using String.Join(). Benjy then applied his philosophy of “thou should never write in a loop what can better be expressed as a query”. And thus was born the following:&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font face="Verdana" size="1"&gt;        &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;static&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; AsCommaDelimitedList&amp;lt;T&amp;gt;(&lt;span style="color: rgb(43,145,175)"&gt;IEnumerable&lt;/span&gt;&amp;lt;T&amp;gt; items)
        {
            &lt;span style="color: rgb(0,0,255)"&gt;return&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;String&lt;/span&gt;.Join( &lt;span style="color: rgb(163,21,21)"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;, items.Select&amp;lt;T, &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt;&amp;gt;( item =&amp;gt; item.ToString() ).ToArray() );
        }&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Not satisfied with that, Benjy went on to create a neat little CSV routine expressed as an extension method so as to be available to any enumerable collection of objects.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font face="Verdana" size="1"&gt;       &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;static&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; ToCSV&amp;lt;T&amp;gt;(&lt;span style="color: rgb(0,0,255)"&gt;this&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;IEnumerable&lt;/span&gt;&amp;lt;T&amp;gt; items, &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; delimiter, &lt;span style="color: rgb(0,0,255)"&gt;bool&lt;/span&gt; quoteAll)
        {
            &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; quoteChar = &lt;span style="color: rgb(163,21,21)"&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;;
            &lt;span style="color: rgb(0,0,255)"&gt;return&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;String&lt;/span&gt;.Join(
                delimiter,
                items.Select&amp;lt;T, &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt;&amp;gt;(
                    item =&amp;gt; item.ToString().Contains(quoteChar) || quoteAll
                            ? &lt;span style="color: rgb(43,145,175)"&gt;String&lt;/span&gt;.Format(&lt;span style="color: rgb(163,21,21)"&gt;&amp;quot;{0}{1}{0}&amp;quot;&lt;/span&gt;, quoteChar, item)
                            : item.ToString()
                ).ToArray()
            );
        }&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;If you ignore his ghastly formatting (and the bug which I’m sure is just there to test me) then that’s pretty cute.&lt;/p&gt;

&lt;p&gt;I figured at this point I ought to at least pretend to contribute something – so here’s a version that allows the object to be formatted. Works with IFormattable types like Int32, Decimal, Float, DateTime etc.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font face="Verdana" size="1"&gt;        &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;static&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; ToFormattedList&amp;lt;T&amp;gt;(&lt;span style="color: rgb(0,0,255)"&gt;this&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;IEnumerable&lt;/span&gt;&amp;lt;T&amp;gt; items, &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; delimiter, &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; format) 
            &lt;span style="color: rgb(0,0,255)"&gt;where&lt;/span&gt; T : &lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(43,145,175)"&gt;IFormattable
&lt;/span&gt;        {
            &lt;span style="color: rgb(0,0,255)"&gt;return&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;String&lt;/span&gt;.Join(
                delimiter, 
                items.Select&amp;lt;T, &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt;&amp;gt;(
                    item =&amp;gt; item.ToString(format, System.Globalization.&lt;span style="color: rgb(43,145,175)"&gt;CultureInfo&lt;/span&gt;.CurrentCulture)
                ).ToArray());
        }&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;

&lt;p&gt;In deference to Benjy (a strong believer in console applications and mono-spaced fonts) here’s the simple Console Main() I used to test these:&lt;/p&gt;

&lt;pre class="code"&gt;&lt;font face="Verdana" size="1"&gt;        &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;static&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;void&lt;/span&gt; Main(&lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt;[] args)
        {
            &lt;span style="color: rgb(43,145,175)"&gt;Console&lt;/span&gt;.WriteLine(args.ToCSV(&lt;span style="color: rgb(163,21,21)"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;, &lt;span style="color: rgb(0,0,255)"&gt;true&lt;/span&gt;));
            &lt;span style="color: rgb(43,145,175)"&gt;Console&lt;/span&gt;.WriteLine(args.AsCommaDelimitedList());

            &lt;span style="color: rgb(0,0,255)"&gt;var&lt;/span&gt; amounts = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;decimal&lt;/span&gt;[] { 2.1m, 4, 4.5m, 9, 3.333m, 4.14m };

            &lt;span style="color: rgb(43,145,175)"&gt;Console&lt;/span&gt;.WriteLine(amounts.ToCSV(&lt;span style="color: rgb(163,21,21)"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;, &lt;span style="color: rgb(0,0,255)"&gt;true&lt;/span&gt;));
            &lt;span style="color: rgb(43,145,175)"&gt;Console&lt;/span&gt;.WriteLine(amounts.AsCommaDelimitedList());
            &lt;span style="color: rgb(43,145,175)"&gt;Console&lt;/span&gt;.WriteLine(amounts.ToFormattedList(&lt;span style="color: rgb(163,21,21)"&gt;&amp;quot;  |  &amp;quot;&lt;/span&gt;, &lt;span style="color: rgb(163,21,21)"&gt;&amp;quot;$#,##0.00&amp;quot;&lt;/span&gt;));

            &lt;span style="color: rgb(43,145,175)"&gt;Console&lt;/span&gt;.ReadLine();
        }&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;And the corresponding output in all its dumb terminal glory.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;font face="Courier New" size="2"&gt;&amp;quot;The&amp;quot;, &amp;quot;quick&amp;quot;, &amp;quot;brown&amp;quot;, &amp;quot;fox&amp;quot;, &amp;quot;jumped&amp;quot;, &amp;quot;over&amp;quot;, &amp;quot;the&amp;quot;, &amp;quot;lazy&amp;quot;, &amp;quot;dog.&amp;quot; 
      &lt;br /&gt;The, quick, brown, fox, jumped, over, the, lazy, dog. 

      &lt;br /&gt;&amp;quot;2.1&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;4.5&amp;quot;, &amp;quot;9&amp;quot;, &amp;quot;3.333&amp;quot;, &amp;quot;4.14&amp;quot; 

      &lt;br /&gt;2.1, 4, 4.5, 9, 3.333, 4.14 

      &lt;br /&gt;$2.10&amp;#160; |&amp;#160; $4.00&amp;#160; |&amp;#160; $4.50&amp;#160; |&amp;#160; $9.00&amp;#160; |&amp;#160; $3.33&amp;#160; |&amp;#160; $4.14&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the subject of formatting I enjoyed this blog post on &lt;a href="http://blogesh.wordpress.com/2008/09/09/visual-studio-debugging-tips-and-tricks/"&gt;Visual Studio Debugging Tips&lt;/a&gt;. Particularly the explanation of how to use conditional formatting with the DebuggerDisplay attribute. Worth a look!&lt;/p&gt;</description><category>Development</category><category>.NET</category><comments>http://blog.spencen.com/2008/10/23/building-delimited-lists.aspx#Comments</comments><guid isPermaLink="false">825efedd-afef-42b1-adda-d85c39f6215b</guid><pubDate>Thu, 23 Oct 2008 12:50:47 GMT</pubDate></item><item><title>Validation Template without Binding Errors</title><link>http://blog.spencen.com/2008/10/11/validation-template-without-binding-errors.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;WPF guru Josh Smith has just put up a great post &lt;a href="http://joshsmithonwpf.wordpress.com/2008/10/08/binding-to-validationerrors0-without-creating-debug-spew/" target="_blank"&gt;here&lt;/a&gt; about how to access the validation errors on a WPF control without getting lots of binding debug output. Most samples (including MSDN documentation) suggest you should use Validation.Errors[0] which generate debug output for a binding failure whenever there are no errors (since Errors[0] doesn’t exist).&lt;/p&gt;  &lt;p&gt;The format of the template that I commonly use (which also avoids the Errors[0] issue in almost exactly the same way) is as follows:&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ControlTemplate&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; x&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;:&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Key&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;DefaultErrorTemplate&amp;quot;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;            &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;DockPanel&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; DataContext&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Binding&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; ElementName&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=adorner,&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; &lt;br /&gt;                                                               Path&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=AdornedElement.(Validation.Errors)&lt;/span&gt;/&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;ErrorContent}&amp;quot;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Ellipse&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; x&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;:&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Name&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;Ellipse&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; &lt;br /&gt;                            DockPanel.Dock&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;Right&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; &lt;br /&gt;                            Margin&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;2,0,2,0&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; &lt;br /&gt;                            Width&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;14&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Height&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;14&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; &lt;br /&gt;                            VerticalAlignment&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;Center&amp;quot;&lt;/span&gt; 
                    &lt;span style="color: rgb(255,0,0)"&gt;        Stroke&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#40000000&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; StrokeThickness&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;2&amp;quot; &lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt;Fill&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;Red&amp;quot;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Ellipse.ToolTip&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Border&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; MaxWidth&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;350&amp;quot;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                            &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ContentControl&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; FontSize&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;14&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Content&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Binding&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;}&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Border&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Ellipse.ToolTip&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Ellipse&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Border&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; BorderBrush&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;#40FFAF00&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; BorderThickness&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; IsHitTestVisible&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;False&amp;quot;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Border.Background&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;SolidColorBrush&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Color&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;Red&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Opacity&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;0.2&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Border.Background&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;AdornedElementPlaceholder&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Margin&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;-2&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Name&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;=&amp;quot;adorner&amp;quot;/&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;                &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;Border&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;            &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;DockPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;        &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;ControlTemplate&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Normally instead of hard coding the colours I would use a colour converter that maps the severity of the error (through a custom property) to the relevant colour, e.g. error=red, warning=orange etc.&lt;/p&gt;

&lt;p&gt;My equivalent of Josh’s sample project is &lt;a href="http://www.spencen.com/Downloads/CleanlyBindToValidationErrorsNS.zip" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.spencen.com/Downloads/CleanlyBindToValidationErrorsNS.zip"&gt;&lt;img title="CleanlyBindToValidationErrors" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="100" alt="CleanlyBindToValidationErrors" src="http://blog.spencen.com/images/83489-72989/CleanlyBindToValidationErrors_1.png" width="320" border="0" /&gt;&lt;/a&gt;&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2008/10/11/validation-template-without-binding-errors.aspx#Comments</comments><guid isPermaLink="false">eadb6fff-13d4-42bc-b298-3780e194d1ad</guid><pubDate>Fri, 10 Oct 2008 15:16:12 GMT</pubDate></item><item><title>Convenience PCs</title><link>http://blog.spencen.com/2008/10/02/convenience-pcs.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Today I took my son to the &lt;a href="http://www.allneeds.com.au" target="_blank"&gt;computer store&lt;/a&gt; to buy some parts for his new machine. We’d recently tried to upgrade his Pentium 3 to Windows Vista – but whilst the install worked the performance was terrible. The box only had 512Mb RAM and the aging 30Gb drive eventually failed after so much page swapping whilst attempting to install SP1.&lt;/p&gt;  &lt;p&gt;Over the last few years the relative price of buying or building your own decent PC has dropped dramatically, but today when I got home to rummage through the goodies we’d bought the scale of this really hit home. Here’s a few examples:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;strong&gt;Transcend 2GB RAM Stick&lt;/strong&gt; - $38 – assuming 2Gb is today’s standard mid-low end spec – that’s pretty good.&lt;/p&gt;    &lt;p&gt;&lt;strong&gt;Samsung 640Gb HDD&lt;/strong&gt; - $84 – hard disk space truly is no longer a problem. I’m finally at the point where all my machines have ample hard disk space, including enough to ensure all information is stored redundantly on at least two drives/machines. Having said that based on &lt;a href="http://www.anandtech.com/printarticle.aspx?i=3403" target="_blank"&gt;this recent review&lt;/a&gt;, I’m really looking forward to getting a couple of SSD drives in my development machine. Seems the (Veloci)Raptors reign as the king of consumer priced performance drives is over.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;To offset these ridiculously cheap components I bought a few “luxury” items.&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;strong&gt;Intel Core 2 Quad 8200&lt;/strong&gt; – for my development machine, son will get my old Core 2 Duo.&lt;/p&gt;    &lt;p&gt;&lt;strong&gt;Asus EAH3650 Silent HDMI&lt;/strong&gt; - ATi Radeon 3650 passive cooled with HDMI output (HDCP) and H.264 &amp;amp; VC1 hardware decoding – for the HTPC.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;But then there were the two super-budget items that almost defy reason. Whilst these are definitely budget, no-frills items they come from two of my most respected hardware manufacturers – ASUS and Samsung.&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;strong&gt;Samsung DVD-RW&lt;/strong&gt; - $27 – does anyone else remember the original Pioneer DVD burner from 2000 (A01). It &lt;a href="http://en.wikipedia.org/wiki/Homemovie.com" target="_blank"&gt;cost $8000&lt;/a&gt; and the RW discs were $100 each!&lt;/p&gt;    &lt;p&gt;&lt;strong&gt;&lt;a href="http://www.google.com/products/catalog?q=asus+p5kpl-cm&amp;amp;rls=com.microsoft:en-AU&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;um=1&amp;amp;cid=4570544458567019414&amp;amp;sa=X&amp;amp;oi=product_catalog_result&amp;amp;resnum=4&amp;amp;ct=result#ps-tech-specs" target="_blank"&gt;ASUS P5KPL-CM motherboard&lt;/a&gt; &lt;/strong&gt;- $58 – that’s Core 2 Duo/Quad 45nm compatible, gigabit LAN, 4 SATA, integrated graphics, PCI Express x16,x1 &amp;amp; 2 x PCI, 4 (+4 int.) x USB, 8 channel audio in a micro ATX format. Take a look at it – the left is the board from above, the right is roughly a 5x4cm section from below.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/DSC08570.jpg" target="_blank"&gt;&lt;img title="DSC08570" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="240" alt="DSC08570" src="http://blog.spencen.com/images/83489-72989/DSC08570_thumb.jpg" width="272" border="0" /&gt;&lt;/a&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;a href="http://blog.spencen.com/images/83489-72989/DSC08572.jpg" target="_blank"&gt;&lt;img title="DSC08572" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="240" alt="DSC08572" src="http://blog.spencen.com/images/83489-72989/DSC08572_thumb.jpg" width="320" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Now tell me – how is this made for under $58. Surely the individual electrical componentry, the copper, the included cables and the friggen high quality full colour box must cost that much. Then think about the cost involved in designing this specific board layout, building the dies, setting up factory lines, shipping, support etc. &lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Now I’m really looking forward to the weekend so my son and I can put all this stuff together, scavenging and replacing bits from various machines to build his new box and then re-install Vista. I’ve been building my own PCs for many years – its great fun and pretty much idiot proof these days. Strongly recommended &lt;img src="http://blog.spencen.com/emoticons/smile.png" border="0" /&gt;&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2008/10/02/convenience-pcs.aspx#Comments</comments><guid isPermaLink="false">cc1de7c1-d5ec-4861-b588-7e7bd060f9d9</guid><pubDate>Thu, 02 Oct 2008 14:13:47 GMT</pubDate></item><item><title>Tech Ed 2008 - The story so far</title><link>http://blog.spencen.com/2008/09/03/tech-ed-2008--the-story-so-far.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Due to some late schedule changes I was fortunate enough to be the &lt;a href="http://www.microsoft.com/australia/heroes/view_demos.aspx"&gt;DHH&lt;/a&gt; first state finalist to present their demo at Tech Ed during one of the breaks. I'd got so tired of doing the same demo over and over again that this morning I decided to change it some - by adding a little WPF magic at the end. This probably detracted from the main message of the demo - using Sync Services for ADO.NET with SQL 2008 Change Tracking - but I had fun. &lt;/p&gt;  &lt;p&gt;I was actually pretty happy with my own presentation. I didn't make any glaring mistakes and even with the extra content still got it into the 10 minute deadline. Of course later on I got to watch a couple of the other state finalists and it became pretty obvious that I was seriously out-classed. The annoying thing was that I'm well aware of what I don't do well when doing this presentation - its just a bit of a shock seeing how easily others can make it look. Things like good eye contact, &amp;quot;presenter level&amp;quot; enthusiasm and humour. &lt;/p&gt;  &lt;p&gt;&lt;a href="http://blogs.msdn.com/rog42/"&gt;Roger&lt;/a&gt; also let on that apparently they are going to make the competition and annual event.&lt;/p&gt;  &lt;p&gt;Tech-Ed sessions today were the usual mixed bag. The keynote was good - exactly what I'm after from a keynote - unlike last years which whilst kinda interesting really had nothing in common with the event. This year it was all about Live Mesh and Software + Services.&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2008/09/03/tech-ed-2008--the-story-so-far.aspx#Comments</comments><guid isPermaLink="false">a5c8207e-7108-42a9-b1d6-00821ec31105</guid><pubDate>Wed, 03 Sep 2008 12:40:39 GMT</pubDate></item><item><title>A New Project (part 2)</title><link>http://blog.spencen.com/2008/08/31/a-new-project-part-2.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;&lt;a href="http://davidgardiner.blogspot.com/"&gt;David&lt;/a&gt; left a comment to my &lt;a href="http://blog.spencen.com/2008/08/28/a-new-project.aspx"&gt;previous post&lt;/a&gt; rightly pointing out that I’d omitted MbUnit from the list of tools. Considering that omission I also realised that I’d missed a few other tools. For completeness sake I’ve decided to include them in this follow-up post.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Tortoise and Subversion &lt;img title="3Star" style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="18" alt="3Star" src="http://blog.spencen.com/images/83489-72989/3Star_3.png" width="92" border="0" /&gt; &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;I wasn’t new to Tortoise or Subversion but my previous encounters with them had left something of a bitter taste. In particular the lack of Visual Studio integration, the difficulty involved in moving code around (renaming) and the fact that I was always discovering files from the solution that I’d forgotten to manually add to the repository.&lt;/p&gt;  &lt;p&gt;For the last 8 months I’ve been using Team Foundation Server’s source control and its interesting to compare the two. It seems to me that each one’s major strength is also their weaknesses. For example, when working on a small team in which “everyone owns the code” it can sometimes be very useful to know what is currently being worked on – i.e. checked out by another user. TFS supports this by being aware of all check-outs which means you often know which files you need to be careful about when merging, or you may decide not to modify the file until the other developer has checked it in. Of course the downside of this is that TFS’s offline capabilities become a lot more complicated (bad). Subversion is the opposite – you’ve got no idea what’s being worked on &lt;img src="http://blog.spencen.com/emoticons/sad.png" border="0" /&gt; - but it means working offline requires no smarts at all.&lt;/p&gt;  &lt;p&gt;The big discriminator for me at the moment between TFS and SVN is the quality of the merging tools. TFS warns you about any conflicts, giving you the option to perform manual or automatic merging on each file. I haven’t figured out how to do this in SVN – it just does the merge for you and prompts when it can’t resolve a conflict. The problem is that this auto-merge is just &lt;em&gt;way&lt;/em&gt; to optimistic about its own capabilities. Or to put it another way – it sucks! It gets it wrong frequently – i.e. once every couple of days. If you’re lucky you notice straight away (for example the app doesn’t compile). If you’re unlucky its rolled back some code, or duplicated a line which you’ll find out about down the track when odd bugs start (re-)appearing. [If anyone has any pointers on this I’m all ears – because in my experience its scarily bad – I’m starting to resort to manually checking every file prior to commit.]&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Visual SVN&lt;/strong&gt;&amp;#160;&lt;img title="4Star" style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="18" alt="4Star" src="http://blog.spencen.com/images/83489-72989/4Star_3.png" width="92" border="0" /&gt; &lt;/p&gt;  &lt;p&gt;We went for a couple of weeks without having any Visual Studio integration. Things worked OK – but it did seem kinda redundant having an Explorer window open to perform source control operations. Especially as Explorer isn’t to flash at refreshing itself, so icons are often lagging unless a forced refresh is done.&lt;/p&gt;  &lt;p&gt;Visual SVN has been doing a great job and was cheap to boot. Renames are so much nicer!&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;MbUnit &lt;img title="4Star" style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="18" alt="4Star" src="http://blog.spencen.com/images/83489-72989/4Star_6.png" width="92" border="0" /&gt; &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;We’re using MbUnit as our testing framework. To date I’ve just treated it almost as I would have NUnit or the built in MS namespaces. However, just the addition of the Row attribute makes MbUnit worth having. This is a tool (along with Rhino Mocks) that I really need to dig around a bit more with as I’m sure there are plenty of hidden gems I’m not making good use of.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;TestDriven.NET&amp;#160; &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Testing menus everywhere. Job done.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>General</category><comments>http://blog.spencen.com/2008/08/31/a-new-project-part-2.aspx#Comments</comments><guid isPermaLink="false">1ca0bcad-65d7-497b-9202-2b8c9e1c6d6b</guid><pubDate>Sat, 30 Aug 2008 15:05:51 GMT</pubDate></item><item><title>Wireless Internet</title><link>http://blog.spencen.com/2008/08/29/wireless-internet.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;After much “mulling-over” I finally decided to get a Wireless Internet account. I looked into each of the obvious Vendors – &lt;a href="www.three.com.au"&gt;3&lt;/a&gt;, &lt;a href="www.optus.com.au"&gt;Optus&lt;/a&gt; and &lt;a href="www.vodafone.com.au"&gt;Vodafone&lt;/a&gt;. Of those only Optus had a pre-paid service – the other two offered only 24 month plans that required a credit check and lots of stupid questions. On closer inspection though Optus’s 2Gb for $30 pre-paid plan began to look less inviting. In addition the pre-paid blocks expire after 30 days and the fine print states that usage is measured in 10Mb increments. So connecting and downloading a 1Kb file will accrue 10Mb of usage! On a 2Gb plan that’s only 200 individual connections?!&lt;/p&gt;  &lt;p&gt;As it turned out the best plan for me was the least obvious. Telstra. Yep – that’s right – Telstra. Apparently since 24-Aug-2008 their ludicrously expensive Wireless broadband plans have dropped to become well err… just very expensive. A 1Gb plan now only costs $60 per month on a 36 month plan. But here’s the deal-making points for me:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;No credit checks and stupid questions – even if you’re not an existing customer (which I am). &lt;/li&gt;    &lt;li&gt;Modem included in price. &lt;/li&gt;    &lt;li&gt;Best coverage. &lt;/li&gt;    &lt;li&gt;Ability to change up/down quota with no penalties. &lt;/li&gt;    &lt;li&gt;&lt;em&gt;Half price for first 12 months&lt;/em&gt; – making it on par with best 3 and Optus plans. &lt;/li&gt;    &lt;li&gt;At the end of 12 months simply drop the plan and rejoin for another 12 months at half price. Plan cancellation fee of $240 – which I’m willing to pay above and beyond Optus and 3 for:      &lt;br /&gt;&amp;#160;&amp;#160; 12 month plan instead of 24 month,       &lt;br /&gt;&amp;#160;&amp;#160; better coverage,       &lt;br /&gt;&amp;#160;&amp;#160; better joining experience. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Trust me I was amazed as anyone – I now have a Bigpond account. This morning I would have expected the end of time to have occurred prior to that event happening.&lt;/p&gt;  &lt;p&gt;I live in an area where the exchange is declared by Telstra as “full” and hence ADSL 2 is not available. I found a nifty web site – &lt;a href="http://www.speedtest.net"&gt;www.speedtest.net&lt;/a&gt; – and ran two tests. [Seriously if you haven’t already seen speedtest go check it out – its a very slick looking web-app.]&lt;/p&gt;  &lt;p&gt;My 1500/256 ADSL account with Internode.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.speedtest.net"&gt;&lt;img src="http://www.speedtest.net/result/315455401.png" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;My new Next G account with Telstra.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.speedtest.net"&gt;&lt;img src="http://www.speedtest.net/result/315467942.png" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;Unfortunately I’m unlikely to ever use that speed. The 1Gb plan is just enough for e-mail, messenger and occasional web browsing whilst I’m on the move.&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2008/08/29/wireless-internet.aspx#Comments</comments><guid isPermaLink="false">08ac98ce-1765-4d60-9075-1092a278e306</guid><pubDate>Fri, 29 Aug 2008 12:54:51 GMT</pubDate></item><item><title>A New Project</title><link>http://blog.spencen.com/2008/08/28/a-new-project.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;About five weeks ago I changed jobs – well I guess more accurately I took on another job but that’s a long story.&lt;/p&gt;  &lt;p&gt;One of the key highlights of the new challenge was the technology stack:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Visual Studio 2008 SP1 &lt;/li&gt;    &lt;li&gt;WPF &lt;/li&gt;    &lt;li&gt;NHibernate &lt;/li&gt;    &lt;li&gt;SQL 2008 &lt;/li&gt;    &lt;li&gt;Sync Services for ADO.NET &lt;/li&gt;    &lt;li&gt;Rhino Mocks &lt;/li&gt;    &lt;li&gt;Resharper &lt;/li&gt;    &lt;li&gt;CruiseControl &lt;/li&gt;    &lt;li&gt;NCover &lt;/li&gt;    &lt;li&gt;Castle &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;A lot of these tools I hadn’t had a chance to use in a commercial environment before. We’re at the point now where we’re handing over the first release of the software to system testing – in a couple of weeks it will be rolled out to a selection of&amp;#160; end users. I thought this would be a good opportunity for me to jot down my current feelings towards these tools – something to reflect on at a later date.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Visual Studio 2008 SP1 &lt;img title="4Star" style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="18" alt="4Star" src="http://blog.spencen.com/images/83489-72989/4Star_12.png" width="92" border="0" /&gt; &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Finally I get to use C# 3.0 at work – yay! Lambdas, LINQ, var, object initializers – aahh such sweet stuff. Unfortunately, though SP1 bought a lot of goodness and fixed a few issues with XAML editing its also got one or two nasty glitches. Every now and then Visual Studio just “disappears” when opening a XAML file. If you reload the solution – poof – it closes down again. The trick is to make sure the Toolbox is un-pinned when opening the solution again. Sometimes even that doesn’t do the trick though and you have to delete the solutions SUO file before re-opening.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;WPF &lt;img title="5Star" style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="18" alt="5Star" src="http://blog.spencen.com/images/83489-72989/5Star_6.png" width="92" border="0" /&gt; &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Awesome (yeah I’m biased &lt;img src="http://blog.spencen.com/emoticons/smile.png" border="0" /&gt;). Still finding it hard to do certain things that should really be easy – but the pain is so much less than when I first started last year. Of course there are a bunch of improvements I’d like to see – particularly around the visual designer. Makes me long for one of those jobs on the Cider team that &lt;a href="http://karlshifflett.wordpress.com/2008/08/27/first-week-at-microsoft/"&gt;Karl posted about&lt;/a&gt; now he’s been &lt;em&gt;absorbed&lt;/em&gt; by Microsoft. “Build a Resource Manager”… “How about a Data Binding Explorer”…&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;SQL 2008 &lt;img title="4Star" style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="18" alt="4Star" src="http://blog.spencen.com/images/83489-72989/4Star_11.png" width="92" border="0" /&gt; &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Haven’t really got into this as much as I’d like – there’s no real killer feature – but there are plenty of smaller features that really make it worthwhile. Change Tracking, Intellisense (when it decides to work), Resource Manager, Tools for Express editions, decent date types better matching the .NET types etc.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Sync Services for ADO.NET &lt;img title="5Star" style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="18" alt="5Star" src="http://blog.spencen.com/images/83489-72989/5Star_5.png" width="92" border="0" /&gt; &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Love this stuff – has a few quirks but generally provides you with lots of depth. The wizard gets you started but you can drill into it as deep as you want – down to handwriting all the SQL yourself.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Rhino Mocks &lt;img title="3Star" style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="18" alt="3Star" src="http://blog.spencen.com/images/83489-72989/3Star_3.png" width="92" border="0" /&gt; &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Mocking frameworks were new to me. I understand the principles – but I’d never bothered with one before – preferring instead to create and maintain my own concrete mock objects where possible. I’m finding Rhino Mocks to be quite a struggle – at times its bliss – at others its just plain frustrating. Need to keep working on this one.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;NCover &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Well if nothing else its convinced me that 100% code coverage means relatively little. In fact I think chasing code coverage percentages is generally detrimental to the quality of the overall tests. Not really fair to rate this one – it does what its supposed to do very well – I’m just not convinced that what its supposed to do is worth doing.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Resharper &lt;img title="2Star" style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="18" alt="2Star" src="http://blog.spencen.com/images/83489-72989/2Star_3.png" width="93" border="0" /&gt; &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Some great features in this package. I love the highlighting of redundant code blocks (casts, variables, pointless condition tests etc). Also has some nice navigation hot keys. However, its slows my (brand new 4Gb RAM) machine to a crawl, the Intellisense and formatting is just plain intrusive (so much so I switched most of it off) and it crashes frequently. Often when it crashes it throws up a stupid “would you like to submit this crash” dialog that just takes me that much closer to uninstalling the package – particularly when I’ve told it countless times not to show me that dialog!&lt;/p&gt;  &lt;p&gt;To sum this one up its got some great features – but they come at a significant cost. This is only still installed on my machine because I believe its the type of product you really need to commit some effort to before you can break through the pain barrier.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;CruiseControl &lt;img title="4Star" style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="18" alt="4Star" src="http://blog.spencen.com/images/83489-72989/4Star_10.png" width="92" border="0" /&gt; &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;I have recently been using TFS which I’m a big fan of but I’ve used CruiseControl before and it certainly does a great job.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;NHibernate&lt;/strong&gt; &lt;img title="1Star" style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="18" alt="1Star" src="http://blog.spencen.com/images/83489-72989/1Star_3.png" width="93" border="0" /&gt; &lt;/p&gt;  &lt;p&gt;Probably the reason the project wasn’t finished a week earlier. I wasn’t really expecting too much from NHibernate – after all its &lt;a href="http://www.paulstovell.com/blog/orm-its-time-to-do-some-real-work"&gt;just an ORM&lt;/a&gt; right? We’ve got some clever people working on our team [though admittedly I don’t think any would consider themselves an NHibernate expert] but every minor thing has been a struggle. Some examples: &lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Using our own collections for one to many relationships – why is this so hard!? &lt;/li&gt;    &lt;li&gt;Creating a simple two level inheritance hierarchy – how can this not be trivial? &lt;/li&gt;    &lt;li&gt;Having to have nullable parent foreign keys in some scenarios because NHibernate insists on performing an insert prior to updating the parent foreign key. Why can’t it determine the dependency order and do the inserts in the right sequence? &lt;/li&gt;    &lt;li&gt;Eager loading generates idiotic queries. Reference data e.g. code lookups are fetched using individual SELECTs rather than by joining on the main table – WTF? So what could be done in one SELECT is instead done in several &lt;em&gt;thousand&lt;/em&gt; (if you have several thousand rows). &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;As things stand I would &lt;em&gt;never&lt;/em&gt; recommend this tool. If you’ve got a simple database your time is better spent writing your own data access layer rather than struggling with NHibernate’s peculiarities. If you’ve got a complex database then spend the time to investigate other alternatives. I cringe to think that NHibernate could really be the ORM of choice for an enterprise app.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Castle&lt;/strong&gt; &lt;img title="4Star" style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="18" alt="4Star" src="http://blog.spencen.com/images/83489-72989/4Star_9.png" width="92" border="0" /&gt; &lt;/p&gt;  &lt;p&gt;We’ve been using Castle Windsor as our IoC. Previously I’d used Unity and, in the simple method that we’re using an IoC, there really isn’t any difference between them. Windsor does the job very nicely and I’m really enjoying working on an application that is so loosely coupled.&lt;/p&gt;  &lt;p&gt;For performing validation in the business layer we’re also using Castle’s Validation components. These are really lightweight and provide some very simple property level validation through the use of attributes. Simple but nicely encapsulated. We’ve expanded this to work with our own entity level validation and then hooked that into the WPF Validation pipeline when those business objects are attached to a UI.&lt;/p&gt;  &lt;p&gt;Castle documentation (what there is of it) sucks.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;__________________________&lt;/p&gt;  &lt;p&gt;Well – like I said – this is really &lt;em&gt;my&lt;/em&gt; initial reaction to these tools. As the project progresses I’m sure some of these will change (for better or worse). Feel free to flame me if you think I've made some poor judgement calls.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>General</category><comments>http://blog.spencen.com/2008/08/28/a-new-project.aspx#Comments</comments><guid isPermaLink="false">ca0e26e6-bdf7-49c9-85c6-2fa6de34d400</guid><pubDate>Thu, 28 Aug 2008 14:26:28 GMT</pubDate></item><item><title>Tech Ed 2008</title><link>http://blog.spencen.com/2008/08/28/tech-ed-2008.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I’m off to &lt;a href="http://www.microsoft.com.au/teched/"&gt;Tech Ed 2008 in Sydney&lt;/a&gt; next week – courtesy of Microsoft and their &lt;a href="http://www.microsoft.com/australia/heroes/community.aspx"&gt;Demos Happen {Here}&lt;/a&gt; competition. I hadn’t planned on going this year but its hard to turn down free tickets! I even have a 10 minute slot to present during afternoon tea on the first day.&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2008/08/28/tech-ed-2008.aspx#Comments</comments><guid isPermaLink="false">e0c7ee77-529e-4047-86f9-6ea1aac9720c</guid><pubDate>Thu, 28 Aug 2008 13:10:17 GMT</pubDate></item><item><title>BindingGroup Secrets Revealed</title><link>http://blog.spencen.com/2008/08/12/bindinggroup-secrets-revealed.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;When Visual Studio 2008 SP1 Beta was released it was &lt;a href="http://blog.spencen.com/2008/05/15/bindinggroup-in-net-35-sp1.aspx"&gt;hinted&lt;/a&gt; that new data binding functionality would be available for WPF applications using a new BindingGroup class.&lt;/p&gt;  &lt;p&gt;Well with the release of SP1 RTM the BindingGroup surfaces – no longer such a well guarded secret. On the other hand it hasn’t exactly been promoted as a key new feature? I’ve yet to find a mention of it aside from the original reference by Brad Abrams.&lt;/p&gt;  &lt;p&gt;I’ve only taken a quick glance thus far – but what I’ve seem looks promising. I was hoping for a method to overcome the clumsy “&lt;a href="http://blog.spencen.com/2008/05/02/how-to-get-a-list-of-bindings-in-wpf.aspx"&gt;find a bound control&lt;/a&gt;” hack, but couldn’t find it. However, it does provide a &lt;em&gt;BindingExpressions&lt;/em&gt; collection which provides an easy mechanism to identify all bindings for a given FrameworkElement (including all its children). Well – for those that care – here’s the &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.bindinggroup.aspx"&gt;MSDN documentation for BindingGroup&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;Also of interest, but swamped by the SP1 RTM headlines a &lt;a href="http://windowsclient.net/wpf/wpf35/wpf-dg-preview-ctrl-investments.aspx"&gt;CTP for the forthcoming WPF DataGrid&lt;/a&gt;!&lt;/p&gt;  &lt;p&gt;&lt;font color="#ff0000"&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: &lt;/font&gt;&lt;a href="http://blogs.msdn.com/vinsibal/archive/2008/08/11/wpf-3-5-sp1-feature-bindinggroups-with-item-level-validation.aspx"&gt;&lt;font color="#ff0000"&gt;Vincent Sibal explains BindingGroup in full&lt;/font&gt;&lt;/a&gt;&lt;font color="#ff0000"&gt;.&lt;/font&gt;&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2008/08/12/bindinggroup-secrets-revealed.aspx#Comments</comments><guid isPermaLink="false">03e1f0b7-b734-4ae6-a92d-c075f655b352</guid><pubDate>Tue, 12 Aug 2008 13:57:58 GMT</pubDate></item><item><title>Dr Horrible, favourite Sci-Fi Show and Authors</title><link>http://blog.spencen.com/2008/08/07/dr-horrible-favourite-scifi-show-and-authors.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;For fans of Joss Whedon – creator of &lt;a href="http://en.wikipedia.org/wiki/Firefly_(TV_series)"&gt;Firefly&lt;/a&gt; (a brilliant, though short-lived Sci-Fi series) comes “&lt;a href="http://www.drhorrible.com/"&gt;Dr Horrible&lt;/a&gt;”. This is a three act musical comedy that he made during the writer’s strike (ie. no studio involvement). Definitely worth watching! [Joss also did &lt;em&gt;Buffy the Vampire Slayer&lt;/em&gt; (but I forgive him) hence he has a cult following that melted the servers they originally posted this to. An additional 2.2 million downloads in its first week on iTunes too.]&lt;/p&gt;  &lt;p&gt;I also get surprised by the number of people that haven’t read &lt;a href="http://www.iain-banks.net/"&gt;Iain M Banks&lt;/a&gt; book – my favourite sci-fi author (though he does contemporary fiction too). There’s a great intro on the Culture civilization that spans many of his books &lt;a href="http://www.cs.bris.ac.uk/~stefan/culture.html"&gt;here&lt;/a&gt;. &lt;/p&gt;  &lt;p&gt;I guess while I’m at it, if you’re doing fantasy fiction is there really anyone better that &lt;a href="http://www.brightweavings.com/"&gt;Guy Gavriel Kay&lt;/a&gt;?&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2008/08/07/dr-horrible-favourite-scifi-show-and-authors.aspx#Comments</comments><guid isPermaLink="false">89f9f814-5d2e-4d41-b52d-c9df6dc7c46f</guid><pubDate>Wed, 06 Aug 2008 17:07:43 GMT</pubDate></item><item><title>Why DataTemplates Rock!</title><link>http://blog.spencen.com/2008/08/03/why-datatemplates-rock.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;In the recent Screencasts I did on creating an Occasionally Connected app my user interface consisted of a ListBox and a few buttons. The ListBox was used to display the list of &lt;em&gt;Holidays&lt;/em&gt; read from a locally cached database. The application has now evolved where that early prototype has become the initial &amp;#8220;selection screen&amp;#8221; for the HolidayPlanner application.&lt;/p&gt;  &lt;p&gt;Here is the screen using a ResourceDictionary (Resources\Simple.xaml) with the bare minimum required to be usable:&lt;/p&gt;  &lt;p&gt;&lt;img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="205" alt="HolidaySelectionSimple" src="http://blog.spencen.com/images/83489-72989/HolidaySelectionSimple_2.jpg" width="618" border="0" /&gt; &lt;/p&gt;  &lt;p&gt;And here&amp;#8217;s the XAML behind it:&lt;/p&gt;  &lt;pre class="code"&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Window &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Class&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;ADOSyncSampleSP1.MainWindow&amp;quot;
    &lt;/span&gt;&lt;span style="color: red"&gt;xmlns&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;
    &lt;/span&gt;&lt;span style="color: red"&gt;xmlns&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;
    &lt;/span&gt;&lt;span style="color: red"&gt;xmlns&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;dm&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;clr-namespace:HolidayPlanner.DataModel&amp;quot;
    &lt;/span&gt;&lt;span style="color: red"&gt;xmlns&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;cm&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;clr-namespace:Spencen.PresentationLayer.Commands&amp;quot;
    &lt;/span&gt;&lt;span style="color: red"&gt;Title&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;Occasionally Connected Application Demo&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Height&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;581.783&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Width&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;551.777&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Language&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;en-AU&amp;quot;&amp;gt;
&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;DockPanel &lt;/span&gt;&lt;span style="color: red"&gt;Name&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;dockPanel1&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;VerticalAlignment&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;Stretch&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;LastChildFill&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;True&amp;quot;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TabControl &lt;/span&gt;&lt;span style="color: red"&gt;DockPanel.Dock&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Top&amp;quot;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TabItem &lt;/span&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Plan&amp;quot;&amp;gt;
                &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBarTray&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBar &lt;/span&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Select Holiday&amp;quot;&amp;gt;
                        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Button &lt;/span&gt;&lt;span style="color: red"&gt;cm&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;CommandBinder.Command&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;NewCommand&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Button &lt;/span&gt;&lt;span style="color: red"&gt;cm&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;CommandBinder.Command&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;PropertiesCommand&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBar&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBar &lt;/span&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Configuration&amp;quot;&amp;gt;
                        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Button &lt;/span&gt;&lt;span style="color: red"&gt;cm&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;CommandBinder.Command&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;SecurityCommand&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Button &lt;/span&gt;&lt;span style="color: red"&gt;cm&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;CommandBinder.Command&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;NetworkSettingsCommand&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Button &lt;/span&gt;&lt;span style="color: red"&gt;cm&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;CommandBinder.Command&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;SettingsCommand&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBar&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;                        
                &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBarTray&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
            &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TabItem&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TabItem &lt;/span&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Experience&amp;quot;&amp;gt;
                &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBarTray&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBar &lt;/span&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Select Holiday&amp;quot; &amp;gt;
                        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Button &lt;/span&gt;&lt;span style="color: red"&gt;cm&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;CommandBinder.Command&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;OpenCommand&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&amp;gt;
                    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBar&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBarTray&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
             &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TabItem&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;TabItem &lt;/span&gt;&lt;span style="color: red"&gt;Header&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Review&amp;quot;&amp;gt;
                &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBarTray&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBar&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Button &lt;/span&gt;&lt;span style="color: red"&gt;cm&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;CommandBinder.Command&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;SynchronizeCommand&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&amp;gt;
                    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBar&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ToolBarTray&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
            &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TabItem&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;TabControl&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ListBox &lt;/span&gt;&lt;span style="color: red"&gt;Name&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;listBox1&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;ItemsSource&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;Binding &lt;/span&gt;&lt;span style="color: red"&gt;Holidays&lt;/span&gt;&lt;span style="color: blue"&gt;}&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;HorizontalAlignment&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;Stretch&amp;quot; &lt;br /&gt;                     &lt;/span&gt;&lt;span style="color: red"&gt;ScrollViewer.CanContentScroll&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;True&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;ScrollViewer.VerticalScrollBarVisibility&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Visible&amp;quot;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ListBox.InputBindings&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;KeyBinding &lt;/span&gt;&lt;span style="color: red"&gt;Command&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;ApplicationCommands.Open&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;Key&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Enter&amp;quot;/&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;
            &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ListBox.InputBindings&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ListBox.GroupStyle&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;GroupStyle &lt;/span&gt;&lt;span style="color: red"&gt;HeaderTemplate&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style="color: #a31515"&gt;StaticResource &lt;/span&gt;&lt;span style="color: red"&gt;HolidayGroupHeader&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;}&amp;quot;/&amp;gt;
            &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ListBox.GroupStyle&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ListBox.ItemsPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ItemsPanelTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
                    &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;VirtualizingStackPanel &lt;/span&gt;&lt;span style="color: red"&gt;Orientation&lt;/span&gt;&lt;span style="color: blue"&gt;=&amp;quot;Vertical&amp;quot; &lt;/span&gt;&lt;span style="color: red"&gt;VirtualizingStackPanel.VirtualizationMode&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Recycling&amp;quot;/&amp;gt;
                &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ItemsPanelTemplate&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
            &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ListBox.ItemsPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ListBox&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;DockPanel&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Window&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;span style="color: blue"&gt;&lt;font face="Verdana" size="1"&gt;&amp;gt;&lt;/font&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;What I love about WPF&amp;#8217;s templating and styling system is that with a single line change to the App.xaml I can swap out the vanilla DataTemplates with something more appealing. So changing this:&lt;/p&gt;

&lt;p&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Application &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Class&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;ADOSyncSampleSP1.App&amp;quot; 
        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;&lt;span style="color: red"&gt;xmlns&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&lt;a href="http://schemas.microsoft.com/winfx/2006/xaml/presentation"&gt;http://schemas.microsoft.com/winfx/2006/xaml/presentation&lt;/a&gt; 

        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;&lt;span style="color: red"&gt;xmlns&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&lt;a href="http://schemas.microsoft.com/winfx/2006/xaml"&gt;http://schemas.microsoft.com/winfx/2006/xaml&lt;/a&gt; 

        &lt;br /&gt;&lt;/span&gt;&lt;span style="color: red"&gt;&amp;#160;&amp;#160;&amp;#160; StartupUri&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Views/MainWindow.xaml&amp;quot;&amp;gt; 
        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Application.Resources&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt; 
        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ResourceDictionary&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt; 
        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ResourceDictionary.MergedDictionaries&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt; 
        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color: #a31515"&gt;ResourceDictionary &lt;/span&gt;&lt;span style="color: red"&gt;Source&lt;/span&gt;&lt;/strong&gt;&lt;/font&gt;&lt;/font&gt;&lt;span style="color: blue"&gt;&lt;font face="Verdana" size="1"&gt;&lt;strong&gt;=&amp;quot;Resources/Simple.xaml&amp;quot;/&amp;gt; 
        &lt;br /&gt;&lt;/strong&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/span&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: green"&gt;&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ResourceDictionary.MergedDictionaries&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;#160; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ResourceDictionary&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt; 
        &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Application.Resources&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt; 
        &lt;br /&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Application&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;To this:&lt;/p&gt;
&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Application &lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;Class&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;ADOSyncSampleSP1.App&amp;quot; 
      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;&lt;span style="color: red"&gt;xmlns&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&lt;a href="http://schemas.microsoft.com/winfx/2006/xaml/presentation"&gt;http://schemas.microsoft.com/winfx/2006/xaml/presentation&lt;/a&gt; 

      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;&lt;span style="color: red"&gt;xmlns&lt;/span&gt;&lt;span style="color: blue"&gt;:&lt;/span&gt;&lt;span style="color: red"&gt;x&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&lt;a href="http://schemas.microsoft.com/winfx/2006/xaml"&gt;http://schemas.microsoft.com/winfx/2006/xaml&lt;/a&gt; 

      &lt;br /&gt;&lt;/span&gt;&lt;span style="color: red"&gt;&amp;#160;&amp;#160;&amp;#160; StartupUri&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;=&amp;quot;Views/MainWindow.xaml&amp;quot;&amp;gt; 
      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Application.Resources&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt; 
      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ResourceDictionary&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt; 
      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ResourceDictionary.MergedDictionaries&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt; 
      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;strong&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color: #a31515"&gt;ResourceDictionary &lt;/span&gt;&lt;span style="color: red"&gt;Source&lt;/span&gt;&lt;/strong&gt;&lt;/font&gt;&lt;/font&gt;&lt;span style="color: blue"&gt;&lt;font face="Verdana" size="1"&gt;&lt;strong&gt;=&amp;quot;Resources/Standard.xaml&amp;quot;/&amp;gt; 
      &lt;br /&gt;&lt;/strong&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/span&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: green"&gt;&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ResourceDictionary.MergedDictionaries&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;#160; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ResourceDictionary&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt; 
      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Application.Resources&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt; 
      &lt;br /&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Application&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt; 

&lt;p&gt;Changes the front screen as shown below without changing any of the behaviours (other than adding UI enhancements such as hot tracking etc.)&lt;/p&gt;

&lt;p&gt;&lt;img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="582" alt="HolidaySelectionStandard" src="http://blog.spencen.com/images/83489-72989/HolidaySelectionStandard_2.jpg" width="552" border="0" /&gt; &lt;/p&gt;

&lt;p&gt;At this point I must admit I was feeling kinda proud of myself. But then two things happened to change this. &lt;/p&gt;

&lt;p&gt;Firstly I watched &lt;a href="http://blog.spencen.com/2008/06/25/billy-hollis-on-dnrtv.aspx"&gt;DNR TV episode 115&lt;/a&gt; where Billy Hollis shows how WPF allows developers to bring new user interface paradigms into their applications. Now my own user interface begins to look a little bit like &amp;#8220;lipstick on a pig&amp;#8221;. I can&amp;#8217;t help looking through the veil and seeing that same old toolbar and listbox from the Windows 95 era.&lt;/p&gt;

&lt;p&gt;Secondly, a few weeks ago I attended the first day of CodeCampSA. During this a guy by the name of Alan Boldock gave a very entertaining talk on his experiences creating appealing user interfaces using WPF. During this presentation he showed off some quick samples of the work his team had been doing. I was sitting in the audience putting together some final tweaks on my new &lt;em&gt;Resources\Standard.xaml&lt;/em&gt; resource dictionary. Again, it was somewhat demoralizing, I couldn&amp;#8217;t help but think that I just hadn&amp;#8217;t embraced the potential that WPF could offer.&lt;/p&gt;

&lt;p&gt;There was nothing for it &amp;#8211; I had to come to grips with my &amp;#8220;inner-designer&amp;#8221;. I tried coaxing my alter-ego out by wearing the closest thing I could find to a turtleneck sweater. Bravely I cracked open Expression Design and painstakingly put together something that I could export out as the new DataTemplate for the &lt;em&gt;Holiday&lt;/em&gt; class. So I add another line to the App.xaml to include the new DataTemplate, and switched the ListBox to be Horizontal rather than Vertical.&lt;/p&gt;
&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;ResourceDictionary.MergedDictionaries&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span&gt;&amp;gt; 
      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;&lt;font color="#800000"&gt;ResourceDictionary&lt;/font&gt; &lt;/span&gt;&lt;span style="color: red"&gt;Source&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;span style="color: blue"&gt;&lt;font face="Verdana" size="1"&gt;=&amp;quot;Resources/Standard.xaml&amp;quot;/&amp;gt; 
    &lt;br /&gt;&lt;strong&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;lt;ResourceDictionary &lt;/span&gt;&lt;span style="color: red"&gt;Source&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;span style="color: blue"&gt;&lt;font face="Verdana" size="1"&gt;=&amp;quot;Resources/PhotoAlbum.xaml&amp;quot;/&amp;gt;&lt;/font&gt;&lt;/span&gt; 

      &lt;br /&gt;&lt;/strong&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/span&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: green"&gt;&lt;/span&gt;&lt;span style="color: blue"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;ResourceDictionary.MergedDictionaries&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="1"&gt;&lt;font face="Verdana"&gt;&lt;span style="color: blue"&gt;&amp;#160; &lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;

&lt;p&gt;Here&amp;#8217;s the end result:&lt;/p&gt;

&lt;p&gt;&lt;img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="721" alt="HolidaySelectionAlbum" src="http://blog.spencen.com/images/83489-72989/HolidaySelectionAlbum_2.jpg" width="533" border="0" /&gt; &lt;/p&gt;

&lt;p&gt;Well, granted its not particularly artistic, nor innovative &amp;#8211; but I still got a warm, fuzzy feeling seeing my new selection screen. [Or maybe that was just from the itchy old sweater? &lt;img src="http://blog.spencen.com/emoticons/smile.png" border="0" /&gt;]&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2008/08/03/why-datatemplates-rock.aspx#Comments</comments><guid isPermaLink="false">2beb694a-00bb-4314-bf8c-0548eeedff1d</guid><pubDate>Sat, 02 Aug 2008 15:45:22 GMT</pubDate></item><item><title>Sync Services Screencast - Part 2</title><link>http://blog.spencen.com/2008/07/16/sync-services-screencast--part-2.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I’ve just uploaded Part 2 of my screencast on Occasionally Connected Application using Sync Services for ADO.NET. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/ADOSyncStats_2.jpg"&gt;&lt;img title=ADOSyncStats style="BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px" height=244 alt=ADOSyncStats src="http://blog.spencen.com/images/83489-72989/ADOSyncStats_thumb.jpg" width=324 border=0&gt;&lt;/a&gt;&amp;nbsp;&lt;a href="http://blog.spencen.com/images/83489-72989/ADOSyncConflict_2.jpg"&gt;&lt;img title=ADOSyncConflict style="BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px" height=244 alt=ADOSyncConflict src="http://blog.spencen.com/images/83489-72989/ADOSyncConflict_thumb.jpg" width=324 border=0&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;You can via &lt;a href="http://silverlight.services.live.com/72225/Sync%20Services%20for%20ADO.NET%20Presentation%20Part%202/video.wmv"&gt;this link&lt;/a&gt;. This 12 minute screencast contains some of the features that I wanted to cover in the Part 1 demo presentation but just couldn’t fit into the allotted 10 minutes.&lt;/p&gt;
&lt;p&gt;More info: &lt;a href="http://msdn.microsoft.com/en-us/library/bb725997(SQL.100).aspx"&gt;Handling Data Conflicts and Errors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next I’m planning to do a quick 10 minute intro of the Holiday Planner application (for those that have been wondering about the logo in the screencast). Then at least one screencast talking about the power of using WPF ItemsControls in conjunction with DataTemplates.&lt;/p&gt;</description><category>Development</category><category>.NET</category><comments>http://blog.spencen.com/2008/07/16/sync-services-screencast--part-2.aspx#Comments</comments><guid isPermaLink="false">435391c0-f6f0-4df3-b4bd-6f18db8c6ea7</guid><pubDate>Tue, 15 Jul 2008 15:59:11 GMT</pubDate></item><item><title>Working in Adelaide</title><link>http://blog.spencen.com/2008/07/14/working-in-adelaide.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;I have a day job as a professional software developer. I recently took the opportunity to assess my current employer and here’s how they did:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;strong&gt;Location&lt;/strong&gt;: Adelaide CBD, perfect for public transport, modern office block&lt;/li&gt;    &lt;li&gt;&lt;strong&gt;Work hours&lt;/strong&gt;: flexible with core hours, facilities exist for occasional work from home days via VPN (say if you’re expecting a tradesperson in the middle of the day).&lt;/li&gt;    &lt;li&gt;&lt;strong&gt;Hardware&lt;/strong&gt;: Dell XPS 1710 laptop, wireless keyboard and mouse, additional 24” monitor (so that’s a resolution of 1920x1200 + 1600x1050). That’s pretty much the standard for &lt;u&gt;all&lt;/u&gt; developers.&lt;/li&gt;    &lt;li&gt;&lt;strong&gt;Facilities&lt;/strong&gt;: Kitchen with freshly ground coffee machine, your choice of other beverages and cereal (if the existing selection of herbal infusions, teas, coffees and chocolate mixes isn’t enough). Assorted cream biscuits provided, chocolate ones on Friday.&lt;/li&gt;    &lt;li&gt;&lt;strong&gt;Dress Code&lt;/strong&gt;: Business casual Monday through Thursday, casual every Friday.&lt;/li&gt;    &lt;li&gt;&lt;strong&gt;Staff&lt;/strong&gt;: Definitely some of the most talented and productive I’ve met - yet still take the time to kick the office footy around.&lt;/li&gt;    &lt;li&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;: Great VPN (helps they use the same ISP as me), above average salaries, interesting software projects, new office chair&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Now I’ve had the good fortune to work in some pretty good software development shops (including one with multi-coloured walls, bean-bags and a table tennis table) but it really is hard to find too many flaws with this setup.&lt;/p&gt;  &lt;p&gt;Having said all that, despite it being a great place to work this will be my last week. Why the change? Well – lets just say its more of a “&lt;em&gt;it’s not you, it’s me”&lt;/em&gt; situation.&lt;/p&gt;</description><category>Development</category><category>General</category><comments>http://blog.spencen.com/2008/07/14/working-in-adelaide.aspx#Comments</comments><guid isPermaLink="false">fde2049e-dff6-4d47-b3f6-bd07c29f09fe</guid><pubDate>Mon, 14 Jul 2008 11:55:35 GMT</pubDate></item><item><title>My First Screencast</title><link>http://blog.spencen.com/2008/07/13/my-first-screencast.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;P&gt;The attached &lt;A href="http://silverlight.services.live.com/72225/Sync%20Services%20for%20ADO.NET%20Presentation/video.wmv"&gt;clip&lt;/A&gt; is a screencast of a recent 10 minute presentation I gave at CodeCampSA.&lt;/P&gt;
&lt;P&gt;Its the first in what is hopefully a series of clips which walk through how I’ve been building an application called &lt;EM&gt;Holiday Planner&lt;/EM&gt; (working title). &lt;/P&gt;
&lt;P&gt;WARNING: I talk fast, and I’ve got an Australian accent &lt;IMG src="http://blog.spencen.com/emoticons/smile.png" border=0&gt;. I’d suggest using the &lt;A href="http://silverlight.services.live.com/72225/Sync%20Services%20for%20ADO.NET%20Presentation/video.wmv"&gt;link&lt;/A&gt; to view in full res (1024x768).&lt;/P&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2008/07/13/my-first-screencast.aspx#Comments</comments><guid isPermaLink="false">c4194723-8bad-4cfa-a966-f42501a63103</guid><pubDate>Sat, 12 Jul 2008 15:48:28 GMT</pubDate></item><item><title>Windows (Home) Server 2008</title><link>http://blog.spencen.com/2008/06/26/windows-home-server-2008.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Last weekend I went down to the &lt;a href="http://www.allneeds.com.au"&gt;local (geek) hardware store&lt;/a&gt; and bought myself a 640Gb drive and 2Gb of RAM for my home made Windows Home Server box (for a total of AU$150). After a painless hardware upgrade I then downloaded and installed the latest Virtual Server 2005. I installed the 640Gb drive as a “back-up drive” instead of adding it to the Windows Home Server “disk pool” using the Windows Home Server Power Pack 1 Beta. This gave me two benefits – first it meant that I could then use the drive to actually backup the server shares automatically, and secondly it meant that the drive was not going to be affected by the routine “disk balancing” that Windows Home Server performs on the storage pool.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Windows%20Home%20Server%20Power%20Pack%201_2.png"&gt;&lt;img title="Windows Home Server Power Pack 1" style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="176" alt="Windows Home Server Power Pack 1" src="http://blog.spencen.com/images/83489-72989/Windows%20Home%20Server%20Power%20Pack%201_thumb.png" width="421" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;So with plenty of spare RAM and disk space I could then easily create a virtual machine instance running Windows Server 2008 with a copy of SQL Server 2008 RC0. This is the first real chance I’ve had to take a look at the new features in SQL Server 2008 (the main reason for the install). Initial thoughts… new DataTypes – nice! Built in Change Tracking in conjunction with ADO.NET Sync Services… funky!&lt;/p&gt;</description><category>General</category><category>Windows Home Server</category><comments>http://blog.spencen.com/2008/06/26/windows-home-server-2008.aspx#Comments</comments><guid isPermaLink="false">e5274f03-332c-49da-986d-6c6e07b99cb2</guid><pubDate>Wed, 25 Jun 2008 14:47:59 GMT</pubDate></item><item><title>Billy Hollis on dnrTV</title><link>http://blog.spencen.com/2008/06/25/billy-hollis-on-dnrtv.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Just finished watching &lt;a href="http://dnrtv.com/default.aspx?showID=115"&gt;Billy Hollis demo a WPF application on dnrTV&lt;/a&gt; that he and his business partners have been working on for one of their clients. I thought it was a great example of how a WPF application can take advantage of WPFs strengths to add some new UI interaction around common requirements for line of business applications. These included things like navigation, dirty checking, modal forms etc. Well worth watching. Billy also commented that the application was put together &lt;em&gt;without&lt;/em&gt; the aid of a UI designer – just three developers with a bent for good UI design.&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2008/06/25/billy-hollis-on-dnrtv.aspx#Comments</comments><guid isPermaLink="false">e2e4f08b-b2c0-4456-88a4-3f74d3f92545</guid><pubDate>Wed, 25 Jun 2008 14:22:39 GMT</pubDate></item><item><title>Dynamic Data</title><link>http://blog.spencen.com/2008/06/10/dynamic-data.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Tonight on the commute home I listened to a recent &lt;a href="http://www.dotnetrocks.com/"&gt;DNR&lt;/a&gt; podcast (&lt;a href="http://www.dotnetrocks.com/default.aspx?showNum=349"&gt;show 349&lt;/a&gt;) where Carl and Richard interview Scott Hunter a program manager on the ASP.NET team working on &lt;a href="http://code.msdn.microsoft.com/dynamicdata"&gt;Dynamic Data&lt;/a&gt;. I’ve heard enough about the topic before (e.g. &lt;a href="http://www.hanselminutes.com/default.aspx?showID=127"&gt;his interview with Scott Hanselman&lt;/a&gt;) to understand the basics. But what I really liked about the DNR interview was when Scott described that their intent to have it work with multiple client technologies – web forms, MVC ASP.NET, Silverlight and one would have to assume WPF.&lt;/p&gt;  &lt;p&gt;The &lt;a href="http://blogs.msdn.com/mairaw/default.aspx"&gt;Dynamic Data attributes&lt;/a&gt; have been specifically placed in a UI agnostic namespace – System.ComponentModel.DataAnnotations. It makes me feel all warm and fuzzy when I see the MS teams communicating or thinking “big picture”. I’m still hopeful we might get a System.ComponentModel.Validation namespace?&lt;/p&gt;</description><category>Development</category><category>.NET</category><comments>http://blog.spencen.com/2008/06/10/dynamic-data.aspx#Comments</comments><guid isPermaLink="false">7914bbcc-8443-4b01-a33d-f849dba33dc3</guid><pubDate>Tue, 10 Jun 2008 14:52:42 GMT</pubDate></item><item><title>&amp;quot;Star&amp;quot;tlingly Bad Code</title><link>http://blog.spencen.com/2008/06/03/quotstarquottlingly-bad-code.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Scott Hanselman's got my attention this morning with his recent endeavour to launch a community driven reference application for WPF. If you haven't already read about BabySmash! go read about it &lt;a href="http://www.hanselman.com/blog/IntroducingBabySmashAWPFExperiment.aspx"&gt;here&lt;/a&gt; and check it out on codeplex &lt;a href="http://www.codeplex.com/babysmash"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Scott mentions that the whole thing was put together whilst his wife was watching a rather unappealing movie. He then goes on to mention that the code is bad - really bad. What gets me though is that he has the audacity, nay the gall to suggest that just because he is capable of writing lame-ass code that by some bizarre form of association that his readers too sometimes write code like this. Now - I've downloaded the source code for BabySmash! - and let me tell you the code is pretty ugly. If Scott thinks that I'd ever let code like that be published under my name then... wait... ah... BUGGER! He's used some of my code! What's worse - he used probably the MOST lame-ass piece of code I've ever blogged (oh heck - yes OK I'm sure there are even worse examples of mine).&lt;/p&gt; &lt;p&gt;The code in question was a class I &lt;a href="http://blog.spencen.com/2007/11/09/xaml-and-wpf--or-quotim-seeing-starsquot.aspx"&gt;blogged about in November last year&lt;/a&gt;. I should point out that I made it very clear at the top of the post that this was more or less a rant - "dribble code" if you will. Its a very simply class that derives from Shape to draw a Star.&lt;/p&gt; &lt;p&gt;The method I used to draw the star was to take a triangle and simply "stamp" it out multiple times, rotating it around a central axis. The very clever WPF GetOutlinedPathGeometry is then used to clean up all the mess and consolidate into just the outline of the star.&lt;/p&gt; &lt;p&gt;Here's the original code that appears now in Scott's BabySmash:&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="font-size: 8pt; font-family: verdana"&gt;&lt;span&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;static&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;Geometry&lt;/span&gt; CreateStarGeometry(&lt;span style="color: rgb(0,0,255)"&gt;int&lt;/span&gt; numberOfPoints)
{
    &lt;span style="color: rgb(43,145,175)"&gt;GeometryGroup&lt;/span&gt; group = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;GeometryGroup&lt;/span&gt;();
    group.FillRule = &lt;span style="color: rgb(43,145,175)"&gt;FillRule&lt;/span&gt;.Nonzero;
    &lt;span style="color: rgb(43,145,175)"&gt;Geometry&lt;/span&gt; triangle = &lt;span style="color: rgb(43,145,175)"&gt;PathGeometry&lt;/span&gt;.Parse(&lt;span style="color: rgb(163,21,21)"&gt;"M 0,-30 L 10,10 -10,10 0,-30"&lt;/span&gt;);
    group.Children.Add(triangle);

    &lt;span style="color: rgb(0,0,255)"&gt;double&lt;/span&gt; deltaAngle = 360 / numberOfPoints;
    &lt;span style="color: rgb(0,0,255)"&gt;double&lt;/span&gt; currentAngle = 0;
    &lt;span style="color: rgb(0,0,255)"&gt;for&lt;/span&gt; (&lt;span style="color: rgb(0,0,255)"&gt;int&lt;/span&gt; index = 1; index &amp;lt; numberOfPoints; index++)
    {
        currentAngle += deltaAngle;
        triangle = triangle.CloneCurrentValue();
        triangle.Transform = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;RotateTransform&lt;/span&gt;(currentAngle, 0, 0);
        group.Children.Add(triangle);
    }

    &lt;span style="color: rgb(43,145,175)"&gt;Geometry&lt;/span&gt; outlinePath = group.GetOutlinedPathGeometry();
    &lt;span style="color: rgb(0,0,255)"&gt;return&lt;/span&gt; outlinePath;
}&lt;img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="153" alt="DrawingAStar" src="http://blog.spencen.com/images/83489-72989/DrawingAStar_3.png" width="200" align="right" border="0"&gt;&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;The code that I replaced that with the first time I actually used the Star class in an application (for a rating indicator) is shown below. It takes what I think is a much neater approach and is a little easier to configure with an inner and outer radius.&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="font-size: 8pt; font-family: verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;static&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;Geometry&lt;/span&gt; CreateStarGeometry2(&lt;br&gt;                             &lt;span style="color: rgb(0,0,255)"&gt;int&lt;/span&gt; numberOfPoints, &lt;br&gt;                             &lt;span style="color: rgb(0,0,255)"&gt;int&lt;/span&gt; outerRadius, &lt;br&gt;                             &lt;span style="color: rgb(0,0,255)"&gt;int&lt;/span&gt; innerRadius, &lt;br&gt;                             &lt;span style="color: rgb(43,145,175)"&gt;Point&lt;/span&gt; offset)
{
    &lt;span style="color: rgb(43,145,175)"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color: rgb(43,145,175)"&gt;PathSegment&lt;/span&gt;&amp;gt; segments = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color: rgb(43,145,175)"&gt;PathSegment&lt;/span&gt;&amp;gt;();

    &lt;span style="color: rgb(0,0,255)"&gt;double&lt;/span&gt; angleOffset = &lt;span style="color: rgb(43,145,175)"&gt;Math&lt;/span&gt;.PI * 2 / numberOfPoints;
    &lt;span style="color: rgb(0,0,255)"&gt;for&lt;/span&gt; (&lt;span style="color: rgb(0,0,255)"&gt;double&lt;/span&gt; angle = 0; angle &amp;lt; &lt;span style="color: rgb(43,145,175)"&gt;Math&lt;/span&gt;.PI * 2; angle += angleOffset)
    {
        &lt;span style="color: rgb(0,0,255)"&gt;double&lt;/span&gt; innerAngle = angle + angleOffset / 2;

        &lt;span style="color: rgb(43,145,175)"&gt;Point&lt;/span&gt; outerPoint = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;Point&lt;/span&gt;(&lt;br&gt;                                   &lt;span style="color: rgb(43,145,175)"&gt;Math&lt;/span&gt;.Sin(angle) * outerRadius + offset.X, &lt;br&gt;                                   &lt;span style="color: rgb(43,145,175)"&gt;Math&lt;/span&gt;.Cos(angle) * -outerRadius + offset.Y);
        &lt;span style="color: rgb(43,145,175)"&gt;Point&lt;/span&gt; innerPoint = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;Point&lt;/span&gt;(&lt;br&gt;                                   &lt;span style="color: rgb(43,145,175)"&gt;Math&lt;/span&gt;.Sin(innerAngle) * innerRadius + offset.X, &lt;br&gt;                                   &lt;span style="color: rgb(43,145,175)"&gt;Math&lt;/span&gt;.Cos(innerAngle) * -innerRadius + offset.Y);

        segments.Add(&lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;LineSegment&lt;/span&gt;(outerPoint, &lt;span style="color: rgb(0,0,255)"&gt;true&lt;/span&gt;));
        segments.Add(&lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;LineSegment&lt;/span&gt;(innerPoint, &lt;span style="color: rgb(0,0,255)"&gt;true&lt;/span&gt;));
     }

     &lt;span style="color: rgb(43,145,175)"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color: rgb(43,145,175)"&gt;PathFigure&lt;/span&gt;&amp;gt; figures = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color: rgb(43,145,175)"&gt;PathFigure&lt;/span&gt;&amp;gt;();
     figures.Add(&lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;PathFigure&lt;/span&gt;(&lt;br&gt;                         &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;Point&lt;/span&gt;(0 + offset.X, -outerRadius + offset.Y), &lt;br&gt;                         segments, &lt;span style="color: rgb(0,0,255)"&gt;true&lt;/span&gt;));

     &lt;span style="color: rgb(43,145,175)"&gt;Geometry&lt;/span&gt; star = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;PathGeometry&lt;/span&gt;(figures);

    &lt;span style="color: rgb(0,0,255)"&gt;return&lt;/span&gt; star;
}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;As embarrassed as I am that my Star class has meandered its way to such a large audience - I must admit I kinda got a kick out of seeing this in Scott's code &lt;img src="http://blog.spencen.com/emoticons/smile.png" border="0" /&gt;.&lt;/p&gt;
&lt;p&gt;In terms of the BabySmash! application itself - I think this is a great idea. Firstly from the point of view that I also have two young kids who love spending time with me on the computers. The younger two year old is at the stage where she recognizes most of the alphabet and loves typing random letters and seeing them appear on the screen. I wrote my &lt;a href="http://blog.spencen.com/2007/10/19/winforms-animation.aspx"&gt;WinForms animation sample&lt;/a&gt; primarily because my oldest(then 4) got a kick out of watching the bits dance around the screen (a later version included A-Z characters). [Alas he's now turned 5 and has since moved on to solving &lt;a href="http://www.albinoblacksheep.com/games/bloxorz"&gt;Bloxorz&lt;/a&gt; levels - scary!]&lt;/p&gt;
&lt;p&gt;Secondly the idea of a community driven WPF application just sounds like a great idea. I've been very slowly trying to build my own "hobby" application using WPF. Stumbling and being sidetracked at every turn - all very educational for me - but certainly delaying any semblance of a deliverable. Maybe Scott's approach is the way to go - hack it together ASAP - then let the community work together to discuss, refactor and enhance?&lt;/p&gt;</description><category>.NET</category><category>WPF</category><category>General</category><comments>http://blog.spencen.com/2008/06/03/quotstarquottlingly-bad-code.aspx#Comments</comments><guid isPermaLink="false">dd68e5f4-9717-41a1-a587-78d9cf383cfc</guid><pubDate>Tue, 03 Jun 2008 14:19:34 GMT</pubDate></item><item><title>Thoughts on Mesh Remote Desktop</title><link>http://blog.spencen.com/2008/05/28/thoughts-on-mesh-remote-desktop.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;One of the features of &lt;a href="http://www.mesh.com"&gt;Microsoft's Mesh&lt;/a&gt; is to provide a remote desktop connection to any of your devices via the Live Desktop. That amounts to being able to remote desktop from any of the supported browsers. Microsoft's &lt;a href="https://www.microsoft.com/windows/products/winfamily/windowshomeserver/default.mspx"&gt;Windows Home Server&lt;/a&gt; &lt;a href="http://blog.spencen.com/2007/10/17/whs-remote-access.aspx"&gt;already provides me with this experience&lt;/a&gt; and whilst I can't say I've used it a lot - it has helped me out a few times in a big way. &lt;/p&gt; &lt;p&gt;I had assumed that the technology involved in the Window Home Server remote desktop via the browser was the same technology that would be powering Window Live Mesh. Whether it is or not I can't tell - but the user experience is certainly different.&lt;/p&gt; &lt;p&gt;When you connect to Live Mesh it starts a remote desktop session in a window - complete with the standard "Mesh" sidebar window "clipped" onto the right hand edge. What's odd though is that the remote desktop uses the resolution of the remote hardware and is scaled to fit in the window - and the scaling does &lt;strong&gt;not&lt;/strong&gt; preserve the aspect ratio. So in my scenario - lets say I connect to my home desktop via my &lt;a href="http://blog.spencen.com/2007/11/28/a-new-toy.aspx"&gt;Fujitsu Lifebook&lt;/a&gt;. That means I'm viewing a 1920x1200 + 1280x1024 multi-monitor desktop on a laptop screen with a resolution of 1024x768. Umm... not very useful - showing a 3200x1200 very wide desktop squished to a 1024x768 display. It has a mode that allows switching between actual and fixed size - but at those resolutions its kinda akin to using remote desktop from a PDA into a PC - peering through a tiny window and endless scrolling.&lt;/p&gt; &lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/Live%20Mesh%20Remote%20Desktop%20-%20Squished_2.png" target="_blank"&gt;&lt;img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="223" alt="Live Mesh Remote Desktop - Squished" src="http://blog.spencen.com/images/83489-72989/Live%20Mesh%20Remote%20Desktop%20-%20Squished_thumb.png" width="360" border="0"&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Another point of difference is that unlike a standard remote desktop connection is that for the Live Mesh to recognize the devices it appears that you have to be signed in on each device. So no chance of using wake-on-LAN to get your machine up and running and ready to connect. You'd also have to have it auto-logon - hmm... suitable for my Media Center PC maybe - but not something I'd want on my other devices.&lt;/p&gt; &lt;p&gt;In fact the more I play with this, the more I begin to think its not really remote desktop as we know it. For starters the remote machine stays active - i.e. mouse moves and everything you're doing on the remote desktop can be seen on the remote machine - unless you click the "Hide desktop on remote device" button. &lt;/p&gt; &lt;p&gt;Secondly, its so much slower than a standard remote desktop. Even using it on a LAN its painfully slow to render the desktop background - yep that's right its rendering everything using bitmaps - and there doesn't seem to be any configuration options?&lt;/p&gt; &lt;p&gt;Thirdly, because it really just seems to be screen scraping the remote device (as opposed to actually logging in and creating a new virtual session) it means you get all kinds of weird behaviours. For example, when I remote connect to the laptop the logon screen shows the Fingerprint reader user interface. Umm... not really much point 'cause the hardware I'm connected with doesn't have a fingerprint reader.&lt;/p&gt; &lt;p&gt;Early days though - hopefully the feedback being logged up on &lt;a href="http://connect.microsoft.com"&gt;Connect&lt;/a&gt; will help shape the product. &lt;/p&gt; &lt;p&gt;&lt;img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="100" alt="Live Mesh Connect" src="http://blog.spencen.com/images/83489-72989/Live%20Mesh%20Connect_3.png" width="477" border="0"&gt; &lt;/p&gt; &lt;p&gt;I'm still waiting on an invite to the developer Tech Preview to see what the Live Mesh APIs look like.&lt;/p&gt; &lt;p&gt;P.S. The folder sharing Live Mesh stuff seems to be working very nicely. I already prefer it to &lt;a href="https://www.foldershare.com/welcome.aspx"&gt;FolderShare&lt;/a&gt;.&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2008/05/28/thoughts-on-mesh-remote-desktop.aspx#Comments</comments><guid isPermaLink="false">6b419aae-a91c-4906-9003-647538748254</guid><pubDate>Wed, 28 May 2008 12:08:18 GMT</pubDate></item><item><title>Windows Live Mesh Invite</title><link>http://blog.spencen.com/2008/05/24/windows-live-mesh-invite.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Woohoo - just got an invite to Window Live Mesh - am installing on a few machines now. &lt;/p&gt; &lt;p&gt;As an aside: I've been an intermittent user of FolderShare since before it was acquired by Microsoft. Will be interesting to see how they plan to merge FolderShare, Skydrive and Live Mesh going forwards.&lt;/p&gt;</description><category>General</category><comments>http://blog.spencen.com/2008/05/24/windows-live-mesh-invite.aspx#Comments</comments><guid isPermaLink="false">ae3648d3-9408-4df9-9de8-7290d5646625</guid><pubDate>Sat, 24 May 2008 10:40:25 GMT</pubDate></item><item><title>BindingGroup in .NET 3.5 SP1?</title><link>http://blog.spencen.com/2008/05/15/bindinggroup-in-net-35-sp1.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;P&gt;Of all the new features trumpeted for .NET 3.5 SP1 recently the one bullet point that really caught my attention was this little gem (from &lt;A href="http://blogs.msdn.com/brada/"&gt;Brad Adams blog&lt;/A&gt;).&lt;/P&gt;
&lt;BLOCKQUOTE&gt;
&lt;P&gt;A new BindingGroup in System.Windows.Data (additional databinding support)&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;At this stage I haven't downloaded and installed the bits. Anyone know what this "BindingGroup" refers to - I haven't heard/seen it mentioned anywhere else. &lt;BR&gt;&lt;BR&gt;
&lt;P&gt;[&lt;SPAN style="COLOR: red"&gt;&lt;STRONG&gt;Update 28-May-2008&lt;/STRONG&gt;:&lt;/SPAN&gt;The &lt;A href="http://blogs.msdn.com/jgoldb/archive/2008/05/15/what-s-new-for-performance-in-wpf-in-net-3-5-sp1.aspx"&gt;WPF Performance blog&lt;/A&gt;&amp;nbsp;provides some further hints on the purpose of BindingGroup]&lt;/P&gt;&lt;STRONG&gt;Item-Level Validation - &lt;/STRONG&gt;By using Binding Groups this applies validation rules to an entire bound item. For example it can enable validate &amp;amp; commit scenario for a form with few bind-able edit fields. (available in final RTM bits only) 
&lt;P&gt;&lt;/P&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2008/05/15/bindinggroup-in-net-35-sp1.aspx#Comments</comments><guid isPermaLink="false">bd6cdf3d-61b7-49bd-a414-ba74e2bcb408</guid><pubDate>Thu, 15 May 2008 12:14:06 GMT</pubDate></item><item><title>Applying MetaData to WPF Bindings</title><link>http://blog.spencen.com/2008/05/13/applying-metadata-to-wpf-bindings.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;This post describes how I'm applying MetaData defined in my model to WPF controls at runtime. The goal is to keep the XAML concise without cluttering it with property settings that obscure the form layout intent and ensuring it stays in sync with the model across all forms in the application. Refer to &lt;a href="http://karlshifflett.wordpress.com/2008/05/08/metadata-a-voice-crying-in-the-wilderness-hey-im-over-here/"&gt;Karl Schifflet's recent passionate post&lt;/a&gt; about why MetaData is important.&lt;/p&gt; &lt;p&gt;In WinForms I've traditionally used the data Binding to identify how MetaData should map to controls. So the following describes my attempt at the same thing in WPF.&lt;/p&gt; &lt;p&gt;I'm using attributes to define MetaData directly against my model classes. I'd like for it to be more open than that - for instance extracting the MetaData from a database, config file etc. - but attributes is a good place to start. Here's an example property from my Holiday model class.&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="font-size: 8pt; font-family: verdana"&gt;    [&lt;span style="color: rgb(43,145,175)"&gt;Mandatory&lt;/span&gt;]
    [&lt;span style="color: rgb(43,145,175)"&gt;Annotation&lt;/span&gt;(&lt;span style="color: rgb(163,21,21)"&gt;"Name"&lt;/span&gt;, &lt;span style="color: rgb(163,21,21)"&gt;"Name of this holiday"&lt;/span&gt;)]
    [&lt;span style="color: rgb(43,145,175)"&gt;StringData&lt;/span&gt;(MaximumLength=50, Case=&lt;span style="color: rgb(43,145,175)"&gt;CharacterCasing&lt;/span&gt;.Upper)]
    &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; Name 
    {
        &lt;span style="color: rgb(0,0,255)"&gt;get&lt;/span&gt; { &lt;span style="color: rgb(0,0,255)"&gt;return&lt;/span&gt; _name; }
        &lt;span style="color: rgb(0,0,255)"&gt;set&lt;/span&gt; 
        {
            &lt;span style="color: rgb(0,0,255)"&gt;if&lt;/span&gt; (!&lt;span style="color: rgb(43,145,175)"&gt;Object&lt;/span&gt;.Equals(_name, &lt;span style="color: rgb(0,0,255)"&gt;value&lt;/span&gt;))
            {
                _name = &lt;span style="color: rgb(0,0,255)"&gt;value&lt;/span&gt;;
                OnPropertyChanged(&lt;span style="color: rgb(163,21,21)"&gt;"Name"&lt;/span&gt;);
            }
        }
    }&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;So in this example I'm using three custom attributes. [Mandatory] is pretty self explanatory. Whilst its not used by the MetaData Applicator it is used by the ValidationEngine to create a MandatoryRule.&lt;/p&gt;
&lt;p&gt;The [Annotation] attribute derives from System.ComponentModel.DisplayName and extends it by including extended descriptions for tooltips and possible help keys etc.&lt;/p&gt;
&lt;p&gt;The third [StringData] attribute is the one that defines the MetaData specific to string data types. The attributes themselves are defined in a neutral namespace and assembly (Spencen.MetaData) with no references to any presentation assemblies.&lt;/p&gt;
&lt;p&gt;Taking a look at the StringDataAttribute class its just a bunch of properties with no inherent behaviour (like most attributes).&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="font-size: 8pt; font-family: verdana"&gt;    [&lt;span style="color: rgb(43,145,175)"&gt;MetaData&lt;/span&gt;]
    &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;class&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;StringDataAttribute&lt;/span&gt; : &lt;span style="color: rgb(43,145,175)"&gt;StringLengthAttribute&lt;/span&gt; &lt;span style="color: rgb(0,128,0)"&gt;
&lt;/span&gt;    {
        &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; StringDataAttribute() : &lt;span style="color: rgb(0,0,255)"&gt;base&lt;/span&gt;()
        {
        }

&lt;span style="color: rgb(0,0,255)"&gt;        #region&lt;/span&gt; Public Properties

        &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;string&lt;/span&gt; Format { &lt;span style="color: rgb(0,0,255)"&gt;get&lt;/span&gt;; &lt;span style="color: rgb(0,0,255)"&gt;set&lt;/span&gt;; }
        &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;Type&lt;/span&gt; DataType { &lt;span style="color: rgb(0,0,255)"&gt;get&lt;/span&gt;; &lt;span style="color: rgb(0,0,255)"&gt;set&lt;/span&gt;; }
        &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;CharacterCasing&lt;/span&gt; Case { &lt;span style="color: rgb(0,0,255)"&gt;get&lt;/span&gt;; &lt;span style="color: rgb(0,0,255)"&gt;set&lt;/span&gt;; }
        &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;bool&lt;/span&gt; MultiLine { &lt;span style="color: rgb(0,0,255)"&gt;get&lt;/span&gt;; &lt;span style="color: rgb(0,0,255)"&gt;set&lt;/span&gt;; }
        &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;bool&lt;/span&gt; AllowTab { &lt;span style="color: rgb(0,0,255)"&gt;get&lt;/span&gt;; &lt;span style="color: rgb(0,0,255)"&gt;set&lt;/span&gt;; }
        &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;bool&lt;/span&gt; AllowNewline { &lt;span style="color: rgb(0,0,255)"&gt;get&lt;/span&gt;; &lt;span style="color: rgb(0,0,255)"&gt;set&lt;/span&gt;; }

&lt;span style="color: rgb(0,0,255)"&gt;        #endregion
&lt;/span&gt;    }&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;The StringDataAttribute class is itself decorated with a [MetaData] attribute. This tells the MetaData Applicator that it needs to be considered when applying MetaData properties to the UI. [The StringLengthAttribute that this class derives from is actually another ValidationRule attribute that results in the creation of the StringLengthValidationRule.]&lt;/p&gt;
&lt;p&gt;Now the tricky part in all of this was trying to "hook" into the WPF Binding pipeline. I tried all the likely approaches - inheriting from Binding, looking at BindingExpression and eventually creating a custom MarkupExtension that offloads most of the work to the standard Binding MarkupExtension.&lt;/p&gt;
&lt;p&gt;Once I got that far I looked around and found that the &lt;a href="http://www.hardcodet.net/2008/04/wpf-custom-binding-class"&gt;MarkupExtension appears to be the current approach&lt;/a&gt;. Mine is currently a very simplified implementation - as I later found out there are much better examples around including &lt;a href="http://www.hardcodet.net/2008/04/wpf-custom-binding-class"&gt;this one&lt;/a&gt; or the one used by the &lt;a href="http://www.codeplex.com/entlibcontrib/Wiki/View.aspx?title=Standalone%20Validation%20Block"&gt;Enterprise Library Contrib's Standalone Validation Block&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Having a customised Binding gives several advantages not the least of which is applying default values for the Binding itself. Ever got tired of adding ValidatesOnDataErrors=true, ValidatesOnExceptions=true, NotifyOnValidationError=true, UpdateSourceTrigger=UpdateSourceTrigger.PropertyChanged to every Binding!?&lt;/p&gt;
&lt;p&gt;Anyhow - more on that later - for now I use the following code within the ProvideValue() method of my custom MarkupExtension.&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="font-size: 8pt; font-family: verdana"&gt;    &lt;span style="color: rgb(43,145,175)"&gt;IProvideValueTarget&lt;/span&gt; valueTarget = (&lt;span style="color: rgb(43,145,175)"&gt;IProvideValueTarget&lt;/span&gt;)serviceProvider.GetService(&lt;br&gt;                                                                                                      &lt;span style="color: rgb(0,0,255)"&gt;typeof&lt;/span&gt;(&lt;span style="color: rgb(43,145,175)"&gt;IProvideValueTarget&lt;/span&gt;));
    &lt;span style="color: rgb(43,145,175)"&gt;DependencyObject&lt;/span&gt; dependencyObject = valueTarget.TargetObject &lt;span style="color: rgb(0,0,255)"&gt;as&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;DependencyObject&lt;/span&gt;;
    &lt;span style="color: rgb(43,145,175)"&gt;DependencyProperty&lt;/span&gt; dependencyProperty = valueTarget.TargetProperty &lt;span style="color: rgb(0,0,255)"&gt;as&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;DependencyProperty&lt;/span&gt;;
    &lt;span style="color: rgb(0,0,255)"&gt;if&lt;/span&gt; (dependencyObject != &lt;span style="color: rgb(0,0,255)"&gt;null&lt;/span&gt; &amp;amp;&amp;amp; dependencyProperty != &lt;span style="color: rgb(0,0,255)"&gt;null&lt;/span&gt;)
    {
        &lt;span style="color: rgb(0,0,255)"&gt;if&lt;/span&gt; (dependencyObject &lt;span style="color: rgb(0,0,255)"&gt;is&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;FrameworkElement&lt;/span&gt;)
        {
            &lt;span style="color: rgb(0,0,255)"&gt;object&lt;/span&gt; dataContext = ((&lt;span style="color: rgb(43,145,175)"&gt;FrameworkElement&lt;/span&gt;) dependencyObject).GetValue(&lt;br&gt;                                                                           &lt;span style="color: rgb(43,145,175)"&gt;FrameworkElement&lt;/span&gt;.DataContextProperty);

            &lt;span style="color: rgb(0,0,255)"&gt;if&lt;/span&gt; (Applicator != &lt;span style="color: rgb(0,0,255)"&gt;null&lt;/span&gt;)
            {
                &lt;span style="color: rgb(43,145,175)"&gt;PropertyDescriptor&lt;/span&gt; property = &lt;span style="color: rgb(43,145,175)"&gt;TypeDescriptor&lt;/span&gt;.GetProperties(dataContext).Find(_path, &lt;span style="color: rgb(0,0,255)"&gt;false&lt;/span&gt;);
                &lt;span style="color: rgb(0,0,255)"&gt;if&lt;/span&gt; (property != &lt;span style="color: rgb(0,0,255)"&gt;null&lt;/span&gt;)
                {
                    &lt;span style="color: rgb(0,0,255)"&gt;foreach&lt;/span&gt; (&lt;span style="color: rgb(43,145,175)"&gt;Attribute&lt;/span&gt; propertyAttribute &lt;span style="color: rgb(0,0,255)"&gt;in&lt;/span&gt; property.Attributes)
                    {
                        &lt;span style="color: rgb(0,128,0)"&gt;// Check if the attribute class is itself decorated with a MetaData attribute.
&lt;/span&gt;                        &lt;span style="color: rgb(0,0,255)"&gt;if&lt;/span&gt; (&lt;span style="color: rgb(43,145,175)"&gt;TypeDescriptor&lt;/span&gt;.GetAttributes(propertyAttribute).Contains(&lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;MetaDataAttribute&lt;/span&gt;()))
                        {
                            Applicator.ApplyTo(propertyAttribute, dependencyObject, dependencyProperty);
                        }
                    }
                }
            }
        }
    }&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;Essentially its just checking each Binding and then looking for [MetaData] decorated attributes on the data source. [Note that this code overly simplifies resolving the DataContext and Path. Remember the path is just that not necessarily just a property name, it can even have things like indexers etc. in it.]. Once its found an attribute it calls out to the statically assigned Applicator.&lt;/p&gt;
&lt;p&gt;The Applicator simply consists of a registered list of types and IMetaDataApplicators. Prior to any custom data Binding the application registered those [MetaData] attributes that it wishes to apply to the UI with the Applicator on the markup extension. Like so...&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="font-size: 8pt; font-family: verdana"&gt;    &lt;span style="color: rgb(43,145,175)"&gt;MetaDataExtension&lt;/span&gt;.Applicator = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;MetaDataApplicator&lt;/span&gt;();
    &lt;span style="color: rgb(43,145,175)"&gt;MetaDataExtension&lt;/span&gt;.Applicator.RegisteredApplicators.Add(&lt;br&gt;                                                         &lt;span style="color: rgb(0,0,255)"&gt;typeof&lt;/span&gt;(&lt;span style="color: rgb(43,145,175)"&gt;StringDataAttribute&lt;/span&gt;), &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;StringDataApplicator&lt;/span&gt;());
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The StringDataApplicator class then does whatever it desires with the StringDataAttribute, target object and property that its been given. Here's a simple partially complete example:&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="font-size: 8pt; font-family: verdana"&gt;    &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;class&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;StringDataApplicator&lt;/span&gt; : &lt;span style="color: rgb(43,145,175)"&gt;IMetaDataApplicator
&lt;/span&gt;    {
        &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;void&lt;/span&gt; ApplyTo(&lt;span style="color: rgb(43,145,175)"&gt;Attribute&lt;/span&gt; attribute, &lt;span style="color: rgb(0,0,255)"&gt;object&lt;/span&gt; targetObject, &lt;span style="color: rgb(0,0,255)"&gt;object&lt;/span&gt; targetProperty)
        {
            &lt;span style="color: rgb(43,145,175)"&gt;StringDataAttribute&lt;/span&gt; stringData = attribute &lt;span style="color: rgb(0,0,255)"&gt;as&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;StringDataAttribute&lt;/span&gt;;
            &lt;span style="color: rgb(0,0,255)"&gt;if&lt;/span&gt; (stringData == &lt;span style="color: rgb(0,0,255)"&gt;null&lt;/span&gt;) &lt;br&gt;                &lt;span style="color: rgb(0,0,255)"&gt;throw&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;InvalidOperationException&lt;/span&gt;(&lt;span style="color: rgb(163,21,21)"&gt;"StringDataApplication only supports StringDataAttribute."&lt;/span&gt;);

            &lt;span style="color: rgb(43,145,175)"&gt;TextBoxBase&lt;/span&gt; textBoxBase = targetObject &lt;span style="color: rgb(0,0,255)"&gt;as&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;TextBoxBase&lt;/span&gt;;
            &lt;span style="color: rgb(0,0,255)"&gt;if&lt;/span&gt; (textBoxBase != &lt;span style="color: rgb(0,0,255)"&gt;null&lt;/span&gt;)
            {
                textBoxBase.AcceptsTab = stringData.AllowTab;
                textBoxBase.AcceptsReturn = stringData.AllowNewline;&lt;br&gt;            }

            &lt;span style="color: rgb(43,145,175)"&gt;TextBox&lt;/span&gt; textBox = targetObject &lt;span style="color: rgb(0,0,255)"&gt;as&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;TextBox&lt;/span&gt;;
            &lt;span style="color: rgb(0,0,255)"&gt;if&lt;/span&gt; (textBox != &lt;span style="color: rgb(0,0,255)"&gt;null&lt;/span&gt;)
            {
                &lt;span style="color: rgb(0,0,255)"&gt;switch&lt;/span&gt;(stringData.Case)
                {
                    &lt;span style="color: rgb(0,0,255)"&gt;case&lt;/span&gt; Spencen.MetaData.&lt;span style="color: rgb(43,145,175)"&gt;CharacterCasing&lt;/span&gt;.Lower:
                        textBox.CharacterCasing = System.Windows.Controls.&lt;span style="color: rgb(43,145,175)"&gt;CharacterCasing&lt;/span&gt;.Lower;
                        &lt;span style="color: rgb(0,0,255)"&gt;break&lt;/span&gt;;
                    &lt;span style="color: rgb(0,0,255)"&gt;case&lt;/span&gt; Spencen.MetaData.&lt;span style="color: rgb(43,145,175)"&gt;CharacterCasing&lt;/span&gt;.Upper:
                        textBox.CharacterCasing = System.Windows.Controls.&lt;span style="color: rgb(43,145,175)"&gt;CharacterCasing&lt;/span&gt;.Upper;
                        &lt;span style="color: rgb(0,0,255)"&gt;break&lt;/span&gt;;
                    &lt;span style="color: rgb(0,0,255)"&gt;case&lt;/span&gt; Spencen.MetaData.&lt;span style="color: rgb(43,145,175)"&gt;CharacterCasing&lt;/span&gt;.Camel:
                        &lt;span style="color: rgb(0,128,0)"&gt;// TODO: Put hooks in to do formatting.
&lt;/span&gt;                        &lt;span style="color: rgb(0,0,255)"&gt;break&lt;/span&gt;;
                    &lt;span style="color: rgb(0,0,255)"&gt;case&lt;/span&gt; Spencen.MetaData.&lt;span style="color: rgb(43,145,175)"&gt;CharacterCasing&lt;/span&gt;.Title:
                        &lt;span style="color: rgb(0,128,0)"&gt;// TODO: Put hooks in to do formatting.
&lt;/span&gt;                        &lt;span style="color: rgb(0,0,255)"&gt;break&lt;/span&gt;;
                }

                textBox.MaxLength = stringData.MaximumLength;
            }
        }
    }
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The XAML to bind the Holiday classes Name property using the MetaData MarkupExtension would be:&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="font-size: 8pt; font-family: verdana"&gt;&lt;span style="color: rgb(163,21,21)"&gt;    &lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;TextBox&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Grid.Column&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;="1"&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Grid.Row&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;="0"&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Width&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;="150"&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Text&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;="{&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;meta&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;:&lt;/span&gt;&lt;span style="color: rgb(163,21,21)"&gt;MetaData&lt;/span&gt;&lt;span style="color: rgb(255,0,0)"&gt; Name&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;}"/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;The rendered TextBox would use the Binding properties defined as the default on the MetaData MarkupExtension (as opposed to the standard Binding class defaults). It will have its MaxLength set to 10 and entry forced to uppercase characters. Of course there are plenty of other properties on the StringDataAttribute that could have been used. For example: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defining a DataType that specifies a type that is used as an IValueConverter and/or formatter. This can be used to setup all the necessary plumbing for allowing data entry of specific string types - such as phone numbers, e-mail addresses etc.&lt;/li&gt;
&lt;li&gt;Using MaximumLength to determine the optimum length for a TextBox. Again this helps with consistency - all 4 character code fields are automatically set to the standard width for a four character field.&lt;/li&gt;
&lt;li&gt;Using the AnnotationAttribute to set the Tooltip.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://blog.spencen.com/images/83489-72989/MetaData_2.png" target="_blank"&gt;&lt;img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="341" alt="MetaData" src="http://blog.spencen.com/images/83489-72989/MetaData_thumb_1.png" width="640" border="0"&gt;&lt;/a&gt;&lt;/p&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2008/05/13/applying-metadata-to-wpf-bindings.aspx#Comments</comments><guid isPermaLink="false">a9d63e02-8b79-4e50-959f-187606aa1293</guid><pubDate>Mon, 12 May 2008 15:31:05 GMT</pubDate></item><item><title>Physics of the Impossible</title><link>http://blog.spencen.com/2008/05/12/physics-of-the-impossible.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Purchased a &lt;a href="http://mkaku.org/books-tv-film/physics_of_the_impossible.php"&gt;new book&lt;/a&gt; I've been meeting to get for a while now. Ordered through &lt;a href="http://www.fishpond.com.au"&gt;www.fishpond.com.au&lt;/a&gt; (cheaper/faster/better than &lt;a href="http://blog.spencen.com/2007/09/05/little-to-report.aspx"&gt;Amazon&lt;/a&gt;). Purchase inspired via an interview with the author &lt;a href="http://mkaku.org/"&gt;Michio Kaku&lt;/a&gt; on an &lt;a href="http://www.hanselminutes.com/default.aspx?showID=119"&gt;old episode of Hanselminutes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&amp;nbsp; &lt;/p&gt;&lt;img src="http://mkaku.org/img/book_PhysicsImpossible_2.jpg"&gt;</description><category>General</category><comments>http://blog.spencen.com/2008/05/12/physics-of-the-impossible.aspx#Comments</comments><guid isPermaLink="false">c95df361-35a7-427f-b384-fe0d815df66a</guid><pubDate>Mon, 12 May 2008 13:19:30 GMT</pubDate></item><item><title>Asynchronous Validation</title><link>http://blog.spencen.com/2008/05/09/asynchronous-validation.aspx?ref=rss</link><dc:creator>Nigel Spencer</dc:creator><description>&lt;p&gt;Occasionally I've wanted to execute Validation Rules that take a significant duration to execute (anything more than half a second for example). Normally these involve some cross-tier communication, e.g. database access, web service call etc.&amp;nbsp; Examples of these types of validation include:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Validating that a field is unique - for example when entering a new Inventory Item which requires a unique code. This could also require a unique combination of field values, for example an item name that must be unique during its effective lifetime specified by a from/to date.  &lt;li&gt;Validating stock levels for a selected product.&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;It could be argued that these types of validation are best performed by the business layer on the application server after the user has committed the transaction, i.e. pressed the Save/Submit button. Of course the rules must be validated at that point anyway - since the business layer on your application server should never trust any data being sent to it. But that doesn't stop us using the same rules to provide timely warnings to the user prior them submitting a form full of data. &lt;/p&gt; &lt;p&gt;The following code shows an sample ValidationRule designed to execute asynchronously.&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="font-size: 8pt; font-family: verdana"&gt;&lt;span style="color: rgb(128,128,128)"&gt;///&lt;/span&gt;&lt;span style="color: rgb(0,128,0)"&gt; &lt;/span&gt;&lt;span style="color: rgb(128,128,128)"&gt;&amp;lt;summary&amp;gt;
///&lt;/span&gt;&lt;span style="color: rgb(0,128,0)"&gt; Sample validation rule that executes asynchronously by default.
&lt;/span&gt;&lt;span style="color: rgb(128,128,128)"&gt;///&lt;/span&gt;&lt;span style="color: rgb(0,128,0)"&gt; &lt;/span&gt;&lt;span style="color: rgb(128,128,128)"&gt;&amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;class&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;SampleAsyncRule&lt;/span&gt; : &lt;span style="color: rgb(43,145,175)"&gt;ValidationRule
&lt;/span&gt;{
    &lt;span style="color: rgb(0,0,255)"&gt;private&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;int&lt;/span&gt; _milliSecondsToDelay;

    &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; SampleAsyncRule(&lt;span style="color: rgb(0,0,255)"&gt;int&lt;/span&gt; milliSecondsToDelay)
    {
        _milliSecondsToDelay = milliSecondsToDelay;
        IsAsync = &lt;span style="color: rgb(0,0,255)"&gt;true&lt;/span&gt;; &lt;span style="color: rgb(0,128,0)"&gt;// Setting IsAsync to true ensures the Validate method is executed on a background thread.
&lt;/span&gt;    }

    &lt;span style="color: rgb(0,0,255)"&gt;public&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;override&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;ValidationResult&lt;/span&gt; Validate(&lt;span style="color: rgb(0,0,255)"&gt;object&lt;/span&gt; value, System.Globalization.&lt;span style="color: rgb(43,145,175)"&gt;CultureInfo&lt;/span&gt; cultureInfo)
    {
        &lt;span style="color: rgb(0,128,0)"&gt;// This call could be replaced with a cal to the application service tier via a web service, remoting etc.
&lt;/span&gt;        System.Threading.&lt;span style="color: rgb(43,145,175)"&gt;Thread&lt;/span&gt;.Sleep(_milliSecondsToDelay);

        &lt;span style="color: rgb(43,145,175)"&gt;Random&lt;/span&gt; random = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;Random&lt;/span&gt;();
        &lt;span style="color: rgb(0,0,255)"&gt;if&lt;/span&gt; (random.Next(100) &amp;lt; 50)
        {
            &lt;span style="color: rgb(0,0,255)"&gt;return&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;ValidationResult&lt;/span&gt;(&lt;span style="color: rgb(43,145,175)"&gt;ContentSeverity&lt;/span&gt;.Error, &lt;span style="color: rgb(163,21,21)"&gt;"Async validation has determined an error."&lt;/span&gt;);
        }
        &lt;span style="color: rgb(0,0,255)"&gt;else
&lt;/span&gt;        {
            &lt;span style="color: rgb(0,0,255)"&gt;return&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;ValidationResult.ValidResult;&lt;/span&gt;
        }
    }
}&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;When validating a registered rule the FormValidator checks the ValidationRule.IsAsync flag. If set to true it executes the Validate method on the rule using an asynchronous delegate call. The rule is interpreted as having returned a "pending" ValidationResult which will put the Validator in an indeterminate state (assuming it was previously in a Valid state). When the async delegate completes a callback method on the Validator is fired which extracts the real ValidationResult and removes the temporary "pending" result.&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="font-size: 8pt; font-family: verdana"&gt;&lt;span style="color: rgb(0,0,255)"&gt;protected&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;override&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;void&lt;/span&gt; ValidateInternal(&lt;span style="color: rgb(0,0,255)"&gt;object&lt;/span&gt; validationSource)
{
    OnValidating(&lt;span style="color: rgb(43,145,175)"&gt;EventArgs&lt;/span&gt;.Empty);
    &lt;span style="color: rgb(0,0,255)"&gt;foreach&lt;/span&gt; (Spencen.Validation.Rules.&lt;span style="color: rgb(43,145,175)"&gt;ValidationRule&lt;/span&gt; rule &lt;span style="color: rgb(0,0,255)"&gt;in&lt;/span&gt; RegisteredRules[validationSource])
    {
        Spencen.Validation.&lt;span style="color: rgb(43,145,175)"&gt;ValidationResult&lt;/span&gt; result;
        &lt;span style="color: rgb(0,0,255)"&gt;if&lt;/span&gt; (rule.IsAsync)
        {
            &lt;span style="color: rgb(43,145,175)"&gt;AsyncValidateCaller&lt;/span&gt; caller = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;AsyncValidateCaller&lt;/span&gt;(rule.BeginValidate);
            &lt;span style="color: rgb(43,145,175)"&gt;IAsyncResult&lt;/span&gt; asyncResult = caller.BeginInvoke(validationSource, &lt;br&gt;                                                                                 &lt;/span&gt;&lt;span style="font-size: 8pt; font-family: verdana"&gt;&lt;span style="color: rgb(43,145,175)"&gt;CultureInfo&lt;/span&gt;.CurrentCulture, &lt;br&gt;                                                                                 ValidateCallback, caller);
            result = &lt;span style="color: rgb(0,0,255)"&gt;new&lt;/span&gt; &lt;span style="color: rgb(43,145,175)"&gt;AsyncValidationResult&lt;/span&gt;(asyncResult);
        }
        &lt;span style="color: rgb(0,0,255)"&gt;else
&lt;/span&gt;        {
            result = rule.Validate(validationSource, &lt;span style="color: rgb(43,145,175)"&gt;CultureInfo&lt;/span&gt;.CurrentCulture);
        }

        ExtractErrors(result);
    }
    OnValidated(&lt;span style="color: rgb(43,145,175)"&gt;EventArgs&lt;/span&gt;.Empty);
}&lt;/span&gt;&lt;/pre&gt;</description><category>Development</category><category>.NET</category><category>WPF</category><comments>http://blog.spencen.com/2008/05/09/asynchronous-validation.aspx#Comments</comments><guid isPermaLink="false">efdda716-f257-4790-98e5-bd26004bf530</guid><pubDate>Thu, 08 May 2008 14:59:25 GMT</pubDate></item></channel></rss>